// Code generated by main. DO NOT EDIT.

package xsd

import (
	"bytes"
	"encoding/xml"
	"time"
)

type API struct {
	XMLNs        string             `xml:"xmlns:tns,attr,omitempty"`
	Timestamp    string             `xml:"tns:timestamp"`
	Destinatario string             `xml:"tns:destinatario,omitempty"`
	Topic        Topic              `xml:"tns:topic"`
	Endpoints    ListaDePropiedades `xml:"pref:endpoints,omitempty"`
	EnServicio   bool               `xml:"tns:enServicio,omitempty"`
}

func (t *API) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T API
	var layout struct{ *T }
	layout.T = (*T)(t)
	layout.Endpoints.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *API) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T API
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ActualizacionDeCliente struct {
	XMLNs         string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time `xml:"tna:timestamp"`
	Remitente     string    `xml:"tna:remitente"`
	Destinatario  string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time `xml:"tna:vencimiento,omitempty"`
	Cliente       Cliente   `xml:"tns:cliente"`
	Topic         _anon23   `xml:"tna:topic"`
}

func (t *ActualizacionDeCliente) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ActualizacionDeCliente
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cliente.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ActualizacionDeCliente) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ActualizacionDeCliente
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type ActualizacionDeEstadoEnvio struct {
	XMLNs         string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time      `xml:"tna:timestamp"`
	Remitente     string         `xml:"tna:remitente"`
	Destinatario  string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time      `xml:"tna:vencimiento,omitempty"`
	Envio         DetalleDeEnvio `xml:"tns:envio"`
	Topic         _anon28        `xml:"tna:topic"`
}

func (t *ActualizacionDeEstadoEnvio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ActualizacionDeEstadoEnvio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ActualizacionDeEstadoEnvio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ActualizacionDeEstadoEnvio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type Admision struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon65       `xml:"tna:topic"`
	Donde                    DatosSucursal `xml:"tns:donde,omitempty"`
}

func (t *Admision) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Admision
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Donde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *Admision) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Admision
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type AltaAutomatica struct {
	XMLNs                    string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time      `xml:"tna:timestamp"`
	Remitente                string         `xml:"tna:remitente"`
	Destinatario             string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time      `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura   `xml:"tna:quienFactura"`
	CodigoDeEnvio            string         `xml:"tna:codigoDeEnvio"`
	Nombre                   string         `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time      `xml:"tna:cuando"`
	CodigoDeContratoInterno  string         `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string         `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string         `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string         `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string         `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string         `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal  `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Envio                    DetalleDeEnvio `xml:"tns:envio"`
	Contrato                 Contrato       `xml:"tns:contrato"`
	Topic                    _anon61        `xml:"tna:topic"`
}

func (t *AltaAutomatica) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaAutomatica
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Contrato.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaAutomatica) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaAutomatica
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type AltaConAnomalias struct {
	XMLNs                    string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time      `xml:"tna:timestamp"`
	Remitente                string         `xml:"tna:remitente"`
	Destinatario             string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time      `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura   `xml:"tna:quienFactura"`
	CodigoDeEnvio            string         `xml:"tna:codigoDeEnvio"`
	Nombre                   string         `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time      `xml:"tna:cuando"`
	CodigoDeContratoInterno  string         `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string         `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string         `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string         `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string         `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string         `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal  `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Envio                    DetalleDeEnvio `xml:"tns:envio"`
	Contrato                 Contrato       `xml:"tns:contrato"`
	Topic                    _anon63        `xml:"tna:topic"`
}

func (t *AltaConAnomalias) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaConAnomalias
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Contrato.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaConAnomalias) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaConAnomalias
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type AltaDeCliente struct {
	XMLNs         string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time `xml:"tna:timestamp"`
	Remitente     string    `xml:"tna:remitente"`
	Destinatario  string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time `xml:"tna:vencimiento,omitempty"`
	Cliente       Cliente   `xml:"tns:cliente"`
	Topic         Topic     `xml:"tna:topic"`
}

func (t *AltaDeCliente) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaDeCliente
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cliente.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaDeCliente) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaDeCliente
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type AltaDeComponente struct {
	XMLNs         string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time          `xml:"tna:timestamp"`
	Remitente     string             `xml:"tna:remitente"`
	Destinatario  string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time          `xml:"tna:vencimiento,omitempty"`
	Topic         _anon145           `xml:"tna:topic"`
	IdglaCliente  string             `xml:"tna:idglaCliente,omitempty"`
	Linking       ListaDePropiedades `xml:"tns:linking,omitempty"`
	IdPaquete     string             `xml:"tna:idPaquete,omitempty"`
	IdComponente  string             `xml:"tna:idComponente,omitempty"`
	Referencia    string             `xml:"tna:referencia,omitempty"`
	Cuando        string             `xml:"tna:cuando,omitempty"`
	IdglaContrato string             `xml:"tna:idglaContrato,omitempty"`
}

func (t *AltaDeComponente) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaDeComponente
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaDeComponente) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaDeComponente
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type AltaDeDistribuidor struct {
	XMLNs         string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time          `xml:"tna:timestamp"`
	Remitente     string             `xml:"tna:remitente"`
	Destinatario  string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time          `xml:"tna:vencimiento,omitempty"`
	Distribuidor  DatosDistribuidor  `xml:"tns:distribuidor,omitempty"`
	Linking       ListaDePropiedades `xml:"tns:linking,omitempty"`
	Topic         _anon97            `xml:"tna:topic"`
}

func (t *AltaDeDistribuidor) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaDeDistribuidor
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Distribuidor.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaDeDistribuidor) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaDeDistribuidor
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type AltaDeExcedente struct {
	XMLNs                    string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time      `xml:"tna:timestamp"`
	Remitente                string         `xml:"tna:remitente"`
	Destinatario             string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time      `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura   `xml:"tna:quienFactura"`
	CodigoDeEnvio            string         `xml:"tna:codigoDeEnvio"`
	Nombre                   string         `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time      `xml:"tna:cuando"`
	CodigoDeContratoInterno  string         `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string         `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string         `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string         `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string         `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string         `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal  `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Envio                    DetalleDeEnvio `xml:"tns:envio"`
	Contrato                 Contrato       `xml:"tns:contrato"`
	Topic                    _anon64        `xml:"tna:topic"`
}

func (t *AltaDeExcedente) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaDeExcedente
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Contrato.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaDeExcedente) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaDeExcedente
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type AltaDePaquete struct {
	XMLNs                 string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp             time.Time          `xml:"tna:timestamp"`
	Remitente             string             `xml:"tna:remitente"`
	Destinatario          string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden         string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento           time.Time          `xml:"tna:vencimiento,omitempty"`
	Topic                 _anon146           `xml:"tna:topic"`
	IdglaCliente          string             `xml:"tna:idglaCliente,omitempty"`
	Linking               ListaDePropiedades `xml:"tns:linking,omitempty"`
	IdPaquete             string             `xml:"tna:idPaquete,omitempty"`
	Referencia            string             `xml:"tna:referencia,omitempty"`
	CantidadDeComponentes int                `xml:"tna:cantidadDeComponentes,omitempty"`
	Cuando                string             `xml:"tna:cuando,omitempty"`
	IdglaContrato         string             `xml:"tna:idglaContrato,omitempty"`
}

func (t *AltaDePaquete) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaDePaquete
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaDePaquete) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaDePaquete
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type AltaDeRecibo struct {
	XMLNs                    string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time      `xml:"tna:timestamp"`
	Remitente                string         `xml:"tna:remitente"`
	Destinatario             string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time      `xml:"tna:vencimiento,omitempty"`
	Topic                    _anon82        `xml:"tna:topic"`
	NumeroDeRecibo           string         `xml:"tna:numeroDeRecibo"`
	Contratos                ListaDeObjetos `xml:"tns:contratos"`
	CantidadAmba             int            `xml:"tna:cantidadAmba,omitempty"`
	CantidadInterior         int            `xml:"tna:cantidadInterior,omitempty"`
	CantidadTotalEnvio       int            `xml:"tna:cantidadTotalEnvio,omitempty"`
	CantidadTotalTarjeta     int            `xml:"tna:cantidadTotalTarjeta,omitempty"`
	CantidadTotalCardCarrier int            `xml:"tna:cantidadTotalCardCarrier,omitempty"`
	TieneEnviosAsociados     bool           `xml:"tna:tieneEnviosAsociados"`
	SucursalDeAlta           DatosSucursal  `xml:"tns:sucursalDeAlta"`
	FechaDelRecibo           string         `xml:"tna:fechaDelRecibo"`
}

func (t *AltaDeRecibo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaDeRecibo
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Contratos.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalDeAlta.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaDeRecibo) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaDeRecibo
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type AltaDeSucursal struct {
	XMLNs         string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time     `xml:"tna:timestamp"`
	Remitente     string        `xml:"tna:remitente"`
	Destinatario  string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time     `xml:"tna:vencimiento,omitempty"`
	DatosSucursal DatosSucursal `xml:"tns:datosSucursal"`
	Topic         _anon26       `xml:"tna:topic"`
}

func (t *AltaDeSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaDeSucursal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.DatosSucursal.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaDeSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaDeSucursal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type AltaInterna struct {
	XMLNs                   string                `xml:"xmlns:tna,attr,omitempty"`
	Timestamp               time.Time             `xml:"tna:timestamp"`
	Remitente               string                `xml:"tna:remitente"`
	Destinatario            string                `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden           string                `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento             time.Time             `xml:"tna:vencimiento,omitempty"`
	Topic                   _anon72               `xml:"tna:topic"`
	Envio                   DetalleDeEnvioInterno `xml:"tns:envio,omitempty"`
	CodigoDeContratoInterno string                `xml:"tna:codigoDeContratoInterno,omitempty"`
}

func (t *AltaInterna) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaInterna
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaInterna) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaInterna
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type AltaManual struct {
	XMLNs                    string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time      `xml:"tna:timestamp"`
	Remitente                string         `xml:"tna:remitente"`
	Destinatario             string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time      `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura   `xml:"tna:quienFactura"`
	CodigoDeEnvio            string         `xml:"tna:codigoDeEnvio"`
	Nombre                   string         `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time      `xml:"tna:cuando"`
	CodigoDeContratoInterno  string         `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string         `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string         `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string         `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string         `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string         `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal  `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Envio                    DetalleDeEnvio `xml:"tns:envio"`
	Contrato                 Contrato       `xml:"tns:contrato"`
	Topic                    _anon60        `xml:"tna:topic"`
}

func (t *AltaManual) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaManual
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Contrato.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaManual) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaManual
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type AltaPorDevolucion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	GeneradaPorNumeroDeEnvio string        `xml:"tna:generadaPorNumeroDeEnvio,omitempty"`
	Donde                    DatosSucursal `xml:"tns:donde,omitempty"`
	Topic                    _anon128      `xml:"tna:topic,omitempty"`
}

func (t *AltaPorDevolucion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaPorDevolucion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Donde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaPorDevolucion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaPorDevolucion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type AltaPorRecanalizacion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	GeneradaPorNumeroDeEnvio string        `xml:"tna:generadaPorNumeroDeEnvio,omitempty"`
	Donde                    DatosSucursal `xml:"tns:donde,omitempty"`
	Topic                    _anon131      `xml:"tna:topic"`
}

func (t *AltaPorRecanalizacion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaPorRecanalizacion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Donde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaPorRecanalizacion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaPorRecanalizacion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type AltaRemota struct {
	XMLNs                    string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time      `xml:"tna:timestamp"`
	Remitente                string         `xml:"tna:remitente"`
	Destinatario             string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time      `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura   `xml:"tna:quienFactura"`
	CodigoDeEnvio            string         `xml:"tna:codigoDeEnvio"`
	Nombre                   string         `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time      `xml:"tna:cuando"`
	CodigoDeContratoInterno  string         `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string         `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string         `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string         `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string         `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string         `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal  `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Envio                    DetalleDeEnvio `xml:"tns:envio"`
	Contrato                 Contrato       `xml:"tns:contrato"`
	Topic                    _anon62        `xml:"tna:topic"`
}

func (t *AltaRemota) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AltaRemota
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Contrato.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AltaRemota) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AltaRemota
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type AnularPorteDebidoYEntregar struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon361  `xml:"tns:topic"`
}

func (t *AnularPorteDebidoYEntregar) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AnularPorteDebidoYEntregar
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *AnularPorteDebidoYEntregar) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AnularPorteDebidoYEntregar
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type AnularRetiro struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon364  `xml:"tns:topic"`
}

func (t *AnularRetiro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AnularRetiro
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *AnularRetiro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AnularRetiro
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type AsignacionACaja struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon81       `xml:"tna:topic"`
	Caja                     string        `xml:"tna:caja"`
	Fajo                     string        `xml:"tna:fajo"`
	SucursalActual           DatosSucursal `xml:"tns:sucursalActual"`
	Operador                 string        `xml:"tna:operador,omitempty"`
}

func (t *AsignacionACaja) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AsignacionACaja
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalActual.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *AsignacionACaja) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AsignacionACaja
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type AutorizarCustoria struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon354  `xml:"tns:topic"`
}

func (t *AutorizarCustoria) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AutorizarCustoria
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *AutorizarCustoria) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AutorizarCustoria
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type AutorizarEstacionar struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon356  `xml:"tns:topic"`
}

func (t *AutorizarEstacionar) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AutorizarEstacionar
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *AutorizarEstacionar) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AutorizarEstacionar
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type AutorizarModificacionGestionCobranza struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon359  `xml:"tns:topic"`
}

func (t *AutorizarModificacionGestionCobranza) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T AutorizarModificacionGestionCobranza
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *AutorizarModificacionGestionCobranza) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T AutorizarModificacionGestionCobranza
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type BajaDeDistribuidor struct {
	XMLNs         string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time          `xml:"tna:timestamp"`
	Remitente     string             `xml:"tna:remitente"`
	Destinatario  string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time          `xml:"tna:vencimiento,omitempty"`
	Distribuidor  DatosDistribuidor  `xml:"tns:distribuidor,omitempty"`
	Linking       ListaDePropiedades `xml:"tns:linking,omitempty"`
	Topic         _anon96            `xml:"tna:topic"`
}

func (t *BajaDeDistribuidor) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T BajaDeDistribuidor
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Distribuidor.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *BajaDeDistribuidor) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T BajaDeDistribuidor
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type BajaDeSucursal struct {
	XMLNs         string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time     `xml:"tna:timestamp"`
	Remitente     string        `xml:"tna:remitente"`
	Destinatario  string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time     `xml:"tna:vencimiento,omitempty"`
	DatosSucursal DatosSucursal `xml:"tns:datosSucursal"`
	Topic         _anon27       `xml:"tna:topic"`
}

func (t *BajaDeSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T BajaDeSucursal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.DatosSucursal.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *BajaDeSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T BajaDeSucursal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type BloquearEnvio struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    Topic         `xml:"tns:topic"`
}

func (t *BloquearEnvio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T BloquearEnvio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *BloquearEnvio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T BloquearEnvio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type BultoPesadoYMedido struct {
	XMLNs            string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp        time.Time     `xml:"tna:timestamp"`
	Remitente        string        `xml:"tna:remitente"`
	Destinatario     string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden    string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento      time.Time     `xml:"tna:vencimiento,omitempty"`
	Topic            _anon125      `xml:"tna:topic"`
	CodigoEnEtiqueta string        `xml:"tna:codigoEnEtiqueta"`
	PesoEnKg         float64       `xml:"tna:pesoEnKg,omitempty"`
	VolumenEnCm3     float64       `xml:"tna:volumenEnCm3,omitempty"`
	AltoEnCm         float64       `xml:"tna:altoEnCm"`
	LargoEnCm        float64       `xml:"tna:largoEnCm"`
	AnchoEnCm        float64       `xml:"tna:anchoEnCm"`
	Donde            DatosSucursal `xml:"tns:donde,omitempty"`
}

func (t *BultoPesadoYMedido) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T BultoPesadoYMedido
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Donde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *BultoPesadoYMedido) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T BultoPesadoYMedido
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type CacInformaSituacionEnvio struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon171      `xml:"tns:topic"`
}

func (t *CacInformaSituacionEnvio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CacInformaSituacionEnvio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *CacInformaSituacionEnvio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CacInformaSituacionEnvio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type CadenaDeFrioContieneDataLogger struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon172      `xml:"tns:topic"`
}

func (t *CadenaDeFrioContieneDataLogger) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CadenaDeFrioContieneDataLogger
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *CadenaDeFrioContieneDataLogger) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CadenaDeFrioContieneDataLogger
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type CadenaDeFrioSinFrecuencia struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon173      `xml:"tns:topic"`
}

func (t *CadenaDeFrioSinFrecuencia) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CadenaDeFrioSinFrecuencia
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *CadenaDeFrioSinFrecuencia) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CadenaDeFrioSinFrecuencia
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

// Must be at least 1 items long
type Calle string

type CambioDeConservadora struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon174      `xml:"tns:topic"`
}

func (t *CambioDeConservadora) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CambioDeConservadora
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *CambioDeConservadora) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CambioDeConservadora
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type CambioDeDestino struct {
	XMLNs                    string               `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time            `xml:"tna:timestamp"`
	Remitente                string               `xml:"tna:remitente"`
	Destinatario             string               `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string               `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time            `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura         `xml:"tna:quienFactura"`
	CodigoDeEnvio            string               `xml:"tna:codigoDeEnvio"`
	Nombre                   string               `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time            `xml:"tna:cuando"`
	CodigoDeContratoInterno  string               `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string               `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string               `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string               `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string               `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string               `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal        `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	NuevoDestino             LugarDeRetiroEntrega `xml:"tns:nuevoDestino"`
	Topic                    _anon29              `xml:"tna:topic"`
	NuevaSucursal            LugarDeRetiroEntrega `xml:"tns:nuevaSucursal"`
	EsSolicitadoPorCliente   bool                 `xml:"tna:esSolicitadoPorCliente"`
	Motivo                   string               `xml:"tna:motivo,omitempty"`
	Submotivo                string               `xml:"tna:submotivo,omitempty"`
	Observaciones            string               `xml:"tna:observaciones,omitempty"`
}

func (t *CambioDeDestino) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CambioDeDestino
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.NuevoDestino.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.NuevaSucursal.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *CambioDeDestino) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CambioDeDestino
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type CambioDeDestinoRechazado struct {
	XMLNs             string               `xml:"xmlns:tna,attr,omitempty"`
	Timestamp         time.Time            `xml:"tna:timestamp"`
	Remitente         string               `xml:"tna:remitente"`
	Destinatario      string               `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden     string               `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento       time.Time            `xml:"tna:vencimiento,omitempty"`
	NumeroDeEnvio     string               `xml:"tna:numeroDeEnvio,omitempty"`
	DestinoSolicitado LugarDeRetiroEntrega `xml:"tns:destinoSolicitado,omitempty"`
	DestinoActual     LugarDeRetiroEntrega `xml:"tns:destinoActual,omitempty"`
	Razon             string               `xml:"tna:razon,omitempty"`
	Topic             _anon161             `xml:"tna:topic"`
}

func (t *CambioDeDestinoRechazado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CambioDeDestinoRechazado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.DestinoSolicitado.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.DestinoActual.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *CambioDeDestinoRechazado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CambioDeDestinoRechazado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type CambioDeDetinoRealizado struct {
	XMLNs           string               `xml:"xmlns:tna,attr,omitempty"`
	Timestamp       time.Time            `xml:"tna:timestamp"`
	Remitente       string               `xml:"tna:remitente"`
	Destinatario    string               `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden   string               `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento     time.Time            `xml:"tna:vencimiento,omitempty"`
	NumeroDeEnvio   string               `xml:"tna:numeroDeEnvio,omitempty"`
	NuevoDestino    LugarDeRetiroEntrega `xml:"tns:nuevoDestino,omitempty"`
	DestinoAnterior LugarDeRetiroEntrega `xml:"tns:destinoAnterior,omitempty"`
	Topic           _anon160             `xml:"tna:topic"`
}

func (t *CambioDeDetinoRealizado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CambioDeDetinoRealizado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NuevoDestino.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.DestinoAnterior.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *CambioDeDetinoRealizado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CambioDeDetinoRealizado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type CambioEnCoberturaDeDistribucion struct {
	XMLNs                    string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time      `xml:"tna:timestamp"`
	Remitente                string         `xml:"tna:remitente"`
	Destinatario             string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time      `xml:"tna:vencimiento,omitempty"`
	Topic                    _anon133       `xml:"tna:topic"`
	Sucursal                 DatosSucursal  `xml:"tns:sucursal"`
	Operacion                Operacion      `xml:"tna:operacion"`
	CodigosPostalesAfectados ListaDeLugares `xml:"tns:codigosPostalesAfectados"`
}

func (t *CambioEnCoberturaDeDistribucion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CambioEnCoberturaDeDistribucion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Sucursal.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.CodigosPostalesAfectados.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *CambioEnCoberturaDeDistribucion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CambioEnCoberturaDeDistribucion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type CambioEnEquipoComercial struct {
	XMLNs         string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time `xml:"tna:timestamp"`
	Remitente     string    `xml:"tna:remitente"`
	Destinatario  string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time `xml:"tna:vencimiento,omitempty"`
	Cliente       Cliente   `xml:"tns:cliente"`
	Topic         _anon58   `xml:"tna:topic"`
}

func (t *CambioEnEquipoComercial) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CambioEnEquipoComercial
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cliente.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *CambioEnEquipoComercial) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CambioEnEquipoComercial
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type CaminoIntransitable struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon175      `xml:"tns:topic"`
}

func (t *CaminoIntransitable) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CaminoIntransitable
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *CaminoIntransitable) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CaminoIntransitable
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

// Must be at least 1 items long
type Canal string

type CanalizadoACourier struct {
	XMLNs                    string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time          `xml:"tna:timestamp"`
	Remitente                string             `xml:"tna:remitente"`
	Destinatario             string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time          `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura       `xml:"tna:quienFactura"`
	CodigoDeEnvio            string             `xml:"tna:codigoDeEnvio"`
	Nombre                   string             `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time          `xml:"tna:cuando"`
	CodigoDeContratoInterno  string             `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string             `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string             `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string             `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string             `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string             `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal      `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Courier                  string             `xml:"tna:courier"`
	Topic                    _anon87            `xml:"tna:topic"`
	DatosAdicionales         ListaDePropiedades `xml:"tns:datosAdicionales,omitempty"`
}

func (t *CanalizadoACourier) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CanalizadoACourier
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.DatosAdicionales.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *CanalizadoACourier) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CanalizadoACourier
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type CancelacionDeOrdenDeEnvioRechazada struct {
	XMLNs                string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp            time.Time `xml:"tna:timestamp"`
	Remitente            string    `xml:"tna:remitente"`
	Destinatario         string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden        string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento          time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDeOrdenDeEnvio string    `xml:"tna:numeroDeOrdenDeEnvio,omitempty"`
	NumeroDeEnvio        string    `xml:"tna:numeroDeEnvio,omitempty"`
	Razon                string    `xml:"tna:razon,omitempty"`
	Topic                _anon157  `xml:"tna:topic"`
}

func (t *CancelacionDeOrdenDeEnvioRechazada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CancelacionDeOrdenDeEnvioRechazada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *CancelacionDeOrdenDeEnvioRechazada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CancelacionDeOrdenDeEnvioRechazada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type CapacidadOperativaExcedida struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon176      `xml:"tns:topic"`
}

func (t *CapacidadOperativaExcedida) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CapacidadOperativaExcedida
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *CapacidadOperativaExcedida) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CapacidadOperativaExcedida
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type CargaConsolidada struct {
	XMLNs         string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time     `xml:"tna:timestamp"`
	Remitente     string        `xml:"tna:remitente"`
	Destinatario  string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time     `xml:"tna:vencimiento,omitempty"`
	Contenedor    string        `xml:"tna:contenedor,omitempty"`
	Contenido     string        `xml:"tna:contenido,omitempty"`
	Donde         DatosSucursal `xml:"tns:donde,omitempty"`
	Topic         _anon164      `xml:"tna:topic"`
}

func (t *CargaConsolidada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CargaConsolidada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Donde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *CargaConsolidada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CargaConsolidada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type CargaDesconsolidada struct {
	XMLNs         string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time     `xml:"tna:timestamp"`
	Remitente     string        `xml:"tna:remitente"`
	Destinatario  string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time     `xml:"tna:vencimiento,omitempty"`
	Contenedor    string        `xml:"tna:contenedor,omitempty"`
	Contenido     string        `xml:"tna:contenido,omitempty"`
	Donde         DatosSucursal `xml:"tns:donde,omitempty"`
	Topic         _anon165      `xml:"tna:topic"`
}

func (t *CargaDesconsolidada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CargaDesconsolidada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Donde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *CargaDesconsolidada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CargaDesconsolidada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

// Must be at least 1 items long
type CategoriaDeCliente string

type CierreDeEntidad struct {
	XMLNs                    string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time          `xml:"tna:timestamp"`
	Remitente                string             `xml:"tna:remitente"`
	Destinatario             string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time          `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura       `xml:"tna:quienFactura"`
	CodigoDeEnvio            string             `xml:"tna:codigoDeEnvio"`
	Nombre                   string             `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time          `xml:"tna:cuando"`
	CodigoDeContratoInterno  string             `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string             `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string             `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string             `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string             `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string             `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal      `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon104           `xml:"tna:topic"`
	Motivo                   string             `xml:"tna:motivo,omitempty"`
	Submotivo                string             `xml:"tna:submotivo,omitempty"`
	DatosAdicionales         ListaDePropiedades `xml:"tns:datosAdicionales,omitempty"`
}

func (t *CierreDeEntidad) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CierreDeEntidad
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.DatosAdicionales.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *CierreDeEntidad) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CierreDeEntidad
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type Cliente struct {
	XMLNs                   string                 `xml:"xmlns:tns,attr,omitempty"`
	CodigoDeClienteInterno  CodigoDeClienteInterno `xml:"tns:codigoDeClienteInterno"`
	Canal                   Canal                  `xml:"tns:canal,omitempty"`
	CategoriaDeCliente      CategoriaDeCliente     `xml:"tns:categoriaDeCliente,omitempty"`
	DepartamentoDeVentas    DepartamentoDeVentas   `xml:"tns:departamentoDeVentas,omitempty"`
	CodigoDeDireccion       CodigoDeDireccion      `xml:"tns:codigoDeDireccion"`
	EjecutivoDeCuentas      EjecutivoDeCuentas     `xml:"tns:ejecutivoDeCuentas,omitempty"`
	EstaActivo              bool                   `xml:"tns:estaActivo"`
	GerenteDeCuentas        GerenteDeCuentas       `xml:"tns:gerenteDeCuentas,omitempty"`
	RazonSocial             RazonSocial            `xml:"tns:razonSocial"`
	Segmento                Segmento               `xml:"tns:segmento,omitempty"`
	TipoDeEntidadFiscal     TipoDeEntidadFiscal    `xml:"tns:tipoDeEntidadFiscal"`
	EjecutivoDeCuentasLogin string                 `xml:"tns:ejecutivoDeCuentasLogin,omitempty"`
	NombreDeFantasia        NombreDeFantasia       `xml:"tns:nombreDeFantasia"`
	Cuit                    Cuit                   `xml:"tns:cuit,omitempty"`
}

func (t *Cliente) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Cliente
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *Cliente) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Cliente
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ClienteDifiereFechaEntrega struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon177      `xml:"tns:topic"`
}

func (t *ClienteDifiereFechaEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ClienteDifiereFechaEntrega
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ClienteDifiereFechaEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ClienteDifiereFechaEntrega
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ClienteInformaCambioDomicilio struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon178      `xml:"tns:topic"`
}

func (t *ClienteInformaCambioDomicilio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ClienteInformaCambioDomicilio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ClienteInformaCambioDomicilio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ClienteInformaCambioDomicilio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ClienteInformaNoEsProductoSolicitado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon179      `xml:"tns:topic"`
}

func (t *ClienteInformaNoEsProductoSolicitado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ClienteInformaNoEsProductoSolicitado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ClienteInformaNoEsProductoSolicitado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ClienteInformaNoEsProductoSolicitado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ClienteInformaSinCheques struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon180      `xml:"tns:topic"`
}

func (t *ClienteInformaSinCheques) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ClienteInformaSinCheques
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ClienteInformaSinCheques) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ClienteInformaSinCheques
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ClienteRetieneDocumentacionYMercaderia struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon181      `xml:"tns:topic"`
}

func (t *ClienteRetieneDocumentacionYMercaderia) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ClienteRetieneDocumentacionYMercaderia
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ClienteRetieneDocumentacionYMercaderia) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ClienteRetieneDocumentacionYMercaderia
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ClienteSolicitaRepactarVisita struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon182      `xml:"tns:topic"`
}

func (t *ClienteSolicitaRepactarVisita) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ClienteSolicitaRepactarVisita
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ClienteSolicitaRepactarVisita) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ClienteSolicitaRepactarVisita
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

// Must be at least 1 items long
type CodigoDeClienteInterno string

// Must be at least 1 items long
type CodigoDeDireccion string

// Must be at least 1 items long
type CodigoPostal string

type ComienzoCustodiaEnSucursal struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon32       `xml:"tna:topic"`
	CantidadDeDiasDeLaFase   int           `xml:"tna:cantidadDeDiasDeLaFase"`
	Motivo                   string        `xml:"tna:motivo,omitempty"`
	Submotivo                string        `xml:"tna:submotivo,omitempty"`
	SucursalDeCustodia       DatosSucursal `xml:"tns:sucursalDeCustodia,omitempty"`
}

func (t *ComienzoCustodiaEnSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ComienzoCustodiaEnSucursal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalDeCustodia.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ComienzoCustodiaEnSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ComienzoCustodiaEnSucursal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ComponenteRecibido struct {
	XMLNs         string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time          `xml:"tna:timestamp"`
	Remitente     string             `xml:"tna:remitente"`
	Destinatario  string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time          `xml:"tna:vencimiento,omitempty"`
	Topic         _anon148           `xml:"tna:topic"`
	IdPaquete     string             `xml:"tna:idPaquete,omitempty"`
	IdComponente  string             `xml:"tna:idComponente,omitempty"`
	Linking       ListaDePropiedades `xml:"tns:linking,omitempty"`
	Cuando        string             `xml:"tna:cuando,omitempty"`
	Referencia    string             `xml:"tna:referencia,omitempty"`
	IdglaCliente  string             `xml:"tna:idglaCliente,omitempty"`
	IdglaContrato string             `xml:"tna:idglaContrato,omitempty"`
}

func (t *ComponenteRecibido) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ComponenteRecibido
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ComponenteRecibido) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ComponenteRecibido
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type ConformacionDiferida struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon183      `xml:"tns:topic"`
}

func (t *ConformacionDiferida) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConformacionDiferida
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ConformacionDiferida) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConformacionDiferida
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ConformacionEntregado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon184      `xml:"tns:topic"`
}

func (t *ConformacionEntregado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConformacionEntregado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ConformacionEntregado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConformacionEntregado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ConformacionObservada struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon185      `xml:"tns:topic"`
}

func (t *ConformacionObservada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConformacionObservada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ConformacionObservada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConformacionObservada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ConstanciaDeEntregaDigitalizadaDisponible struct {
	XMLNs                   string                        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp               time.Time                     `xml:"tna:timestamp"`
	Remitente               string                        `xml:"tna:remitente"`
	Destinatario            string                        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden           string                        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento             time.Time                     `xml:"tna:vencimiento,omitempty"`
	NumeroDeEnvio           string                        `xml:"tna:numeroDeEnvio,omitempty"`
	CodigoDeContratoInterno string                        `xml:"tna:codigoDeContratoInterno,omitempty"`
	Linking                 ListaDePropiedades            `xml:"tns:linking,omitempty"`
	Documentos              ListaDePropiedadesAdicionales `xml:"tns:documentos,omitempty"`
	Topic                   _anon139                      `xml:"tna:topic"`
}

func (t *ConstanciaDeEntregaDigitalizadaDisponible) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConstanciaDeEntregaDigitalizadaDisponible
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Documentos.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ConstanciaDeEntregaDigitalizadaDisponible) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConstanciaDeEntregaDigitalizadaDisponible
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type ConstanciaDeHojaDeRutaGenerada struct {
	XMLNs              string                        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time                     `xml:"tna:timestamp"`
	Remitente          string                        `xml:"tna:remitente"`
	Destinatario       string                        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string                        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time                     `xml:"tna:vencimiento,omitempty"`
	Topic              _anon154                      `xml:"tna:topic"`
	Linking            ListaDePropiedades            `xml:"tns:linking,omitempty"`
	NumeroDeEnvio      string                        `xml:"tna:numeroDeEnvio,omitempty"`
	NumeroDeHojaDeRuta string                        `xml:"tna:numeroDeHojaDeRuta,omitempty"`
	Documentos         ListaDePropiedadesAdicionales `xml:"tns:documentos,omitempty"`
}

func (t *ConstanciaDeHojaDeRutaGenerada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConstanciaDeHojaDeRutaGenerada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Documentos.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ConstanciaDeHojaDeRutaGenerada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConstanciaDeHojaDeRutaGenerada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type ConstanciaElectronicaGenerada struct {
	XMLNs                   string                        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp               time.Time                     `xml:"tna:timestamp"`
	Remitente               string                        `xml:"tna:remitente"`
	Destinatario            string                        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden           string                        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento             time.Time                     `xml:"tna:vencimiento,omitempty"`
	NumeroDeEnvio           string                        `xml:"tna:numeroDeEnvio,omitempty"`
	CodigoDeContratoInterno string                        `xml:"tna:codigoDeContratoInterno,omitempty"`
	MotivoFinal             string                        `xml:"tna:motivoFinal,omitempty"`
	Url                     string                        `xml:"tna:url,omitempty"`
	MimeType                string                        `xml:"tna:mimeType,omitempty"`
	EventoQueLaGenero       string                        `xml:"tna:eventoQueLaGenero,omitempty"`
	Linking                 ListaDePropiedades            `xml:"tns:linking,omitempty"`
	Documentos              ListaDePropiedadesAdicionales `xml:"tns:documentos,omitempty"`
	Topic                   _anon135                      `xml:"tna:topic"`
}

func (t *ConstanciaElectronicaGenerada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConstanciaElectronicaGenerada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Documentos.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ConstanciaElectronicaGenerada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConstanciaElectronicaGenerada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type ConstanciaEnPdfGenerada struct {
	XMLNs                   string                        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp               time.Time                     `xml:"tna:timestamp"`
	Remitente               string                        `xml:"tna:remitente"`
	Destinatario            string                        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden           string                        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento             time.Time                     `xml:"tna:vencimiento,omitempty"`
	NumeroDeEnvio           string                        `xml:"tna:numeroDeEnvio,omitempty"`
	CodigoDeContratoInterno string                        `xml:"tna:codigoDeContratoInterno,omitempty"`
	MotivoFinal             string                        `xml:"tna:motivoFinal,omitempty"`
	EventoQueLaGenero       string                        `xml:"tna:eventoQueLaGenero,omitempty"`
	Linking                 ListaDePropiedades            `xml:"tns:linking,omitempty"`
	Documentos              ListaDePropiedadesAdicionales `xml:"tns:documentos,omitempty"`
	Topic                   _anon136                      `xml:"tna:topic"`
}

func (t *ConstanciaEnPdfGenerada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ConstanciaEnPdfGenerada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Documentos.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ConstanciaEnPdfGenerada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ConstanciaEnPdfGenerada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type ContenidoRotoEnEmpaqueSano struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon186      `xml:"tns:topic"`
}

func (t *ContenidoRotoEnEmpaqueSano) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ContenidoRotoEnEmpaqueSano
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ContenidoRotoEnEmpaqueSano) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ContenidoRotoEnEmpaqueSano
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ContingenciaEnSistemas struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon187      `xml:"tns:topic"`
}

func (t *ContingenciaEnSistemas) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ContingenciaEnSistemas
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ContingenciaEnSistemas) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ContingenciaEnSistemas
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ContingenciaSanitaria struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon345  `xml:"tns:topic"`
}

func (t *ContingenciaSanitaria) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ContingenciaSanitaria
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *ContingenciaSanitaria) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ContingenciaSanitaria
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type Contrato struct {
	XMLNs                   string `xml:"xmlns:tns,attr,omitempty"`
	CodigoDeContratoInterno string `xml:"tns:codigoDeContratoInterno"`
	Descripcion             string `xml:"tns:descripcion,omitempty"`
	EstaActivo              bool   `xml:"tns:estaActivo,omitempty"`
	TipoDeServicio          string `xml:"tns:tipoDeServicio,omitempty"`
	CodigoDeDireccion       string `xml:"tns:codigoDeDireccion,omitempty"`
	CodigoDeClienteInterno  string `xml:"tns:codigoDeClienteInterno"`
	VigenciaDesde           string `xml:"tns:vigenciaDesde,omitempty"`
	VigenciaHasta           string `xml:"tns:vigenciaHasta,omitempty"`
}

func (t *Contrato) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Contrato
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *Contrato) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Contrato
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ContratoActualizado struct {
	XMLNs         string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time `xml:"tna:timestamp"`
	Remitente     string    `xml:"tna:remitente"`
	Destinatario  string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time `xml:"tna:vencimiento,omitempty"`
	Contrato      Contrato  `xml:"tns:contrato"`
	Topic         _anon56   `xml:"tna:topic"`
}

func (t *ContratoActualizado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ContratoActualizado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Contrato.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ContratoActualizado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ContratoActualizado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type CoordinarTurnoDeEntrega struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon351  `xml:"tns:topic"`
}

func (t *CoordinarTurnoDeEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T CoordinarTurnoDeEntrega
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *CoordinarTurnoDeEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T CoordinarTurnoDeEntrega
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

// Must be at least 1 items long
type Cuit string

type DatosDeDistribuidorActualizados struct {
	XMLNs         string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time          `xml:"tna:timestamp"`
	Remitente     string             `xml:"tna:remitente"`
	Destinatario  string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time          `xml:"tna:vencimiento,omitempty"`
	Distribuidor  DatosDistribuidor  `xml:"tns:distribuidor,omitempty"`
	Linking       ListaDePropiedades `xml:"tns:linking,omitempty"`
	Topic         _anon95            `xml:"tna:topic"`
}

func (t *DatosDeDistribuidorActualizados) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DatosDeDistribuidorActualizados
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Distribuidor.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *DatosDeDistribuidorActualizados) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DatosDeDistribuidorActualizados
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DatosDistribuidor struct {
	XMLNs                string           `xml:"xmlns:tns,attr,omitempty"`
	NumeroDeDocumento    string           `xml:"tns:numeroDeDocumento,omitempty"`
	NombreCompleto       string           `xml:"tns:nombreCompleto,omitempty"`
	IdInternoDelCliente  string           `xml:"tns:idInternoDelCliente,omitempty"`
	EMail                string           `xml:"tns:eMail,omitempty"`
	Telefonos            ListaDeTelefonos `xml:"tns:telefonos,omitempty"`
	Agrupador            string           `xml:"tns:agrupador,omitempty"`
	TipoDeDocumento      _anon2           `xml:"tns:tipoDeDocumento,omitempty"`
	MedioDeLocomocion    string           `xml:"tns:medioDeLocomocion,omitempty"`
	TipoDeDistribuidor   string           `xml:"tns:tipoDeDistribuidor,omitempty"`
	Legajo               string           `xml:"tns:legajo,omitempty"`
	SucursalDondeTrabaja DatosSucursal    `xml:"tns:sucursalDondeTrabaja,omitempty"`
	EsEventual           bool             `xml:"tns:esEventual,omitempty"`
	Login                string           `xml:"tns:login,omitempty"`
	Idgla                string           `xml:"tns:idgla,omitempty"`
	Cuit                 string           `xml:"tns:cuit,omitempty"`
}

func (t *DatosDistribuidor) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DatosDistribuidor
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DatosDistribuidor) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DatosDistribuidor
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type DatosPersonales struct {
	XMLNs               string           `xml:"xmlns:tns,attr,omitempty"`
	NumeroDeDocumento   string           `xml:"tns:numeroDeDocumento,omitempty"`
	NombreCompleto      string           `xml:"tns:nombreCompleto,omitempty"`
	IdInternoDelCliente string           `xml:"tns:idInternoDelCliente,omitempty"`
	EMail               string           `xml:"tns:eMail,omitempty"`
	Telefonos           ListaDeTelefonos `xml:"tns:telefonos,omitempty"`
	Agrupador           string           `xml:"tns:agrupador,omitempty"`
	TipoDeDocumento     _anon2           `xml:"tns:tipoDeDocumento,omitempty"`
}

func (t *DatosPersonales) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DatosPersonales
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DatosPersonales) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DatosPersonales
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type DatosSucursal struct {
	XMLNs  string `xml:"xmlns:tns,attr,omitempty"`
	Codigo string `xml:"tns:codigo,omitempty"`
	Nombre string `xml:"tns:nombre,omitempty"`
	Id     string `xml:"tns:id,omitempty"`
}

func (t *DatosSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DatosSucursal
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DatosSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DatosSucursal
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

// Must be at least 1 items long
type DepartamentoDeVentas string

type DestinatarioCreado struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	IdCliente      string    `xml:"tns:idCliente,omitempty"`
	IdDestinatario string    `xml:"tns:idDestinatario"`
	Location       string    `xml:"tns:location,omitempty"`
	Topic          _anon19   `xml:"tns:topic"`
}

func (t *DestinatarioCreado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioCreado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.IdCliente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdDestinatario.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Location.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioCreado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioCreado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioDeViaje struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon323  `xml:"tns:topic"`
}

func (t *DestinatarioDeViaje) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioDeViaje
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioDeViaje) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioDeViaje
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioDesconocido struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon325  `xml:"tns:topic"`
}

func (t *DestinatarioDesconocido) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioDesconocido
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioDesconocido) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioDesconocido
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioEliminado struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	IdCliente      string    `xml:"tns:idCliente,omitempty"`
	IdDestinatario string    `xml:"tns:idDestinatario"`
	Topic          _anon21   `xml:"tns:topic"`
}

func (t *DestinatarioEliminado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioEliminado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.IdCliente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdDestinatario.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioEliminado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioEliminado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioEnfermoFallecido struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon333  `xml:"tns:topic"`
}

func (t *DestinatarioEnfermoFallecido) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioEnfermoFallecido
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioEnfermoFallecido) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioEnfermoFallecido
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioInformaDesconocerEntrega struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon338  `xml:"tns:topic"`
}

func (t *DestinatarioInformaDesconocerEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioInformaDesconocerEntrega
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioInformaDesconocerEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioInformaDesconocerEntrega
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioInformaEnvioDuplicado struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon322  `xml:"tns:topic"`
}

func (t *DestinatarioInformaEnvioDuplicado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioInformaEnvioDuplicado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioInformaEnvioDuplicado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioInformaEnvioDuplicado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioInformaNoEsCantidadSolicitada struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon336  `xml:"tns:topic"`
}

func (t *DestinatarioInformaNoEsCantidadSolicitada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioInformaNoEsCantidadSolicitada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioInformaNoEsCantidadSolicitada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioInformaNoEsCantidadSolicitada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioInformaNoEsProductoSolicitado struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon337  `xml:"tns:topic"`
}

func (t *DestinatarioInformaNoEsProductoSolicitado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioInformaNoEsProductoSolicitado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioInformaNoEsProductoSolicitado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioInformaNoEsProductoSolicitado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioModificado struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	IdCliente      string    `xml:"tns:idCliente,omitempty"`
	IdDestinatario string    `xml:"tns:idDestinatario"`
	Location       string    `xml:"tns:location,omitempty"`
	Topic          _anon20   `xml:"tns:topic"`
}

func (t *DestinatarioModificado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioModificado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.IdCliente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdDestinatario.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Location.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioModificado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioModificado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioNoCumpleCondicionesPactadas struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon334  `xml:"tns:topic"`
}

func (t *DestinatarioNoCumpleCondicionesPactadas) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioNoCumpleCondicionesPactadas
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioNoCumpleCondicionesPactadas) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioNoCumpleCondicionesPactadas
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioNoCumpleRequisitos struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon335  `xml:"tns:topic"`
}

func (t *DestinatarioNoCumpleRequisitos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioNoCumpleRequisitos
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioNoCumpleRequisitos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioNoCumpleRequisitos
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioNoDisponeDePagoFlete struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon339  `xml:"tns:topic"`
}

func (t *DestinatarioNoDisponeDePagoFlete) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioNoDisponeDePagoFlete
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioNoDisponeDePagoFlete) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioNoDisponeDePagoFlete
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioRechazaEntrega struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon326  `xml:"tns:topic"`
}

func (t *DestinatarioRechazaEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioRechazaEntrega
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioRechazaEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioRechazaEntrega
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioSeMudo struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon328  `xml:"tns:topic"`
}

func (t *DestinatarioSeMudo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioSeMudo
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioSeMudo) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioSeMudo
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioSinChequesPreparados struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon332  `xml:"tns:topic"`
}

func (t *DestinatarioSinChequesPreparados) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioSinChequesPreparados
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioSinChequesPreparados) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioSinChequesPreparados
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioSolicitaCambiarDomicilio struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon324  `xml:"tns:topic"`
}

func (t *DestinatarioSolicitaCambiarDomicilio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioSolicitaCambiarDomicilio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioSolicitaCambiarDomicilio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioSolicitaCambiarDomicilio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioSolicitaRepactarEntrega struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon329  `xml:"tns:topic"`
}

func (t *DestinatarioSolicitaRepactarEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioSolicitaRepactarEntrega
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioSolicitaRepactarEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioSolicitaRepactarEntrega
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinatarioSolicitaRetirarEnSucursal struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon327  `xml:"tns:topic"`
}

func (t *DestinatarioSolicitaRetirarEnSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinatarioSolicitaRetirarEnSucursal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinatarioSolicitaRetirarEnSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinatarioSolicitaRetirarEnSucursal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type DestinoEnZonaDeRiesgo struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon320  `xml:"tns:topic"`
}

func (t *DestinoEnZonaDeRiesgo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DestinoEnZonaDeRiesgo
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *DestinoEnZonaDeRiesgo) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DestinoEnZonaDeRiesgo
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type Destruccion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon33       `xml:"tna:topic"`
}

func (t *Destruccion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Destruccion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *Destruccion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Destruccion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type DetallaDelCobro struct {
	XMLNs        string       `xml:"xmlns:tns,attr,omitempty"`
	FormaDeCobro FormaDeCobro `xml:"tns:formaDeCobro"`
	Importe      float64      `xml:"tns:importe"`
}

func (t *DetallaDelCobro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DetallaDelCobro
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DetallaDelCobro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DetallaDelCobro
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type DetalleConceptoTarifado struct {
	XMLNs                 string  `xml:"xmlns:tns,attr,omitempty"`
	Cantidad              int     `xml:"tns:cantidad"`
	CodigoConcepto        string  `xml:"tns:codigoConcepto"`
	DescuentoImporte      float64 `xml:"tns:descuentoImporte,omitempty"`
	ImportePorcentaje     float64 `xml:"tns:importePorcentaje,omitempty"`
	Tarifa                float64 `xml:"tns:tarifa"`
	TotalConceptoTarifado float32 `xml:"tns:totalConceptoTarifado"`
}

func (t *DetalleConceptoTarifado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DetalleConceptoTarifado
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DetalleConceptoTarifado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DetalleConceptoTarifado
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type DetalleDeAbono struct {
	XMLNs                   string                  `xml:"xmlns:tns,attr,omitempty"`
	CodigoDeContratoInterno string                  `xml:"tns:codigoDeContratoInterno"`
	PeriodoAbonado          string                  `xml:"tns:periodoAbonado"`
	Origen                  LugarDeRetiroEntrega    `xml:"tns:origen,omitempty"`
	Destino                 LugarDeRetiroEntrega    `xml:"tns:destino,omitempty"`
	SucursalOrigen          LugarDeRetiroEntrega    `xml:"tns:sucursalOrigen,omitempty"`
	SucursalDestino         LugarDeRetiroEntrega    `xml:"tns:sucursalDestino,omitempty"`
	ConceptoTarifado        DetalleConceptoTarifado `xml:"tns:conceptoTarifado,omitempty"`
}

func (t *DetalleDeAbono) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DetalleDeAbono
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DetalleDeAbono) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DetalleDeAbono
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type DetalleDeEnvio struct {
	XMLNs                         string                 `xml:"xmlns:tns,attr,omitempty"`
	FechaDeRecibo                 string                 `xml:"tns:fechaDeRecibo,omitempty"`
	InformaTarifa                 bool                   `xml:"tns:informaTarifa"`
	Lote                          string                 `xml:"tns:lote,omitempty"`
	NumeroDeEnvio                 string                 `xml:"tns:numeroDeEnvio"`
	NumeroDeRecibo                string                 `xml:"tns:numeroDeRecibo,omitempty"`
	NumeroInformeDeRendicion      string                 `xml:"tns:numeroInformeDeRendicion,omitempty"`
	Peso                          float32                `xml:"tns:peso,omitempty"`
	PesoAforado                   float32                `xml:"tns:pesoAforado,omitempty"`
	ValorDeclarado                float32                `xml:"tns:valorDeclarado,omitempty"`
	ValorACobrar                  float32                `xml:"tns:valorACobrar,omitempty"`
	Volumen                       float32                `xml:"tns:volumen,omitempty"`
	Destino                       LugarDeRetiroEntrega   `xml:"tns:destino"`
	SucursalOrigen                LugarDeRetiroEntrega   `xml:"tns:sucursalOrigen,omitempty"`
	Origen                        LugarDeRetiroEntrega   `xml:"tns:origen,omitempty"`
	SucursalDestino               LugarDeRetiroEntrega   `xml:"tns:sucursalDestino,omitempty"`
	CategoriaDeFacturacion        string                 `xml:"tns:categoriaDeFacturacion,omitempty"`
	CentroDeCostosDelCliente      string                 `xml:"tns:centroDeCostosDelCliente,omitempty"`
	Estado                        string                 `xml:"tns:estado"`
	CodigoDeContratoInterno       string                 `xml:"tns:codigoDeContratoInterno"`
	FechaInformeDeRendicion       string                 `xml:"tns:fechaInformeDeRendicion,omitempty"`
	FechaAltaEnvio                string                 `xml:"tns:fechaAltaEnvio,omitempty"`
	OrdenDeCompraCliente          string                 `xml:"tns:ordenDeCompraCliente,omitempty"`
	Tarifa                        float64                `xml:"tns:tarifa,omitempty"`
	Componentes                   ListaDeDatosPersonales `xml:"tns:componentes"`
	Destinatario                  DatosPersonales        `xml:"tns:destinatario,omitempty"`
	CantidadDeBultos              int                    `xml:"tns:cantidadDeBultos,omitempty"`
	FechaProbableDeEntrega        string                 `xml:"tns:fechaProbableDeEntrega,omitempty"`
	Observaciones                 string                 `xml:"tns:observaciones,omitempty"`
	Remitente                     DatosPersonales        `xml:"tns:remitente,omitempty"`
	NumeroDeRemito                string                 `xml:"tns:numeroDeRemito,omitempty"`
	NumeroDeSeguimientoDelCliente string                 `xml:"tns:numeroDeSeguimientoDelCliente,omitempty"`
	DatosAdicionales              ListaDePropiedades     `xml:"tns:datosAdicionales,omitempty"`
	FechaPactadaDeEntrega         string                 `xml:"tns:fechaPactadaDeEntrega,omitempty"`
	AltoEnCm                      float64                `xml:"tns:altoEnCm,omitempty"`
	AnchoEnCm                     float64                `xml:"tns:anchoEnCm,omitempty"`
	LargoEnCm                     float64                `xml:"tns:largoEnCm,omitempty"`
}

func (t *DetalleDeEnvio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DetalleDeEnvio
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DetalleDeEnvio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DetalleDeEnvio
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type DetalleDeEnvioInterno struct {
	XMLNs               string               `xml:"xmlns:tns,attr,omitempty"`
	CodigoDeEnvio       string               `xml:"tns:codigoDeEnvio,omitempty"`
	FechaDeAlta         string               `xml:"tns:fechaDeAlta,omitempty"`
	Destino             LugarDeRetiroEntrega `xml:"tns:destino,omitempty"`
	SucursalDestino     LugarDeRetiroEntrega `xml:"tns:sucursalDestino,omitempty"`
	SucursalOrigen      LugarDeRetiroEntrega `xml:"tns:sucursalOrigen,omitempty"`
	Estado              string               `xml:"tns:estado,omitempty"`
	Contenido           ListaDeObjetos       `xml:"tns:contenido,omitempty"`
	CicloDelEnvio       string               `xml:"tns:cicloDelEnvio,omitempty"`
	EstadoDeLaRendicion string               `xml:"tns:estadoDeLaRendicion,omitempty"`
}

func (t *DetalleDeEnvioInterno) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DetalleDeEnvioInterno
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DetalleDeEnvioInterno) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DetalleDeEnvioInterno
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type DetalleDeEnvioTarifado struct {
	XMLNs                         string                    `xml:"xmlns:tns,attr,omitempty"`
	FechaDeRecibo                 string                    `xml:"tns:fechaDeRecibo,omitempty"`
	InformaTarifa                 bool                      `xml:"tns:informaTarifa"`
	Lote                          string                    `xml:"tns:lote,omitempty"`
	NumeroDeEnvio                 string                    `xml:"tns:numeroDeEnvio"`
	NumeroDeRecibo                string                    `xml:"tns:numeroDeRecibo,omitempty"`
	NumeroInformeDeRendicion      string                    `xml:"tns:numeroInformeDeRendicion,omitempty"`
	Peso                          float32                   `xml:"tns:peso,omitempty"`
	PesoAforado                   float32                   `xml:"tns:pesoAforado,omitempty"`
	ValorDeclarado                float32                   `xml:"tns:valorDeclarado,omitempty"`
	ValorACobrar                  float32                   `xml:"tns:valorACobrar,omitempty"`
	Volumen                       float32                   `xml:"tns:volumen,omitempty"`
	Destino                       LugarDeRetiroEntrega      `xml:"tns:destino"`
	SucursalOrigen                LugarDeRetiroEntrega      `xml:"tns:sucursalOrigen,omitempty"`
	Origen                        LugarDeRetiroEntrega      `xml:"tns:origen,omitempty"`
	SucursalDestino               LugarDeRetiroEntrega      `xml:"tns:sucursalDestino,omitempty"`
	CategoriaDeFacturacion        string                    `xml:"tns:categoriaDeFacturacion,omitempty"`
	CentroDeCostosDelCliente      string                    `xml:"tns:centroDeCostosDelCliente,omitempty"`
	Estado                        string                    `xml:"tns:estado"`
	CodigoDeContratoInterno       string                    `xml:"tns:codigoDeContratoInterno"`
	FechaInformeDeRendicion       string                    `xml:"tns:fechaInformeDeRendicion,omitempty"`
	FechaAltaEnvio                string                    `xml:"tns:fechaAltaEnvio,omitempty"`
	OrdenDeCompraCliente          string                    `xml:"tns:ordenDeCompraCliente,omitempty"`
	Tarifa                        float64                   `xml:"tns:tarifa,omitempty"`
	Componentes                   ListaDeDatosPersonales    `xml:"tns:componentes"`
	Destinatario                  DatosPersonales           `xml:"tns:destinatario,omitempty"`
	CantidadDeBultos              int                       `xml:"tns:cantidadDeBultos,omitempty"`
	FechaProbableDeEntrega        string                    `xml:"tns:fechaProbableDeEntrega,omitempty"`
	Observaciones                 string                    `xml:"tns:observaciones,omitempty"`
	Remitente                     DatosPersonales           `xml:"tns:remitente,omitempty"`
	NumeroDeRemito                string                    `xml:"tns:numeroDeRemito,omitempty"`
	NumeroDeSeguimientoDelCliente string                    `xml:"tns:numeroDeSeguimientoDelCliente,omitempty"`
	DatosAdicionales              ListaDePropiedades        `xml:"tns:datosAdicionales,omitempty"`
	FechaPactadaDeEntrega         string                    `xml:"tns:fechaPactadaDeEntrega,omitempty"`
	AltoEnCm                      float64                   `xml:"tns:altoEnCm,omitempty"`
	AnchoEnCm                     float64                   `xml:"tns:anchoEnCm,omitempty"`
	LargoEnCm                     float64                   `xml:"tns:largoEnCm,omitempty"`
	ConceptosTarifados            ListaDeConceptosTarifados `xml:"tns:conceptosTarifados"`
}

func (t *DetalleDeEnvioTarifado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DetalleDeEnvioTarifado
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DetalleDeEnvioTarifado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DetalleDeEnvioTarifado
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type DetalleDeOrdenDeEnvio struct {
	XMLNs                    string                `xml:"xmlns:tns,attr,omitempty"`
	NumeroDeEnvio            string                `xml:"tns:numeroDeEnvio"`
	RemitenteInformado       DatosPersonales       `xml:"tns:remitenteInformado,omitempty"`
	DestinatarioInformado    DatosPersonales       `xml:"tns:destinatarioInformado"`
	DestinatarioAlternativo  DatosPersonales       `xml:"tns:destinatarioAlternativo,omitempty"`
	DestinoInformado         LugarDeRetiroOEntrega `xml:"tns:destinoInformado"`
	OrigenInformado          LugarDeRetiroOEntrega `xml:"tns:origenInformado,omitempty"`
	CodigoDeContratoInterno  string                `xml:"tns:codigoDeContratoInterno"`
	TipoDeServicio           string                `xml:"tns:tipoDeServicio,omitempty"`
	NumeroDeRemito           string                `xml:"tns:numeroDeRemito,omitempty"`
	RemitosComplementarios   ListaDeObjetos        `xml:"tns:remitosComplementarios,omitempty"`
	CentroDeCostosDelCliente string                `xml:"tns:centroDeCostosDelCliente,omitempty"`
	CategoriaDeProducto      string                `xml:"tns:categoriaDeProducto,omitempty"`
	CategoriaDeFacturacion   string                `xml:"tns:categoriaDeFacturacion,omitempty"`
	ValorACobrar             float32               `xml:"tns:valorACobrar,omitempty"`
	FechaPactadaDeEntrega    FechaPactada          `xml:"tns:fechaPactadaDeEntrega,omitempty"`
	ProductoAEntregar        string                `xml:"tns:productoAEntregar,omitempty"`
	ProductoARetirar         string                `xml:"tns:productoARetirar,omitempty"`
	PagoDestino              PagoDestino           `xml:"tns:pagoDestino,omitempty"`
	SucursalDeDistribucion   DatosSucursal         `xml:"tns:sucursalDeDistribucion,omitempty"`
	SucursalCliente          string                `xml:"tns:sucursalCliente,omitempty"`
	ListaDePaquetes          ListaDePaquetes       `xml:"tns:listaDePaquetes,omitempty"`
}

func (t *DetalleDeOrdenDeEnvio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DetalleDeOrdenDeEnvio
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DetalleDeOrdenDeEnvio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DetalleDeOrdenDeEnvio
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type DetalleDePaquete struct {
	XMLNs                     string             `xml:"xmlns:tns,attr,omitempty"`
	PesoEnKg                  float32            `xml:"tns:pesoEnKg,omitempty"`
	AltoEnCm                  float32            `xml:"tns:altoEnCm,omitempty"`
	AnchoEnCm                 float32            `xml:"tns:anchoEnCm,omitempty"`
	LargoEnCm                 float32            `xml:"tns:largoEnCm,omitempty"`
	Descripcion               string             `xml:"tns:descripcion,omitempty"`
	ReferenciasDelCliente     ListaDePropiedades `xml:"tns:referenciasDelCliente,omitempty"`
	VolumenEnCm3              float32            `xml:"tns:volumenEnCm3,omitempty"`
	ValorDeclaradoSinImpuesto float32            `xml:"tns:valorDeclaradoSinImpuesto,omitempty"`
	ValorDeclaradoConImpuesto float32            `xml:"tns:valorDeclaradoConImpuesto,omitempty"`
}

func (t *DetalleDePaquete) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DetalleDePaquete
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DetalleDePaquete) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DetalleDePaquete
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type DetalleLiquidacionFacturada struct {
	XMLNs               string `xml:"xmlns:tns,attr,omitempty"`
	CentroEmisor        string `xml:"tns:centroEmisor,omitempty"`
	CodigoDeTransaccion string `xml:"tns:codigoDeTransaccion,omitempty"`
	ComprobanteLegal    string `xml:"tns:comprobanteLegal"`
	FechaDeComprobante  string `xml:"tns:fechaDeComprobante"`
	NumeroDeComprobante string `xml:"tns:numeroDeComprobante"`
	NumeroDePrefactura  int    `xml:"tns:numeroDePrefactura"`
	TipoDeTransaccion   string `xml:"tns:tipoDeTransaccion,omitempty"`
}

func (t *DetalleLiquidacionFacturada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DetalleLiquidacionFacturada
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DetalleLiquidacionFacturada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DetalleLiquidacionFacturada
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type DetalleLiquidacionNoFacturada struct {
	XMLNs               string `xml:"xmlns:tns,attr,omitempty"`
	CentroEmisor        string `xml:"tns:centroEmisor,omitempty"`
	CodigoDeTransaccion string `xml:"tns:codigoDeTransaccion,omitempty"`
	ComprobanteLegal    string `xml:"tns:comprobanteLegal"`
	FechaDeComprobante  string `xml:"tns:fechaDeComprobante"`
	NumeroDeComprobante string `xml:"tns:numeroDeComprobante"`
	NumeroDePrefactura  int    `xml:"tns:numeroDePrefactura"`
	TipoDeTransaccion   string `xml:"tns:tipoDeTransaccion,omitempty"`
	Razon               Razon  `xml:"tns:razon"`
}

func (t *DetalleLiquidacionNoFacturada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DetalleLiquidacionNoFacturada
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *DetalleLiquidacionNoFacturada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DetalleLiquidacionNoFacturada
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type DevolucionEntregadaSinDocumentacion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon188      `xml:"tns:topic"`
}

func (t *DevolucionEntregadaSinDocumentacion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DevolucionEntregadaSinDocumentacion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *DevolucionEntregadaSinDocumentacion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DevolucionEntregadaSinDocumentacion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type DevolucionEnvioPlazoVencido struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon196      `xml:"tns:topic"`
}

func (t *DevolucionEnvioPlazoVencido) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DevolucionEnvioPlazoVencido
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *DevolucionEnvioPlazoVencido) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DevolucionEnvioPlazoVencido
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type DevolucionEnvioRecibidaPlazaInterior struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon189      `xml:"tns:topic"`
}

func (t *DevolucionEnvioRecibidaPlazaInterior) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DevolucionEnvioRecibidaPlazaInterior
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *DevolucionEnvioRecibidaPlazaInterior) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DevolucionEnvioRecibidaPlazaInterior
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type DevolucionParcialCortoVto struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon190      `xml:"tns:topic"`
}

func (t *DevolucionParcialCortoVto) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DevolucionParcialCortoVto
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *DevolucionParcialCortoVto) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DevolucionParcialCortoVto
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type DevolverEnvioAOrigen struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon349  `xml:"tns:topic"`
}

func (t *DevolverEnvioAOrigen) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DevolverEnvioAOrigen
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *DevolverEnvioAOrigen) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DevolverEnvioAOrigen
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type Digitalizacion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon34       `xml:"tna:topic"`
}

func (t *Digitalizacion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Digitalizacion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *Digitalizacion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Digitalizacion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type Direccion struct {
	XMLNs                  string             `xml:"xmlns:tns,attr,omitempty"`
	AbreviaturaProvincia   string             `xml:"tns:abreviaturaProvincia,omitempty"`
	Calle                  Calle              `xml:"tns:calle,omitempty"`
	CodigoDeDireccion      _anon1             `xml:"tns:codigoDeDireccion,omitempty"`
	CodigoCiudad           string             `xml:"tns:codigoCiudad,omitempty"`
	CodigoPostal           CodigoPostal       `xml:"tns:codigoPostal,omitempty"`
	NombreProvincia        string             `xml:"tns:nombreProvincia,omitempty"`
	Numero                 Numero             `xml:"tns:numero,omitempty"`
	Telefono               string             `xml:"tns:telefono,omitempty"`
	CodigoISOProvincia     string             `xml:"tns:codigoISOProvincia,omitempty"`
	CodigoISOPais          string             `xml:"tns:codigoISOPais,omitempty"`
	Localidad              string             `xml:"tns:localidad,omitempty"`
	ComponentesDeDireccion ListaDePropiedades `xml:"tns:componentesDeDireccion,omitempty"`
}

func (t *Direccion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Direccion
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *Direccion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Direccion
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type Distribucion struct {
	XMLNs                    string            `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time         `xml:"tna:timestamp"`
	Remitente                string            `xml:"tna:remitente"`
	Destinatario             string            `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string            `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time         `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura      `xml:"tna:quienFactura"`
	CodigoDeEnvio            string            `xml:"tna:codigoDeEnvio"`
	Nombre                   string            `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time         `xml:"tna:cuando"`
	CodigoDeContratoInterno  string            `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string            `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string            `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string            `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string            `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string            `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal     `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon67           `xml:"tna:topic"`
	Envio                    DetalleDeEnvio    `xml:"tns:envio,omitempty"`
	HojaDeRuta               string            `xml:"tna:hojaDeRuta"`
	Distribuidor             DatosDistribuidor `xml:"tns:distribuidor,omitempty"`
	DesdeDonde               DatosSucursal     `xml:"tns:desdeDonde,omitempty"`
}

func (t *Distribucion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Distribucion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Distribuidor.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.DesdeDonde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *Distribucion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Distribucion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type DocumentoAndreaniDigitalizadoDisponible struct {
	XMLNs                   string                        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp               time.Time                     `xml:"tna:timestamp"`
	Remitente               string                        `xml:"tna:remitente"`
	Destinatario            string                        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden           string                        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento             time.Time                     `xml:"tna:vencimiento,omitempty"`
	Numero                  string                        `xml:"tna:numero,omitempty"`
	CodigoDeContratoInterno string                        `xml:"tna:codigoDeContratoInterno,omitempty"`
	Linking                 ListaDePropiedades            `xml:"tns:linking,omitempty"`
	Documentos              ListaDePropiedadesAdicionales `xml:"tns:documentos,omitempty"`
	Topic                   _anon138                      `xml:"tna:topic"`
}

func (t *DocumentoAndreaniDigitalizadoDisponible) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T DocumentoAndreaniDigitalizadoDisponible
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Documentos.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *DocumentoAndreaniDigitalizadoDisponible) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T DocumentoAndreaniDigitalizadoDisponible
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

// Must be at least 1 items long
type EjecutivoDeCuentas string

type EliminarMarcaDeDestruccion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon134      `xml:"tna:topic"`
}

func (t *EliminarMarcaDeDestruccion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EliminarMarcaDeDestruccion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EliminarMarcaDeDestruccion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EliminarMarcaDeDestruccion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EliminarMarcaDeRescate struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon105      `xml:"tna:topic"`
}

func (t *EliminarMarcaDeRescate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EliminarMarcaDeRescate
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EliminarMarcaDeRescate) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EliminarMarcaDeRescate
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EntidadRetirada struct {
	XMLNs string  `xml:"xmlns:tns,attr,omitempty"`
	Peso  float64 `xml:"tns:peso,omitempty"`
	Id    string  `xml:"tns:id"`
	Tipo  string  `xml:"tns:tipo"`
}

func (t *EntidadRetirada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EntidadRetirada
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *EntidadRetirada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EntidadRetirada
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type EntregaEnSucursalSolicitada struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon36       `xml:"tna:topic"`
	Cantidad                 int           `xml:"tna:cantidad"`
}

func (t *EntregaEnSucursalSolicitada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EntregaEnSucursalSolicitada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EntregaEnSucursalSolicitada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EntregaEnSucursalSolicitada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EntregaPactadaEnReparto struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon191      `xml:"tns:topic"`
}

func (t *EntregaPactadaEnReparto) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EntregaPactadaEnReparto
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EntregaPactadaEnReparto) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EntregaPactadaEnReparto
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EntregarSinTurno struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon352  `xml:"tns:topic"`
}

func (t *EntregarSinTurno) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EntregarSinTurno
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *EntregarSinTurno) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EntregarSinTurno
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type EntregarYCobrarDiferido struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon360  `xml:"tns:topic"`
}

func (t *EntregarYCobrarDiferido) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EntregarYCobrarDiferido
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *EntregarYCobrarDiferido) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EntregarYCobrarDiferido
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type EnviarOrdenDeCompra struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon358  `xml:"tns:topic"`
}

func (t *EnviarOrdenDeCompra) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnviarOrdenDeCompra
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *EnviarOrdenDeCompra) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnviarOrdenDeCompra
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type EnvioActivacionPendienteEnCAC struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon192      `xml:"tns:topic"`
}

func (t *EnvioActivacionPendienteEnCAC) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioActivacionPendienteEnCAC
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioActivacionPendienteEnCAC) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioActivacionPendienteEnCAC
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioActualizado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon103      `xml:"tna:topic"`
}

func (t *EnvioActualizado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioActualizado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioActualizado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioActualizado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioAnulado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon74       `xml:"tna:topic"`
	QuienAnulo               string        `xml:"tna:quienAnulo,omitempty"`
}

func (t *EnvioAnulado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioAnulado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioAnulado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioAnulado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioAnuladoEnOrigen struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon193      `xml:"tns:topic"`
}

func (t *EnvioAnuladoEnOrigen) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioAnuladoEnOrigen
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioAnuladoEnOrigen) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioAnuladoEnOrigen
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioCompletoLiberado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon194      `xml:"tns:topic"`
}

func (t *EnvioCompletoLiberado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioCompletoLiberado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioCompletoLiberado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioCompletoLiberado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConContingenciaSanitaria struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon316      `xml:"tns:topic"`
}

func (t *EnvioConContingenciaSanitaria) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConContingenciaSanitaria
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConContingenciaSanitaria) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConContingenciaSanitaria
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConDocumentacionErronea struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon102      `xml:"tna:topic"`
	Motivo                   string        `xml:"tna:motivo,omitempty"`
	Submotivo                string        `xml:"tna:submotivo,omitempty"`
}

func (t *EnvioConDocumentacionErronea) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConDocumentacionErronea
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConDocumentacionErronea) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConDocumentacionErronea
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConDocumentacionFaltante struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon195      `xml:"tns:topic"`
}

func (t *EnvioConDocumentacionFaltante) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConDocumentacionFaltante
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConDocumentacionFaltante) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConDocumentacionFaltante
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConEntegaParcial struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon197      `xml:"tns:topic"`
}

func (t *EnvioConEntegaParcial) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConEntegaParcial
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConEntegaParcial) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConEntegaParcial
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConEntegaUrgente struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon198      `xml:"tns:topic"`
}

func (t *EnvioConEntegaUrgente) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConEntegaUrgente
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConEntegaUrgente) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConEntegaUrgente
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConEntregaObservada struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon199      `xml:"tns:topic"`
}

func (t *EnvioConEntregaObservada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConEntregaObservada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConEntregaObservada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConEntregaObservada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConErrorConformacion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon200      `xml:"tns:topic"`
}

func (t *EnvioConErrorConformacion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConErrorConformacion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConErrorConformacion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConErrorConformacion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConGestionActivacionCAC struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon201      `xml:"tns:topic"`
}

func (t *EnvioConGestionActivacionCAC) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConGestionActivacionCAC
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConGestionActivacionCAC) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConGestionActivacionCAC
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConGestionCACCliente struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon202      `xml:"tns:topic"`
}

func (t *EnvioConGestionCACCliente) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConGestionCACCliente
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConGestionCACCliente) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConGestionCACCliente
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConGestionCACOperacion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon203      `xml:"tns:topic"`
}

func (t *EnvioConGestionCACOperacion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConGestionCACOperacion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConGestionCACOperacion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConGestionCACOperacion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConGestionTelefonica struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon204      `xml:"tns:topic"`
}

func (t *EnvioConGestionTelefonica) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConGestionTelefonica
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConGestionTelefonica) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConGestionTelefonica
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConMercaderiaDecomisada struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon205      `xml:"tns:topic"`
}

func (t *EnvioConMercaderiaDecomisada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConMercaderiaDecomisada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConMercaderiaDecomisada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConMercaderiaDecomisada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConMercaderiaSecuetradaAduana struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon206      `xml:"tns:topic"`
}

func (t *EnvioConMercaderiaSecuetradaAduana) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConMercaderiaSecuetradaAduana
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConMercaderiaSecuetradaAduana) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConMercaderiaSecuetradaAduana
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConReconformacionDeDocumentacion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon207      `xml:"tns:topic"`
}

func (t *EnvioConReconformacionDeDocumentacion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConReconformacionDeDocumentacion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConReconformacionDeDocumentacion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConReconformacionDeDocumentacion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConSolicitudDeRetorno struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon208      `xml:"tns:topic"`
}

func (t *EnvioConSolicitudDeRetorno) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConSolicitudDeRetorno
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConSolicitudDeRetorno) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConSolicitudDeRetorno
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConTurnoConvenido struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon209      `xml:"tns:topic"`
}

func (t *EnvioConTurnoConvenido) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConTurnoConvenido
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConTurnoConvenido) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConTurnoConvenido
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioConsolidado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon80       `xml:"tna:topic"`
	CodigoDeContenedor       string        `xml:"tna:codigoDeContenedor"`
}

func (t *EnvioConsolidado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioConsolidado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioConsolidado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioConsolidado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioDeMuestraMedica struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon210      `xml:"tns:topic"`
}

func (t *EnvioDeMuestraMedica) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioDeMuestraMedica
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioDeMuestraMedica) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioDeMuestraMedica
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioDesactivadoAutomaticamente struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon92       `xml:"tna:topic"`
}

func (t *EnvioDesactivadoAutomaticamente) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioDesactivadoAutomaticamente
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioDesactivadoAutomaticamente) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioDesactivadoAutomaticamente
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioDespachado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon79       `xml:"tna:topic"`
	CodigoDeContenedor       string        `xml:"tna:codigoDeContenedor,omitempty"`
}

func (t *EnvioDespachado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioDespachado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioDespachado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioDespachado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioDevuelto struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon120      `xml:"tna:topic"`
	NuevoNumeroDeEnvio       string        `xml:"tna:nuevoNumeroDeEnvio,omitempty"`
}

func (t *EnvioDevuelto) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioDevuelto
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioDevuelto) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioDevuelto
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioDigitalizado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon100      `xml:"tna:topic"`
	UrlDocumento             string        `xml:"tna:urlDocumento,omitempty"`
	TipoDeDocumento          string        `xml:"tna:tipoDeDocumento,omitempty"`
	MimeType                 string        `xml:"tna:mimeType,omitempty"`
}

func (t *EnvioDigitalizado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioDigitalizado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioDigitalizado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioDigitalizado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioEnAreaDevoluciones struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon211      `xml:"tns:topic"`
}

func (t *EnvioEnAreaDevoluciones) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioEnAreaDevoluciones
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioEnAreaDevoluciones) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioEnAreaDevoluciones
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioEnCoordinacionEntregaCAC struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon212      `xml:"tns:topic"`
}

func (t *EnvioEnCoordinacionEntregaCAC) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioEnCoordinacionEntregaCAC
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioEnCoordinacionEntregaCAC) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioEnCoordinacionEntregaCAC
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioEnCoordinacionTelefonicaCAC struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon213      `xml:"tns:topic"`
}

func (t *EnvioEnCoordinacionTelefonicaCAC) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioEnCoordinacionTelefonicaCAC
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioEnCoordinacionTelefonicaCAC) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioEnCoordinacionTelefonicaCAC
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioEnInformeDeRendicion struct {
	XMLNs                      string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time     `xml:"tna:timestamp"`
	Remitente                  string        `xml:"tna:remitente"`
	Destinatario               string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura               QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio              string        `xml:"tna:codigoDeEnvio"`
	Nombre                     string        `xml:"tna:nombre,omitempty"`
	Cuando                     time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno    string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio             string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio              string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                   string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion        string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario                 string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento   DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	NumeroDeInformeDeRendicion string        `xml:"tna:numeroDeInformeDeRendicion"`
	Topic                      _anon83       `xml:"tna:topic"`
	Motivo                     string        `xml:"tna:motivo,omitempty"`
}

func (t *EnvioEnInformeDeRendicion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioEnInformeDeRendicion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioEnInformeDeRendicion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioEnInformeDeRendicion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioEnProcesoExpedicion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon214      `xml:"tns:topic"`
}

func (t *EnvioEnProcesoExpedicion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioEnProcesoExpedicion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioEnProcesoExpedicion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioEnProcesoExpedicion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioEnServicioDeCoordinacionDeEntrega struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon215      `xml:"tns:topic"`
}

func (t *EnvioEnServicioDeCoordinacionDeEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioEnServicioDeCoordinacionDeEntrega
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioEnServicioDeCoordinacionDeEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioEnServicioDeCoordinacionDeEntrega
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioEntregado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon35       `xml:"tna:topic"`
	TipoDeEntrega            TipoDeEntrega `xml:"tna:tipoDeEntrega"`
}

func (t *EnvioEntregado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioEntregado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioEntregado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioEntregado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioEntregadoPendienteConfirmarCAC struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon216      `xml:"tns:topic"`
}

func (t *EnvioEntregadoPendienteConfirmarCAC) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioEntregadoPendienteConfirmarCAC
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioEntregadoPendienteConfirmarCAC) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioEntregadoPendienteConfirmarCAC
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioEntregadoSePosdatadaGGCC struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon217      `xml:"tns:topic"`
}

func (t *EnvioEntregadoSePosdatadaGGCC) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioEntregadoSePosdatadaGGCC
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioEntregadoSePosdatadaGGCC) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioEntregadoSePosdatadaGGCC
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioFacturado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon114      `xml:"tna:topic"`
}

func (t *EnvioFacturado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioFacturado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioFacturado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioFacturado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioFacturadoSap struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon218      `xml:"tns:topic"`
}

func (t *EnvioFacturadoSap) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioFacturadoSap
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioFacturadoSap) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioFacturadoSap
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioFueraGrilla struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon219      `xml:"tns:topic"`
}

func (t *EnvioFueraGrilla) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioFueraGrilla
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioFueraGrilla) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioFueraGrilla
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioIngresaReacondicionamiento struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon220      `xml:"tns:topic"`
}

func (t *EnvioIngresaReacondicionamiento) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioIngresaReacondicionamiento
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioIngresaReacondicionamiento) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioIngresaReacondicionamiento
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioLiberado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon221      `xml:"tns:topic"`
}

func (t *EnvioLiberado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioLiberado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioLiberado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioLiberado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioNoEntregado struct {
	XMLNs                       string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                   time.Time     `xml:"tna:timestamp"`
	Remitente                   string        `xml:"tna:remitente"`
	Destinatario                string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden               string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                 time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura                QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio               string        `xml:"tna:codigoDeEnvio"`
	Nombre                      string        `xml:"tna:nombre,omitempty"`
	Cuando                      time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno     string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio              string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio               string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                    string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion         string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario                  string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento    DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                       _anon37       `xml:"tna:topic"`
	Motivo                      string        `xml:"tna:motivo,omitempty"`
	Submotivo                   string        `xml:"tna:submotivo,omitempty"`
	ReemplazadoPorNumeroDeEnvio string        `xml:"tna:reemplazadoPorNumeroDeEnvio,omitempty"`
}

func (t *EnvioNoEntregado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioNoEntregado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioNoEntregado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioNoEntregado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioNovedadEnRecepcion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon106      `xml:"tna:topic"`
}

func (t *EnvioNovedadEnRecepcion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioNovedadEnRecepcion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioNovedadEnRecepcion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioNovedadEnRecepcion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioNovedadEnRendicion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon118      `xml:"tna:topic,omitempty"`
}

func (t *EnvioNovedadEnRendicion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioNovedadEnRendicion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioNovedadEnRendicion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioNovedadEnRendicion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioNovedadEnReparto struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon112      `xml:"tna:topic"`
}

func (t *EnvioNovedadEnReparto) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioNovedadEnReparto
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioNovedadEnReparto) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioNovedadEnReparto
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioNovedadEnRetiro struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon113      `xml:"tna:topic"`
}

func (t *EnvioNovedadEnRetiro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioNovedadEnRetiro
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioNovedadEnRetiro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioNovedadEnRetiro
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioNovedadEnSucursalDestino struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon108      `xml:"tna:topic"`
}

func (t *EnvioNovedadEnSucursalDestino) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioNovedadEnSucursalDestino
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioNovedadEnSucursalDestino) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioNovedadEnSucursalDestino
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioNovedadEnTransito struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon107      `xml:"tna:topic"`
}

func (t *EnvioNovedadEnTransito) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioNovedadEnTransito
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioNovedadEnTransito) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioNovedadEnTransito
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioNovedadNoEntregado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon109      `xml:"tna:topic"`
}

func (t *EnvioNovedadNoEntregado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioNovedadNoEntregado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioNovedadNoEntregado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioNovedadNoEntregado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioNovedadPostEntrega struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon121      `xml:"tna:topic"`
}

func (t *EnvioNovedadPostEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioNovedadPostEntrega
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioNovedadPostEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioNovedadPostEntrega
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioPendienteDeDigitalizacion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon99       `xml:"tna:topic"`
}

func (t *EnvioPendienteDeDigitalizacion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioPendienteDeDigitalizacion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioPendienteDeDigitalizacion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioPendienteDeDigitalizacion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioPendienteDeValidacion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon98       `xml:"tna:topic"`
}

func (t *EnvioPendienteDeValidacion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioPendienteDeValidacion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioPendienteDeValidacion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioPendienteDeValidacion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioPosdatado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon222      `xml:"tns:topic"`
}

func (t *EnvioPosdatado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioPosdatado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioPosdatado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioPosdatado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioProcesadoEnSorter struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon223      `xml:"tns:topic"`
}

func (t *EnvioProcesadoEnSorter) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioProcesadoEnSorter
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioProcesadoEnSorter) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioProcesadoEnSorter
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioRecanalizado struct {
	XMLNs                       string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                   time.Time     `xml:"tna:timestamp"`
	Remitente                   string        `xml:"tna:remitente"`
	Destinatario                string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden               string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                 time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura                QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio               string        `xml:"tna:codigoDeEnvio"`
	Nombre                      string        `xml:"tna:nombre,omitempty"`
	Cuando                      time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno     string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio              string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio               string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                    string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion         string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario                  string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento    DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                       _anon91       `xml:"tna:topic"`
	NuevaSucursalDeDistribucion DatosSucursal `xml:"tns:nuevaSucursalDeDistribucion,omitempty"`
}

func (t *EnvioRecanalizado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioRecanalizado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.NuevaSucursalDeDistribucion.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioRecanalizado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioRecanalizado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioRecomendado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon224      `xml:"tns:topic"`
}

func (t *EnvioRecomendado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioRecomendado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioRecomendado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioRecomendado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioRemitenteSolicitaEstacionar struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon225      `xml:"tns:topic"`
}

func (t *EnvioRemitenteSolicitaEstacionar) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioRemitenteSolicitaEstacionar
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioRemitenteSolicitaEstacionar) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioRemitenteSolicitaEstacionar
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioRemitoRecibidoEnSucursal struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	QueSucursal              DatosSucursal `xml:"tns:queSucursal,omitempty"`
	Topic                    _anon119      `xml:"tna:topic"`
	NumeroDeRemito           string        `xml:"tna:numeroDeRemito,omitempty"`
}

func (t *EnvioRemitoRecibidoEnSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioRemitoRecibidoEnSucursal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.QueSucursal.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioRemitoRecibidoEnSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioRemitoRecibidoEnSucursal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioRendido struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon77       `xml:"tna:topic"`
}

func (t *EnvioRendido) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioRendido
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioRendido) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioRendido
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioReprogramadoPorFeriado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon226      `xml:"tns:topic"`
}

func (t *EnvioReprogramadoPorFeriado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioReprogramadoPorFeriado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioReprogramadoPorFeriado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioReprogramadoPorFeriado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioSaleReacondicionamiento struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon227      `xml:"tns:topic"`
}

func (t *EnvioSaleReacondicionamiento) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioSaleReacondicionamiento
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioSaleReacondicionamiento) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioSaleReacondicionamiento
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioSeModificanDatos struct {
	XMLNs         string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time      `xml:"tna:timestamp"`
	Remitente     string         `xml:"tna:remitente"`
	Destinatario  string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time      `xml:"tna:vencimiento,omitempty"`
	Envio         DetalleDeEnvio `xml:"tns:envio"`
	Topic         _anon115       `xml:"tna:topic"`
}

func (t *EnvioSeModificanDatos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioSeModificanDatos
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioSeModificanDatos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioSeModificanDatos
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type EnvioSeRedirecciona struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon116      `xml:"tna:topic"`
	NuevoNumeroDeEnvio       string        `xml:"tna:nuevoNumeroDeEnvio,omitempty"`
}

func (t *EnvioSeRedirecciona) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioSeRedirecciona
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EnvioSeRedirecciona) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioSeRedirecciona
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioSeRetiraDeSucursal struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon228      `xml:"tns:topic"`
}

func (t *EnvioSeRetiraDeSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioSeRetiraDeSucursal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioSeRetiraDeSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioSeRetiraDeSucursal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EnvioSinTurnoDeSucursal struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon229      `xml:"tns:topic"`
}

func (t *EnvioSinTurnoDeSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EnvioSinTurnoDeSucursal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EnvioSinTurnoDeSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EnvioSinTurnoDeSucursal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EspecificarRespuesta struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon362  `xml:"tns:topic"`
}

func (t *EspecificarRespuesta) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EspecificarRespuesta
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *EspecificarRespuesta) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EspecificarRespuesta
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type EventoDeNegocio struct {
	XMLNs         string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time `xml:"tna:timestamp"`
	Remitente     string    `xml:"tna:remitente"`
	Destinatario  string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time `xml:"tna:vencimiento,omitempty"`
}

func (t *EventoDeNegocio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EventoDeNegocio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *EventoDeNegocio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EventoDeNegocio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type EventoDeRespuesta struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
}

func (t *EventoDeRespuesta) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EventoDeRespuesta
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *EventoDeRespuesta) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EventoDeRespuesta
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EventoDeRetiro struct {
	XMLNs                   string       `xml:"xmlns:tna,attr,omitempty"`
	Timestamp               time.Time    `xml:"tna:timestamp"`
	Remitente               string       `xml:"tna:remitente"`
	Destinatario            string       `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden           string       `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento             time.Time    `xml:"tna:vencimiento,omitempty"`
	QuienFactura            QuienFactura `xml:"tna:quienFactura"`
	CodigoDeContratoInterno string       `xml:"tna:codigoDeContratoInterno"`
	Cuando                  string       `xml:"tna:cuando"`
	HojaDeRutaDeRetiro      string       `xml:"tna:hojaDeRutaDeRetiro"`
}

func (t *EventoDeRetiro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EventoDeRetiro
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *EventoDeRetiro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EventoDeRetiro
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type EventoDeTraza struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
}

func (t *EventoDeTraza) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EventoDeTraza
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EventoDeTraza) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EventoDeTraza
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EventoDeTrazaDePedido struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
}

func (t *EventoDeTrazaDePedido) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EventoDeTrazaDePedido
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *EventoDeTrazaDePedido) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EventoDeTrazaDePedido
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type EventoDestinatario struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	IdCliente      string    `xml:"tns:idCliente,omitempty"`
	IdDestinatario string    `xml:"tns:idDestinatario"`
}

func (t *EventoDestinatario) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EventoDestinatario
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.IdCliente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdDestinatario.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *EventoDestinatario) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EventoDestinatario
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type EventoEnCliente struct {
	XMLNs         string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time `xml:"tna:timestamp"`
	Remitente     string    `xml:"tna:remitente"`
	Destinatario  string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time `xml:"tna:vencimiento,omitempty"`
	Cliente       Cliente   `xml:"tns:cliente"`
}

func (t *EventoEnCliente) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EventoEnCliente
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cliente.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EventoEnCliente) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EventoEnCliente
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type EventoFacturable struct {
	XMLNs         string       `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time    `xml:"tna:timestamp"`
	Remitente     string       `xml:"tna:remitente"`
	Destinatario  string       `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string       `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time    `xml:"tna:vencimiento,omitempty"`
	QuienFactura  QuienFactura `xml:"tna:quienFactura"`
}

func (t *EventoFacturable) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EventoFacturable
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *EventoFacturable) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EventoFacturable
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type EventoIncidencia struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
}

func (t *EventoIncidencia) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EventoIncidencia
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EventoIncidencia) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EventoIncidencia
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EventoVisitaMobile struct {
	XMLNs                    string                        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time                     `xml:"tna:timestamp"`
	Remitente                string                        `xml:"tna:remitente"`
	Destinatario             string                        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string                        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time                     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura                  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string                        `xml:"tna:codigoDeEnvio"`
	Nombre                   string                        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time                     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string                        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string                        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string                        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string                        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string                        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string                        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal                 `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	FueEntregado             bool                          `xml:"tna:fueEntregado,omitempty"`
	Motivo                   string                        `xml:"tna:motivo,omitempty"`
	Submotivo                string                        `xml:"tna:submotivo,omitempty"`
	Distribuidor             DatosDistribuidor             `xml:"tns:distribuidor,omitempty"`
	Donde                    LugarDeRetiroEntrega          `xml:"tns:donde,omitempty"`
	EvidenciasDeVisita       ListaDePropiedadesAdicionales `xml:"tns:evidenciasDeVisita,omitempty"`
	Localizacion             GeoReferencia                 `xml:"tns:localizacion,omitempty"`
	Linking                  ListaDePropiedades            `xml:"tns:linking,omitempty"`
	Observaciones            ListaDeObjetos                `xml:"tns:observaciones,omitempty"`
}

func (t *EventoVisitaMobile) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EventoVisitaMobile
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Distribuidor.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Donde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EvidenciasDeVisita.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Localizacion.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Observaciones.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EventoVisitaMobile) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EventoVisitaMobile
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type EvidenciasDeVisitaActualizadas struct {
	XMLNs         string                        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time                     `xml:"tna:timestamp"`
	Remitente     string                        `xml:"tna:remitente"`
	Destinatario  string                        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string                        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time                     `xml:"tna:vencimiento,omitempty"`
	Contrato      Contrato                      `xml:"tns:contrato"`
	Topic         _anon152                      `xml:"tna:topic"`
	Entrega       ListaDePropiedadesAdicionales `xml:"tns:entrega,omitempty"`
	NoEntrega     ListaDePropiedadesAdicionales `xml:"tns:noEntrega,omitempty"`
	Linking       ListaDePropiedades            `xml:"tns:linking,omitempty"`
}

func (t *EvidenciasDeVisitaActualizadas) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T EvidenciasDeVisitaActualizadas
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Contrato.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Entrega.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.NoEntrega.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *EvidenciasDeVisitaActualizadas) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T EvidenciasDeVisitaActualizadas
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type ExcedeValorPoliza struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon230      `xml:"tns:topic"`
}

func (t *ExcedeValorPoliza) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ExcedeValorPoliza
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ExcedeValorPoliza) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ExcedeValorPoliza
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ExcedenteLogico struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon38       `xml:"tna:topic"`
}

func (t *ExcedenteLogico) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ExcedenteLogico
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ExcedenteLogico) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ExcedenteLogico
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ExcesoDeCantidad struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon71       `xml:"tna:topic"`
}

func (t *ExcesoDeCantidad) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ExcesoDeCantidad
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ExcesoDeCantidad) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ExcesoDeCantidad
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ExcesoDeFrecuencia struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon70       `xml:"tna:topic"`
}

func (t *ExcesoDeFrecuencia) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ExcesoDeFrecuencia
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ExcesoDeFrecuencia) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ExcesoDeFrecuencia
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ExcesoDePeso struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	SucursalMoviento         DatosSucursal `xml:"tns:sucursalMoviento"`
	PesoContratado           float64       `xml:"tna:pesoContratado"`
	PesoDeExceso             float64       `xml:"tna:pesoDeExceso"`
	Topic                    _anon69       `xml:"tna:topic"`
}

func (t *ExcesoDePeso) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ExcesoDePeso
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalMoviento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ExcesoDePeso) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ExcesoDePeso
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ExpedicionEnReparto struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon129      `xml:"tna:topic,omitempty"`
}

func (t *ExpedicionEnReparto) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ExpedicionEnReparto
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ExpedicionEnReparto) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ExpedicionEnReparto
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ExpedicionEntregada struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon130      `xml:"tna:topic,omitempty"`
}

func (t *ExpedicionEntregada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ExpedicionEntregada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ExpedicionEntregada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ExpedicionEntregada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ExpedicionHojaDeRutaCabecera struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon39       `xml:"tna:topic"`
	SucursalQueExpide        DatosSucursal `xml:"tns:sucursalQueExpide,omitempty"`
	MedioDeExpedicion        string        `xml:"tna:medioDeExpedicion,omitempty"`
}

func (t *ExpedicionHojaDeRutaCabecera) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ExpedicionHojaDeRutaCabecera
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalQueExpide.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ExpedicionHojaDeRutaCabecera) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ExpedicionHojaDeRutaCabecera
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ExpedicionHojaDeRutaDeViaje struct {
	XMLNs                    string            `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time         `xml:"tna:timestamp"`
	Remitente                string            `xml:"tna:remitente"`
	Destinatario             string            `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string            `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time         `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura      `xml:"tna:quienFactura"`
	CodigoDeEnvio            string            `xml:"tna:codigoDeEnvio"`
	Nombre                   string            `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time         `xml:"tna:cuando"`
	CodigoDeContratoInterno  string            `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string            `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string            `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string            `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string            `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string            `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal     `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon40           `xml:"tna:topic"`
	HojaDeRuta               string            `xml:"tna:hojaDeRuta"`
	Distribuidor             DatosDistribuidor `xml:"tns:distribuidor,omitempty"`
	SucursalQueExpide        DatosSucursal     `xml:"tns:sucursalQueExpide,omitempty"`
	SucursalQueRecibe        DatosSucursal     `xml:"tns:sucursalQueRecibe,omitempty"`
	MedioDeExpedicion        string            `xml:"tna:medioDeExpedicion,omitempty"`
}

func (t *ExpedicionHojaDeRutaDeViaje) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ExpedicionHojaDeRutaDeViaje
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Distribuidor.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalQueExpide.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalQueRecibe.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ExpedicionHojaDeRutaDeViaje) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ExpedicionHojaDeRutaDeViaje
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type FaltaDocumentacionIIBB struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon231      `xml:"tns:topic"`
}

func (t *FaltaDocumentacionIIBB) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FaltaDocumentacionIIBB
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *FaltaDocumentacionIIBB) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FaltaDocumentacionIIBB
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type FaltaOrdenDeCompra struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon331  `xml:"tns:topic"`
}

func (t *FaltaOrdenDeCompra) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FaltaOrdenDeCompra
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *FaltaOrdenDeCompra) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FaltaOrdenDeCompra
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type FaltaRemito struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon235      `xml:"tns:topic"`
}

func (t *FaltaRemito) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FaltaRemito
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *FaltaRemito) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FaltaRemito
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type FaltanBultos struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon232      `xml:"tns:topic"`
}

func (t *FaltanBultos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FaltanBultos
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *FaltanBultos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FaltanBultos
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type FaltanBultosYRemitos struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon233      `xml:"tns:topic"`
}

func (t *FaltanBultosYRemitos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FaltanBultosYRemitos
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *FaltanBultosYRemitos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FaltanBultosYRemitos
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type FechaPactada struct {
	XMLNs     string    `xml:"xmlns:tns,attr,omitempty"`
	Fecha     time.Time `xml:"tns:fecha,omitempty"`
	HoraDesde time.Time `xml:"tns:horaDesde,omitempty"`
	HoraHasta time.Time `xml:"tns:horaHasta,omitempty"`
}

func (t *FechaPactada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FechaPactada
	var layout struct {
		*T
		Fecha     *xsdDate `xml:"tns:fecha,omitempty"`
		HoraDesde *xsdTime `xml:"tns:horaDesde,omitempty"`
		HoraHasta *xsdTime `xml:"tns:horaHasta,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Fecha = (*xsdDate)(&layout.T.Fecha)
	layout.HoraDesde = (*xsdTime)(&layout.T.HoraDesde)
	layout.HoraHasta = (*xsdTime)(&layout.T.HoraHasta)
	return e.EncodeElement(layout, start)
}
func (t *FechaPactada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FechaPactada
	var overlay struct {
		*T
		Fecha     *xsdDate `xml:"tns:fecha,omitempty"`
		HoraDesde *xsdTime `xml:"tns:horaDesde,omitempty"`
		HoraHasta *xsdTime `xml:"tns:horaHasta,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Fecha = (*xsdDate)(&overlay.T.Fecha)
	overlay.HoraDesde = (*xsdTime)(&overlay.T.HoraDesde)
	overlay.HoraHasta = (*xsdTime)(&overlay.T.HoraHasta)
	return d.DecodeElement(&overlay, &start)
}

type FeriadoLocal struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon236      `xml:"tns:topic"`
}

func (t *FeriadoLocal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FeriadoLocal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *FeriadoLocal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FeriadoLocal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type FinCustodiaEnSucursal struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	CantidadDeDias           int           `xml:"tna:cantidadDeDias"`
	Topic                    _anon41       `xml:"tna:topic"`
	Motivo                   string        `xml:"tna:motivo,omitempty"`
	Submotivo                string        `xml:"tna:submotivo,omitempty"`
	SucursalDeDistribucion   DatosSucursal `xml:"tns:sucursalDeDistribucion,omitempty"`
}

func (t *FinCustodiaEnSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FinCustodiaEnSucursal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalDeDistribucion.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *FinCustodiaEnSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FinCustodiaEnSucursal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

// May be one of otro, cheque, retenciones, boletaDeDeposito, siniestroPerdido, efectivo
type FormaDeCobro string

type FueraDeHorarioDeRecepcion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon237      `xml:"tns:topic"`
}

func (t *FueraDeHorarioDeRecepcion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FueraDeHorarioDeRecepcion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *FueraDeHorarioDeRecepcion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FueraDeHorarioDeRecepcion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type FueraDeHorarioDeTransmision struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon238      `xml:"tns:topic"`
}

func (t *FueraDeHorarioDeTransmision) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FueraDeHorarioDeTransmision
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *FueraDeHorarioDeTransmision) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FueraDeHorarioDeTransmision
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type FueraDeTurnoDeEntrega struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon318  `xml:"tns:topic"`
}

func (t *FueraDeTurnoDeEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T FueraDeTurnoDeEntrega
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *FueraDeTurnoDeEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T FueraDeTurnoDeEntrega
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type GeneracionDeRetiro struct {
	XMLNs                   string       `xml:"xmlns:tna,attr,omitempty"`
	Timestamp               time.Time    `xml:"tna:timestamp"`
	Remitente               string       `xml:"tna:remitente"`
	Destinatario            string       `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden           string       `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento             time.Time    `xml:"tna:vencimiento,omitempty"`
	QuienFactura            QuienFactura `xml:"tna:quienFactura"`
	CodigoDeContratoInterno string       `xml:"tna:codigoDeContratoInterno"`
	Cuando                  string       `xml:"tna:cuando"`
	HojaDeRutaDeRetiro      string       `xml:"tna:hojaDeRutaDeRetiro"`
	Topic                   _anon124     `xml:"tna:topic"`
}

func (t *GeneracionDeRetiro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GeneracionDeRetiro
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *GeneracionDeRetiro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GeneracionDeRetiro
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type GeoReferencia struct {
	XMLNs    string  `xml:"xmlns:tns,attr,omitempty"`
	Latitud  float64 `xml:"tns:latitud,omitempty"`
	Longitud float64 `xml:"tns:longitud,omitempty"`
	Altura   float64 `xml:"tns:altura,omitempty"`
}

func (t *GeoReferencia) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GeoReferencia
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *GeoReferencia) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GeoReferencia
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

// Must be at least 1 items long
type GerenteDeCuentas string

type GestionCobranza struct {
	XMLNs                    string                 `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time              `xml:"tna:timestamp"`
	Remitente                string                 `xml:"tna:remitente"`
	Destinatario             string                 `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string                 `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time              `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura           `xml:"tna:quienFactura"`
	CodigoDeEnvio            string                 `xml:"tna:codigoDeEnvio"`
	Nombre                   string                 `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time              `xml:"tna:cuando"`
	CodigoDeContratoInterno  string                 `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string                 `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string                 `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string                 `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string                 `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string                 `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal          `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon42                `xml:"tna:topic"`
	Importe                  float64                `xml:"tna:importe,omitempty"`
	SucursalDonde            DatosSucursal          `xml:"tns:sucursalDonde,omitempty"`
	ComponentesDeCobro       ListaDeDetallesDeCobro `xml:"tns:componentesDeCobro,omitempty"`
}

func (t *GestionCobranza) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GestionCobranza
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalDonde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.ComponentesDeCobro.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *GestionCobranza) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GestionCobranza
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type GestionCobranzaAnulada struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon239      `xml:"tns:topic"`
}

func (t *GestionCobranzaAnulada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GestionCobranzaAnulada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *GestionCobranzaAnulada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GestionCobranzaAnulada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type GestionCobranzaImporteModificado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon240      `xml:"tns:topic"`
}

func (t *GestionCobranzaImporteModificado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GestionCobranzaImporteModificado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *GestionCobranzaImporteModificado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GestionCobranzaImporteModificado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type GestionCobranzaReembolsoCobrado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon241      `xml:"tns:topic"`
}

func (t *GestionCobranzaReembolsoCobrado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GestionCobranzaReembolsoCobrado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *GestionCobranzaReembolsoCobrado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GestionCobranzaReembolsoCobrado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type GestionCobranzaReembolsoNoCobrado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon242      `xml:"tns:topic"`
}

func (t *GestionCobranzaReembolsoNoCobrado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GestionCobranzaReembolsoNoCobrado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *GestionCobranzaReembolsoNoCobrado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GestionCobranzaReembolsoNoCobrado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type GestionDeCoordinacion struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon319  `xml:"tns:topic"`
}

func (t *GestionDeCoordinacion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GestionDeCoordinacion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *GestionDeCoordinacion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GestionDeCoordinacion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type GestionTelefonica struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon43       `xml:"tna:topic"`
	FechaPactadaDesde        string        `xml:"tna:fechaPactadaDesde,omitempty"`
	FechaPactadaHasta        string        `xml:"tna:fechaPactadaHasta,omitempty"`
	Motivo                   string        `xml:"tna:motivo,omitempty"`
	Submotivo                string        `xml:"tna:submotivo,omitempty"`
}

func (t *GestionTelefonica) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GestionTelefonica
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *GestionTelefonica) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GestionTelefonica
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type GestionarEnvio struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          Topic     `xml:"tns:topic"`
}

func (t *GestionarEnvio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GestionarEnvio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *GestionarEnvio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GestionarEnvio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type GestionarRetiro struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon365  `xml:"tns:topic"`
}

func (t *GestionarRetiro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GestionarRetiro
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *GestionarRetiro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GestionarRetiro
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type GsinDeHojaDeRutaCreado struct {
	XMLNs         string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time `xml:"tna:timestamp"`
	Remitente     string    `xml:"tna:remitente"`
	Destinatario  string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time `xml:"tna:vencimiento,omitempty"`
	Numero        string    `xml:"tna:numero"`
	Topic         _anon166  `xml:"tna:topic"`
}

func (t *GsinDeHojaDeRutaCreado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GsinDeHojaDeRutaCreado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *GsinDeHojaDeRutaCreado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GsinDeHojaDeRutaCreado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type GsinFinDeDistribucion struct {
	XMLNs         string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time `xml:"tna:timestamp"`
	Remitente     string    `xml:"tna:remitente"`
	Destinatario  string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time `xml:"tna:vencimiento,omitempty"`
	Numero        string    `xml:"tna:numero"`
	Topic         _anon167  `xml:"tna:topic"`
}

func (t *GsinFinDeDistribucion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T GsinFinDeDistribucion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *GsinFinDeDistribucion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T GsinFinDeDistribucion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type HojaDeRutaDeDistribucionCreada struct {
	XMLNs              string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time          `xml:"tna:timestamp"`
	Remitente          string             `xml:"tna:remitente"`
	Destinatario       string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time          `xml:"tna:vencimiento,omitempty"`
	Topic              _anon151           `xml:"tna:topic"`
	NumeroDeHojaDeRuta string             `xml:"tna:numeroDeHojaDeRuta,omitempty"`
	Envios             ListaDeObjetos     `xml:"tns:envios,omitempty"`
	Distribuidor       DatosDistribuidor  `xml:"tns:distribuidor,omitempty"`
	Linking            ListaDePropiedades `xml:"tns:linking,omitempty"`
	Donde              DatosSucursal      `xml:"tns:donde,omitempty"`
}

func (t *HojaDeRutaDeDistribucionCreada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T HojaDeRutaDeDistribucionCreada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Envios.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Distribuidor.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Donde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *HojaDeRutaDeDistribucionCreada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T HojaDeRutaDeDistribucionCreada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type HojaDeRutaDigitalizada struct {
	XMLNs                 string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp             time.Time     `xml:"tna:timestamp"`
	Remitente             string        `xml:"tna:remitente"`
	Destinatario          string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden         string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento           time.Time     `xml:"tna:vencimiento,omitempty"`
	CodigoDeHojaDeRuta    string        `xml:"tna:codigoDeHojaDeRuta,omitempty"`
	SucursalQueDigitaliza DatosSucursal `xml:"tns:sucursalQueDigitaliza,omitempty"`
	Topic                 _anon144      `xml:"tna:topic"`
	UrlDelDocumento       string        `xml:"tna:urlDelDocumento,omitempty"`
	MimeType              string        `xml:"tna:mimeType,omitempty"`
}

func (t *HojaDeRutaDigitalizada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T HojaDeRutaDigitalizada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.SucursalQueDigitaliza.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *HojaDeRutaDigitalizada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T HojaDeRutaDigitalizada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type ImportacionDeDatosAdicionales struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon44       `xml:"tna:topic"`
}

func (t *ImportacionDeDatosAdicionales) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ImportacionDeDatosAdicionales
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ImportacionDeDatosAdicionales) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ImportacionDeDatosAdicionales
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ImportacionRealizada struct {
	XMLNs                       string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                   time.Time `xml:"tna:timestamp"`
	Remitente                   string    `xml:"tna:remitente"`
	Destinatario                string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden               string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                 time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDeIntento             int       `xml:"tna:numeroDeIntento"`
	Topic                       _anon168  `xml:"tna:topic"`
	NumeroDeReferencia          string    `xml:"tna:numeroDeReferencia"`
	CantidadElementosImportados int       `xml:"tna:cantidadElementosImportados"`
	Contrato                    string    `xml:"tna:contrato"`
	RetiroDeRecibo              string    `xml:"tna:retiroDeRecibo,omitempty"`
	SucursalDeImportacion       int       `xml:"tna:sucursalDeImportacion"`
}

func (t *ImportacionRealizada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ImportacionRealizada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *ImportacionRealizada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ImportacionRealizada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type Impresion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Donde                    DatosSucursal `xml:"tns:donde,omitempty"`
	Topic                    _anon45       `xml:"tna:topic"`
}

func (t *Impresion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Impresion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Donde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *Impresion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Impresion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ImpresionDeRemitoDeImposicion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon89       `xml:"tna:topic"`
	NumeroDeRemito           string        `xml:"tna:numeroDeRemito,omitempty"`
	Sucursal                 DatosSucursal `xml:"tns:sucursal,omitempty"`
	Estado                   string        `xml:"tna:estado,omitempty"`
	FechaDeCreacion          string        `xml:"tna:fechaDeCreacion,omitempty"`
}

func (t *ImpresionDeRemitoDeImposicion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ImpresionDeRemitoDeImposicion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Sucursal.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ImpresionDeRemitoDeImposicion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ImpresionDeRemitoDeImposicion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type IncorporarMarcaDeCustodia struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon94       `xml:"tna:topic"`
	SucursalDeCustodia       DatosSucursal `xml:"tns:sucursalDeCustodia"`
}

func (t *IncorporarMarcaDeCustodia) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T IncorporarMarcaDeCustodia
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalDeCustodia.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *IncorporarMarcaDeCustodia) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T IncorporarMarcaDeCustodia
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type InformacionDeServicio struct {
	XMLNs        string `xml:"xmlns:tns,attr,omitempty"`
	Timestamp    string `xml:"tns:timestamp"`
	Destinatario string `xml:"tns:destinatario,omitempty"`
}

func (t *InformacionDeServicio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T InformacionDeServicio
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *InformacionDeServicio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T InformacionDeServicio
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type InformeDeRendicionDigitalizadoDisponible struct {
	XMLNs                   string                        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp               time.Time                     `xml:"tna:timestamp"`
	Remitente               string                        `xml:"tna:remitente"`
	Destinatario            string                        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden           string                        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento             time.Time                     `xml:"tna:vencimiento,omitempty"`
	Numero                  string                        `xml:"tna:numero,omitempty"`
	CodigoDeContratoInterno string                        `xml:"tna:codigoDeContratoInterno,omitempty"`
	Linking                 ListaDePropiedades            `xml:"tns:linking,omitempty"`
	Documentos              ListaDePropiedadesAdicionales `xml:"tns:documentos,omitempty"`
	Topic                   _anon137                      `xml:"tna:topic"`
}

func (t *InformeDeRendicionDigitalizadoDisponible) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T InformeDeRendicionDigitalizadoDisponible
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Documentos.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *InformeDeRendicionDigitalizadoDisponible) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T InformeDeRendicionDigitalizadoDisponible
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type IngresoDeConservadoraACamara struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon243      `xml:"tns:topic"`
}

func (t *IngresoDeConservadoraACamara) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T IngresoDeConservadoraACamara
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *IngresoDeConservadoraACamara) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T IngresoDeConservadoraACamara
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type InicioCicloDeRendicion struct {
	XMLNs                    string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time      `xml:"tna:timestamp"`
	Remitente                string         `xml:"tna:remitente"`
	Destinatario             string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time      `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura   `xml:"tna:quienFactura"`
	CodigoDeEnvio            string         `xml:"tna:codigoDeEnvio"`
	Nombre                   string         `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time      `xml:"tna:cuando"`
	CodigoDeContratoInterno  string         `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string         `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string         `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string         `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string         `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string         `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal  `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Envio                    DetalleDeEnvio `xml:"tns:envio"`
	Contrato                 Contrato       `xml:"tns:contrato"`
	Topic                    _anon76        `xml:"tna:topic"`
	QueCiclo                 QueCiclo       `xml:"tna:queCiclo"`
}

func (t *InicioCicloDeRendicion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T InicioCicloDeRendicion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Contrato.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *InicioCicloDeRendicion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T InicioCicloDeRendicion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type InicioEtapaDeGestionTelefonica struct {
	XMLNs                    string               `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time            `xml:"tna:timestamp"`
	Remitente                string               `xml:"tna:remitente"`
	Destinatario             string               `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string               `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time            `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura         `xml:"tna:quienFactura"`
	CodigoDeEnvio            string               `xml:"tna:codigoDeEnvio"`
	Nombre                   string               `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time            `xml:"tna:cuando"`
	CodigoDeContratoInterno  string               `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string               `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string               `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string               `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string               `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string               `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal        `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon84              `xml:"tna:topic"`
	Centralizada             bool                 `xml:"tna:centralizada,omitempty"`
	NuevoDestino             LugarDeRetiroEntrega `xml:"tns:nuevoDestino,omitempty"`
	NuevaSucursal            LugarDeRetiroEntrega `xml:"tns:nuevaSucursal,omitempty"`
}

func (t *InicioEtapaDeGestionTelefonica) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T InicioEtapaDeGestionTelefonica
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.NuevoDestino.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.NuevaSucursal.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *InicioEtapaDeGestionTelefonica) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T InicioEtapaDeGestionTelefonica
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type IntroduccionDeMotivo struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon90       `xml:"tna:topic"`
	Motivo                   string        `xml:"tna:motivo"`
	Submotivo                string        `xml:"tna:submotivo"`
}

func (t *IntroduccionDeMotivo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T IntroduccionDeMotivo
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *IntroduccionDeMotivo) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T IntroduccionDeMotivo
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type InversionEnBultoCerrado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon244      `xml:"tns:topic"`
}

func (t *InversionEnBultoCerrado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T InversionEnBultoCerrado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *InversionEnBultoCerrado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T InversionEnBultoCerrado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type LineaEnHojaDeRutaDigitalizada struct {
	XMLNs                   string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp               time.Time     `xml:"tna:timestamp"`
	Remitente               string        `xml:"tna:remitente"`
	Destinatario            string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden           string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento             time.Time     `xml:"tna:vencimiento,omitempty"`
	Topic                   _anon149      `xml:"tna:topic"`
	CodigoDeHojaDeRuta      string        `xml:"tna:codigoDeHojaDeRuta,omitempty"`
	NumeroDeEnvio           string        `xml:"tna:numeroDeEnvio,omitempty"`
	CodigoDeContratoInterno string        `xml:"tna:codigoDeContratoInterno,omitempty"`
	SucursalQueDigitaliza   DatosSucursal `xml:"tns:sucursalQueDigitaliza,omitempty"`
	FechaDeGeneracion       string        `xml:"tna:fechaDeGeneracion,omitempty"`
}

func (t *LineaEnHojaDeRutaDigitalizada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LineaEnHojaDeRutaDigitalizada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.SucursalQueDigitaliza.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *LineaEnHojaDeRutaDigitalizada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LineaEnHojaDeRutaDigitalizada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type LiquidacionDeAbono struct {
	XMLNs            string       `xml:"xmlns:tna,attr,omitempty"`
	Timestamp        time.Time    `xml:"tna:timestamp"`
	Remitente        string       `xml:"tna:remitente"`
	Destinatario     string       `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden    string       `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento      time.Time    `xml:"tna:vencimiento,omitempty"`
	QuienFactura     QuienFactura `xml:"tna:quienFactura"`
	Topic            _anon57      `xml:"tna:topic"`
	CodigoDeCliente  string       `xml:"tna:codigoDeCliente"`
	CodigoDeContrato string       `xml:"tna:codigoDeContrato"`
	PeriodoAbonado   string       `xml:"tna:periodoAbonado"`
	Tarifa           float32      `xml:"tna:tarifa"`
}

func (t *LiquidacionDeAbono) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LiquidacionDeAbono
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *LiquidacionDeAbono) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LiquidacionDeAbono
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type LiquidacionFacturada struct {
	XMLNs         string                      `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time                   `xml:"tna:timestamp"`
	Remitente     string                      `xml:"tna:remitente"`
	Destinatario  string                      `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string                      `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time                   `xml:"tna:vencimiento,omitempty"`
	Liquidacion   DetalleLiquidacionFacturada `xml:"tns:liquidacion"`
	Topic         _anon24                     `xml:"tna:topic"`
}

func (t *LiquidacionFacturada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LiquidacionFacturada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Liquidacion.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *LiquidacionFacturada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LiquidacionFacturada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type LiquidacionNoFacturada struct {
	XMLNs         string                      `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time                   `xml:"tna:timestamp"`
	Remitente     string                      `xml:"tna:remitente"`
	Destinatario  string                      `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string                      `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time                   `xml:"tna:vencimiento,omitempty"`
	Liquidacion   DetalleLiquidacionFacturada `xml:"tns:liquidacion"`
	Topic         _anon25                     `xml:"tna:topic"`
	Razon         string                      `xml:"tna:razon"`
}

func (t *LiquidacionNoFacturada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LiquidacionNoFacturada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Liquidacion.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *LiquidacionNoFacturada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LiquidacionNoFacturada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type ListaDeConceptosTarifados struct {
	XMLNs              string                    `xml:"xmlns:tns,attr,omitempty"`
	ConceptosTarifados []DetalleConceptoTarifado `xml:"tns:conceptosTarifados"`
}

func (t *ListaDeConceptosTarifados) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDeConceptosTarifados
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDeConceptosTarifados) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDeConceptosTarifados
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ListaDeDatosPersonales struct {
	XMLNs   string            `xml:"xmlns:tns,attr,omitempty"`
	Persona []DatosPersonales `xml:"tns:persona"`
}

func (t *ListaDeDatosPersonales) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDeDatosPersonales
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDeDatosPersonales) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDeDatosPersonales
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ListaDeDetalleDeEnvios struct {
	XMLNs string                   `xml:"xmlns:tns,attr,omitempty"`
	Envio []DetalleDeEnvioTarifado `xml:"tns:envio"`
}

func (t *ListaDeDetalleDeEnvios) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDeDetalleDeEnvios
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDeDetalleDeEnvios) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDeDetalleDeEnvios
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ListaDeDetalleDeEnviosSinConceptos struct {
	XMLNs  string           `xml:"xmlns:tns,attr,omitempty"`
	Envios []DetalleDeEnvio `xml:"tns:envios"`
}

func (t *ListaDeDetalleDeEnviosSinConceptos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDeDetalleDeEnviosSinConceptos
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDeDetalleDeEnviosSinConceptos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDeDetalleDeEnviosSinConceptos
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ListaDeDetallesDeAbono struct {
	XMLNs  string           `xml:"xmlns:tns,attr,omitempty"`
	Abonos []DetalleDeAbono `xml:"tns:abonos,omitempty"`
}

func (t *ListaDeDetallesDeAbono) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDeDetallesDeAbono
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDeDetallesDeAbono) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDeDetallesDeAbono
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ListaDeDetallesDeCobro struct {
	XMLNs string            `xml:"xmlns:tns,attr,omitempty"`
	Cobro []DetallaDelCobro `xml:"tns:cobro,omitempty"`
}

func (t *ListaDeDetallesDeCobro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDeDetallesDeCobro
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDeDetallesDeCobro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDeDetallesDeCobro
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ListaDeEntidadesRetiradas struct {
	XMLNs     string            `xml:"xmlns:tns,attr,omitempty"`
	Entidades []EntidadRetirada `xml:"tns:entidades,omitempty"`
}

func (t *ListaDeEntidadesRetiradas) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDeEntidadesRetiradas
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDeEntidadesRetiradas) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDeEntidadesRetiradas
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ListaDeLugares struct {
	XMLNs string                 `xml:"xmlns:tns,attr,omitempty"`
	Lugar []LugarDeRetiroEntrega `xml:"tns:lugar"`
}

func (t *ListaDeLugares) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDeLugares
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDeLugares) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDeLugares
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ListaDeObjetos struct {
	XMLNs   string   `xml:"xmlns:tns,attr,omitempty"`
	Objetos []string `xml:"tns:objetos,omitempty"`
}

func (t *ListaDeObjetos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDeObjetos
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDeObjetos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDeObjetos
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ListaDePaquetes struct {
	XMLNs                      string             `xml:"xmlns:tns,attr,omitempty"`
	DetalleInformadoDelPaquete []DetalleDePaquete `xml:"tns:detalleInformadoDelPaquete,omitempty"`
}

func (t *ListaDePaquetes) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDePaquetes
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDePaquetes) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDePaquetes
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ListaDePropiedades struct {
	XMLNs     string     `xml:"xmlns:tns,attr,omitempty"`
	Matadatos []Metadato `xml:"tns:matadatos,omitempty"`
}

func (t *ListaDePropiedades) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDePropiedades
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDePropiedades) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDePropiedades
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ListaDePropiedadesAdicionales struct {
	XMLNs     string      `xml:"xmlns:tns,attr,omitempty"`
	Propiedad []Propiedad `xml:"tns:propiedad,omitempty"`
}

func (t *ListaDePropiedadesAdicionales) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDePropiedadesAdicionales
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDePropiedadesAdicionales) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDePropiedadesAdicionales
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type ListaDeTelefonos struct {
	XMLNs     string     `xml:"xmlns:tns,attr,omitempty"`
	Telefonos []Telefono `xml:"tns:telefonos"`
}

func (t *ListaDeTelefonos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ListaDeTelefonos
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *ListaDeTelefonos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ListaDeTelefonos
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type LlamarADestinatarioParaConfirmar struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon346  `xml:"tns:topic"`
}

func (t *LlamarADestinatarioParaConfirmar) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LlamarADestinatarioParaConfirmar
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *LlamarADestinatarioParaConfirmar) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LlamarADestinatarioParaConfirmar
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type LugarDeRetiroEntrega struct {
	XMLNs         string        `xml:"xmlns:tns,attr,omitempty"`
	CodigoPostal  string        `xml:"tns:codigoPostal,omitempty"`
	Descripcion   string        `xml:"tns:descripcion,omitempty"`
	Localidad     string        `xml:"tns:localidad,omitempty"`
	EsLocal       bool          `xml:"tns:esLocal,omitempty"`
	DatosSucursal DatosSucursal `xml:"tns:datosSucursal,omitempty"`
	Domicilio     Direccion     `xml:"tns:domicilio,omitempty"`
	Region        string        `xml:"tns:region,omitempty"`
	Pais          string        `xml:"tns:pais,omitempty"`
}

func (t *LugarDeRetiroEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LugarDeRetiroEntrega
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *LugarDeRetiroEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LugarDeRetiroEntrega
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type LugarDeRetiroOEntrega struct {
	XMLNs       string        `xml:"xmlns:tns,attr,omitempty"`
	Postal      Direccion     `xml:"tns:postal,omitempty"`
	Sucursal    DatosSucursal `xml:"tns:sucursal,omitempty"`
	Coordenadas GeoReferencia `xml:"tns:coordenadas,omitempty"`
}

func (t *LugarDeRetiroOEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T LugarDeRetiroOEntrega
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *LugarDeRetiroOEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T LugarDeRetiroOEntrega
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type MensajeConPayload struct {
	XMLNs         string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time `xml:"tna:timestamp"`
	Remitente     string    `xml:"tna:remitente"`
	Destinatario  string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time `xml:"tna:vencimiento,omitempty"`
	Topic         _anon169  `xml:"tna:topic"`
	Content       string    `xml:"tna:content"`
}

func (t *MensajeConPayload) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T MensajeConPayload
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *MensajeConPayload) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MensajeConPayload
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type MensajeWorkflowNumeracion struct {
	XMLNs           string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp       time.Time `xml:"tna:timestamp"`
	Remitente       string    `xml:"tna:remitente"`
	Destinatario    string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden   string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento     time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDeIntento int       `xml:"tna:numeroDeIntento"`
}

func (t *MensajeWorkflowNumeracion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T MensajeWorkflowNumeracion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *MensajeWorkflowNumeracion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MensajeWorkflowNumeracion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type MercaderiaAControlar struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon245      `xml:"tns:topic"`
}

func (t *MercaderiaAControlar) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T MercaderiaAControlar
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *MercaderiaAControlar) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MercaderiaAControlar
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type MercaderiaOEmpaqueEnMalEstado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon246      `xml:"tns:topic"`
}

func (t *MercaderiaOEmpaqueEnMalEstado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T MercaderiaOEmpaqueEnMalEstado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *MercaderiaOEmpaqueEnMalEstado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MercaderiaOEmpaqueEnMalEstado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type MercaderiaSinPreparar struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon343  `xml:"tns:topic"`
}

func (t *MercaderiaSinPreparar) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T MercaderiaSinPreparar
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *MercaderiaSinPreparar) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T MercaderiaSinPreparar
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type Metadato struct {
	XMLNs     string `xml:"xmlns:tns,attr,omitempty"`
	Meta      string `xml:"tns:meta"`
	Contenido string `xml:"tns:contenido,omitempty"`
}

func (t *Metadato) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Metadato
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *Metadato) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Metadato
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type NoPoseeRemito struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon344  `xml:"tns:topic"`
}

func (t *NoPoseeRemito) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NoPoseeRemito
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *NoPoseeRemito) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NoPoseeRemito
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type NoSonCondicionesPactadas struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon247      `xml:"tns:topic"`
}

func (t *NoSonCondicionesPactadas) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NoSonCondicionesPactadas
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *NoSonCondicionesPactadas) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NoSonCondicionesPactadas
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

// Must be at least 1 items long
type NombreDeFantasia string

type NotificacionElectronica struct {
	XMLNs         string       `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time    `xml:"tna:timestamp"`
	Remitente     string       `xml:"tna:remitente"`
	Destinatario  string       `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string       `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time    `xml:"tna:vencimiento,omitempty"`
	QuienFactura  QuienFactura `xml:"tna:quienFactura"`
	Topic         _anon30      `xml:"tna:topic"`
	CodigoDeEnvio string       `xml:"tna:codigoDeEnvio"`
	Concepto      string       `xml:"tna:concepto"`
}

func (t *NotificacionElectronica) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NotificacionElectronica
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *NotificacionElectronica) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NotificacionElectronica
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type NotificacionMobile struct {
	XMLNs         string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time `xml:"tna:timestamp"`
	Remitente     string    `xml:"tna:remitente"`
	Destinatario  string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time `xml:"tna:vencimiento,omitempty"`
	Topic         _anon141  `xml:"tna:topic"`
	Success       string    `xml:"tna:success,omitempty"`
	Id            int       `xml:"tna:id"`
}

func (t *NotificacionMobile) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NotificacionMobile
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *NotificacionMobile) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NotificacionMobile
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type NovedadConEnvioEnCourier struct {
	XMLNs                    string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time          `xml:"tna:timestamp"`
	Remitente                string             `xml:"tna:remitente"`
	Destinatario             string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time          `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura       `xml:"tna:quienFactura"`
	CodigoDeEnvio            string             `xml:"tna:codigoDeEnvio"`
	Nombre                   string             `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time          `xml:"tna:cuando"`
	CodigoDeContratoInterno  string             `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string             `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string             `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string             `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string             `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string             `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal      `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	QueNovedad               string             `xml:"tna:queNovedad"`
	Resultado                string             `xml:"tna:resultado,omitempty"`
	Topic                    _anon86            `xml:"tna:topic"`
	Courier                  string             `xml:"tna:courier"`
	DatosAdicionales         ListaDePropiedades `xml:"tns:datosAdicionales,omitempty"`
}

func (t *NovedadConEnvioEnCourier) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NovedadConEnvioEnCourier
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.DatosAdicionales.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *NovedadConEnvioEnCourier) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NovedadConEnvioEnCourier
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type NovedadEnContrato struct {
	XMLNs         string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time `xml:"tna:timestamp"`
	Remitente     string    `xml:"tna:remitente"`
	Destinatario  string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time `xml:"tna:vencimiento,omitempty"`
	Contrato      Contrato  `xml:"tns:contrato"`
}

func (t *NovedadEnContrato) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NovedadEnContrato
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Contrato.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *NovedadEnContrato) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NovedadEnContrato
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type NovedadEnDireccion struct {
	XMLNs         string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time `xml:"tna:timestamp"`
	Remitente     string    `xml:"tna:remitente"`
	Destinatario  string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time `xml:"tna:vencimiento,omitempty"`
	Domicilio     Direccion `xml:"tns:domicilio"`
	Topic         _anon66   `xml:"tna:topic"`
}

func (t *NovedadEnDireccion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NovedadEnDireccion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Domicilio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *NovedadEnDireccion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NovedadEnDireccion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type NovedadEnDistribuidor struct {
	XMLNs         string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time          `xml:"tna:timestamp"`
	Remitente     string             `xml:"tna:remitente"`
	Destinatario  string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time          `xml:"tna:vencimiento,omitempty"`
	Distribuidor  DatosDistribuidor  `xml:"tns:distribuidor,omitempty"`
	Linking       ListaDePropiedades `xml:"tns:linking,omitempty"`
}

func (t *NovedadEnDistribuidor) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NovedadEnDistribuidor
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Distribuidor.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *NovedadEnDistribuidor) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NovedadEnDistribuidor
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type NovedadEnEnvio struct {
	XMLNs         string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time      `xml:"tna:timestamp"`
	Remitente     string         `xml:"tna:remitente"`
	Destinatario  string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time      `xml:"tna:vencimiento,omitempty"`
	Envio         DetalleDeEnvio `xml:"tns:envio"`
}

func (t *NovedadEnEnvio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NovedadEnEnvio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *NovedadEnEnvio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NovedadEnEnvio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type NovedadEnEnvioEventoTemporario struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon127      `xml:"tna:topic"`
}

func (t *NovedadEnEnvioEventoTemporario) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NovedadEnEnvioEventoTemporario
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *NovedadEnEnvioEventoTemporario) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NovedadEnEnvioEventoTemporario
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type NovedadEnLiquidacion struct {
	XMLNs         string                      `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time                   `xml:"tna:timestamp"`
	Remitente     string                      `xml:"tna:remitente"`
	Destinatario  string                      `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string                      `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time                   `xml:"tna:vencimiento,omitempty"`
	Liquidacion   DetalleLiquidacionFacturada `xml:"tns:liquidacion"`
}

func (t *NovedadEnLiquidacion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NovedadEnLiquidacion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Liquidacion.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *NovedadEnLiquidacion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NovedadEnLiquidacion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type NovedadEnOrdenDeRetiro struct {
	XMLNs         string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time          `xml:"tna:timestamp"`
	Remitente     string             `xml:"tna:remitente"`
	Destinatario  string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time          `xml:"tna:vencimiento,omitempty"`
	Numero        string             `xml:"tna:numero"`
	Linking       ListaDePropiedades `xml:"tns:linking,omitempty"`
}

func (t *NovedadEnOrdenDeRetiro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NovedadEnOrdenDeRetiro
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *NovedadEnOrdenDeRetiro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NovedadEnOrdenDeRetiro
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type NovedadEnPedidoDeAlmacen struct {
	XMLNs         string          `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time       `xml:"tna:timestamp"`
	Remitente     string          `xml:"tna:remitente"`
	Destinatario  string          `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string          `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time       `xml:"tna:vencimiento,omitempty"`
	Pedido        PedidoDeAlmacen `xml:"pref:pedido"`
}

func (t *NovedadEnPedidoDeAlmacen) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NovedadEnPedidoDeAlmacen
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Pedido.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *NovedadEnPedidoDeAlmacen) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NovedadEnPedidoDeAlmacen
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type NovedadEnSucursal struct {
	XMLNs         string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time     `xml:"tna:timestamp"`
	Remitente     string        `xml:"tna:remitente"`
	Destinatario  string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time     `xml:"tna:vencimiento,omitempty"`
	DatosSucursal DatosSucursal `xml:"tns:datosSucursal"`
}

func (t *NovedadEnSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NovedadEnSucursal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.DatosSucursal.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *NovedadEnSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NovedadEnSucursal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type NuevaFechaDeEntregaPactada struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon126      `xml:"tna:topic"`
	NuevaFechaPactadaDesde   string        `xml:"tna:nuevaFechaPactadaDesde,omitempty"`
	NuevaFechaPactadaHasta   string        `xml:"tna:nuevaFechaPactadaHasta,omitempty"`
}

func (t *NuevaFechaDeEntregaPactada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T NuevaFechaDeEntregaPactada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *NuevaFechaDeEntregaPactada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T NuevaFechaDeEntregaPactada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

// Must be at least 1 items long
type Numero string

// May be one of agregados, quitados
type Operacion string

type OrdenDeEnvioCancelada struct {
	XMLNs                string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp            time.Time `xml:"tna:timestamp"`
	Remitente            string    `xml:"tna:remitente"`
	Destinatario         string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden        string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento          time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDeOrdenDeEnvio string    `xml:"tna:numeroDeOrdenDeEnvio,omitempty"`
	NumeroDeEnvio        string    `xml:"tna:numeroDeEnvio,omitempty"`
	Topic                _anon156  `xml:"tna:topic"`
}

func (t *OrdenDeEnvioCancelada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T OrdenDeEnvioCancelada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *OrdenDeEnvioCancelada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T OrdenDeEnvioCancelada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type OrdenDeEnvioCreada struct {
	XMLNs                    string                `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time             `xml:"tna:timestamp"`
	Remitente                string                `xml:"tna:remitente"`
	Destinatario             string                `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string                `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time             `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura          `xml:"tna:quienFactura"`
	CodigoDeEnvio            string                `xml:"tna:codigoDeEnvio"`
	Nombre                   string                `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time             `xml:"tna:cuando"`
	CodigoDeContratoInterno  string                `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string                `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string                `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string                `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string                `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string                `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal         `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon132              `xml:"tna:topic"`
	DatosDeLaOrden           DetalleDeOrdenDeEnvio `xml:"tns:datosDeLaOrden,omitempty"`
	Linking                  ListaDePropiedades    `xml:"tns:linking,omitempty"`
}

func (t *OrdenDeEnvioCreada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T OrdenDeEnvioCreada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.DatosDeLaOrden.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *OrdenDeEnvioCreada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T OrdenDeEnvioCreada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type OrdenDeEnvioRechazada struct {
	XMLNs                    string                `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time             `xml:"tna:timestamp"`
	Remitente                string                `xml:"tna:remitente"`
	Destinatario             string                `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string                `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time             `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura          `xml:"tna:quienFactura"`
	CodigoDeEnvio            string                `xml:"tna:codigoDeEnvio"`
	Nombre                   string                `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time             `xml:"tna:cuando"`
	CodigoDeContratoInterno  string                `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string                `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string                `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string                `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string                `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string                `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal         `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	DatosDeLaOrden           DetalleDeOrdenDeEnvio `xml:"tns:datosDeLaOrden,omitempty"`
	Topic                    _anon140              `xml:"tna:topic"`
	Razon                    string                `xml:"tna:razon,omitempty"`
}

func (t *OrdenDeEnvioRechazada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T OrdenDeEnvioRechazada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.DatosDeLaOrden.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *OrdenDeEnvioRechazada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T OrdenDeEnvioRechazada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type OrdenDeEnvioSolicitada struct {
	XMLNs                    string                `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time             `xml:"tna:timestamp"`
	Remitente                string                `xml:"tna:remitente"`
	Destinatario             string                `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string                `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time             `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura          `xml:"tna:quienFactura"`
	CodigoDeEnvio            string                `xml:"tna:codigoDeEnvio"`
	Nombre                   string                `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time             `xml:"tna:cuando"`
	CodigoDeContratoInterno  string                `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string                `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string                `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string                `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string                `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string                `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal         `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon170              `xml:"tna:topic"`
	DatosDeLaOrden           DetalleDeOrdenDeEnvio `xml:"tns:datosDeLaOrden,omitempty"`
}

func (t *OrdenDeEnvioSolicitada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T OrdenDeEnvioSolicitada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.DatosDeLaOrden.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *OrdenDeEnvioSolicitada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T OrdenDeEnvioSolicitada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type OrdenDeRetiroActualizada struct {
	XMLNs         string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time          `xml:"tna:timestamp"`
	Remitente     string             `xml:"tna:remitente"`
	Destinatario  string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time          `xml:"tna:vencimiento,omitempty"`
	Numero        string             `xml:"tna:numero"`
	Linking       ListaDePropiedades `xml:"tns:linking,omitempty"`
	Topic         _anon142           `xml:"tna:topic"`
}

func (t *OrdenDeRetiroActualizada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T OrdenDeRetiroActualizada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *OrdenDeRetiroActualizada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T OrdenDeRetiroActualizada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type OrdenDeRetiroCreada struct {
	XMLNs         string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time          `xml:"tna:timestamp"`
	Remitente     string             `xml:"tna:remitente"`
	Destinatario  string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time          `xml:"tna:vencimiento,omitempty"`
	Numero        string             `xml:"tna:numero"`
	Linking       ListaDePropiedades `xml:"tns:linking,omitempty"`
	Topic         _anon143           `xml:"tna:topic"`
}

func (t *OrdenDeRetiroCreada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T OrdenDeRetiroCreada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *OrdenDeRetiroCreada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T OrdenDeRetiroCreada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

// May be one of undefined, P, D
type PagoDestino string

type PaqueteCompletado struct {
	XMLNs         string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time          `xml:"tna:timestamp"`
	Remitente     string             `xml:"tna:remitente"`
	Destinatario  string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time          `xml:"tna:vencimiento,omitempty"`
	Topic         _anon147           `xml:"tna:topic"`
	IdPaquete     string             `xml:"tna:idPaquete,omitempty"`
	IdglaCliente  string             `xml:"tna:idglaCliente,omitempty"`
	Linking       ListaDePropiedades `xml:"tns:linking,omitempty"`
	FueLiberado   bool               `xml:"tna:fueLiberado,omitempty"`
	Referencia    string             `xml:"tna:referencia,omitempty"`
	Cuando        string             `xml:"tna:cuando,omitempty"`
	IdglaContrato string             `xml:"tna:idglaContrato,omitempty"`
}

func (t *PaqueteCompletado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PaqueteCompletado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *PaqueteCompletado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PaqueteCompletado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PasajeDeExcedenteAIngresada struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon46       `xml:"tna:topic"`
}

func (t *PasajeDeExcedenteAIngresada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PasajeDeExcedenteAIngresada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *PasajeDeExcedenteAIngresada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PasajeDeExcedenteAIngresada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type PasarACtaCteYEntregar struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon353  `xml:"tns:topic"`
}

func (t *PasarACtaCteYEntregar) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PasarACtaCteYEntregar
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *PasarACtaCteYEntregar) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PasarACtaCteYEntregar
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoAcondicionado struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon8    `xml:"tns:topic"`
}

func (t *PedidoAcondicionado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoAcondicionado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoAcondicionado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoAcondicionado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoAsignado struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon9    `xml:"tns:topic"`
}

func (t *PedidoAsignado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoAsignado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoAsignado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoAsignado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoCancelado struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon10   `xml:"tns:topic"`
}

func (t *PedidoCancelado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoCancelado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoCancelado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoCancelado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoComienzoAcondicionamiento struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon7    `xml:"tns:topic"`
}

func (t *PedidoComienzoAcondicionamiento) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoComienzoAcondicionamiento
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoComienzoAcondicionamiento) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoComienzoAcondicionamiento
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoComienzoControl struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      Topic     `xml:"tns:topic"`
}

func (t *PedidoComienzoControl) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoComienzoControl
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoComienzoControl) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoComienzoControl
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoComienzoDeTraza struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon5    `xml:"tns:topic"`
}

func (t *PedidoComienzoDeTraza) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoComienzoDeTraza
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoComienzoDeTraza) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoComienzoDeTraza
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoConPiezaLanzada struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon11   `xml:"tns:topic"`
}

func (t *PedidoConPiezaLanzada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoConPiezaLanzada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoConPiezaLanzada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoConPiezaLanzada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoControlado struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon3    `xml:"tns:topic"`
	NumeroDeEnvio              string    `xml:"tns:numeroDeEnvio,omitempty"`
}

func (t *PedidoControlado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoControlado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.NumeroDeEnvio.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoControlado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoControlado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoCreado struct {
	XMLNs                      string          `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time       `xml:"tna:timestamp"`
	Remitente                  string          `xml:"tna:remitente"`
	Destinatario               string          `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string          `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time       `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string          `xml:"tns:numeroDePedido"`
	Cuando                     string          `xml:"tns:cuando"`
	CodigoDeContratoInterno    string          `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string          `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string          `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string          `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string          `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string          `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string          `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon4          `xml:"tns:topic"`
	DatosPedido                PedidoDeAlmacen `xml:"pref:datosPedido,omitempty"`
	NumeroDeCliente            string          `xml:"tns:numeroDeCliente,omitempty"`
}

func (t *PedidoCreado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoCreado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.DatosPedido.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.NumeroDeCliente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoCreado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoCreado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoDeAlmacen struct {
	XMLNs           string               `xml:"xmlns:tns,attr,omitempty"`
	NumeroDePedido  string               `xml:"tns:numeroDePedido,omitempty"`
	EstadoDelPedido string               `xml:"tns:estadoDelPedido,omitempty"`
	Origen          LugarDeRetiroEntrega `xml:"tns:origen,omitempty"`
	Destino         LugarDeRetiroEntrega `xml:"tns:destino,omitempty"`
	FechaDelPedido  string               `xml:"tns:fechaDelPedido,omitempty"`
	Destinatario    DatosPersonales      `xml:"tns:destinatario,omitempty"`
	TipoDePedido    string               `xml:"tns:tipoDePedido,omitempty"`
}

func (t *PedidoDeAlmacen) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoDeAlmacen
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *PedidoDeAlmacen) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoDeAlmacen
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type PedidoDeCambioDeDestino struct {
	XMLNs         string               `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time            `xml:"tna:timestamp"`
	Remitente     string               `xml:"tna:remitente"`
	Destinatario  string               `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string               `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time            `xml:"tna:vencimiento,omitempty"`
	NumeroDeEnvio string               `xml:"tna:numeroDeEnvio,omitempty"`
	NuevoDestino  LugarDeRetiroEntrega `xml:"tns:nuevoDestino,omitempty"`
	Topic         _anon159             `xml:"tna:topic"`
}

func (t *PedidoDeCambioDeDestino) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoDeCambioDeDestino
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NuevoDestino.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *PedidoDeCambioDeDestino) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoDeCambioDeDestino
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoDeCancelacionDeOrdenDeEnvio struct {
	XMLNs                string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp            time.Time `xml:"tna:timestamp"`
	Remitente            string    `xml:"tna:remitente"`
	Destinatario         string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden        string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento          time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDeOrdenDeEnvio string    `xml:"tna:numeroDeOrdenDeEnvio,omitempty"`
	NumeroDeEnvio        string    `xml:"tna:numeroDeEnvio,omitempty"`
	Razon                string    `xml:"tna:razon,omitempty"`
	Topic                _anon155  `xml:"tna:topic"`
}

func (t *PedidoDeCancelacionDeOrdenDeEnvio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoDeCancelacionDeOrdenDeEnvio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *PedidoDeCancelacionDeOrdenDeEnvio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoDeCancelacionDeOrdenDeEnvio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoDeDestruccion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon78       `xml:"tna:topic"`
	SucursalDeDestruccion    DatosSucursal `xml:"tns:sucursalDeDestruccion"`
}

func (t *PedidoDeDestruccion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoDeDestruccion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalDeDestruccion.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *PedidoDeDestruccion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoDeDestruccion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type PedidoDeFacturacion struct {
	XMLNs                        string                 `xml:"xmlns:tns,attr,omitempty"`
	Destinatario                 string                 `xml:"tns:destinatario,omitempty"`
	NumeroDePrefactura           int                    `xml:"tns:numeroDePrefactura"`
	TipoDeDocumento              TipoDeDocumento        `xml:"tns:tipoDeDocumento,omitempty"`
	Envios                       ListaDeDetalleDeEnvios `xml:"tns:envios,omitempty"`
	CodigoDeClienteInterno       string                 `xml:"tns:codigoDeClienteInterno"`
	QuienFactura                 QuienFactura           `xml:"tns:quienFactura,omitempty"`
	Abonos                       ListaDeDetallesDeAbono `xml:"tns:abonos,omitempty"`
	ImporteTotal                 float64                `xml:"tns:importeTotal"`
	CantidadDeConceptosTarifados int                    `xml:"tns:cantidadDeConceptosTarifados,omitempty"`
}

func (t *PedidoDeFacturacion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoDeFacturacion
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *PedidoDeFacturacion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoDeFacturacion
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type PedidoDeSolicitudDeRescate struct {
	XMLNs                       string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                   time.Time     `xml:"tna:timestamp"`
	Remitente                   string        `xml:"tna:remitente"`
	Destinatario                string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden               string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                 time.Time     `xml:"tna:vencimiento,omitempty"`
	EsInterno                   bool          `xml:"tna:esInterno,omitempty"`
	SucursalDondeSeDebeRescatar DatosSucursal `xml:"tns:sucursalDondeSeDebeRescatar,omitempty"`
	Topic                       _anon162      `xml:"tna:topic"`
}

func (t *PedidoDeSolicitudDeRescate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoDeSolicitudDeRescate
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.SucursalDondeSeDebeRescatar.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *PedidoDeSolicitudDeRescate) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoDeSolicitudDeRescate
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoDeSolicitudDeRescateRechazado struct {
	XMLNs              string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time     `xml:"tna:timestamp"`
	Remitente          string        `xml:"tna:remitente"`
	Destinatario       string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time     `xml:"tna:vencimiento,omitempty"`
	SucursalSolicitada DatosSucursal `xml:"tns:sucursalSolicitada,omitempty"`
	Razon              string        `xml:"tna:razon,omitempty"`
	Topic              _anon163      `xml:"tna:topic"`
}

func (t *PedidoDeSolicitudDeRescateRechazado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoDeSolicitudDeRescateRechazado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.SucursalSolicitada.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *PedidoDeSolicitudDeRescateRechazado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoDeSolicitudDeRescateRechazado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoExpedidoCompleto struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon18   `xml:"tns:topic"`
}

func (t *PedidoExpedidoCompleto) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoExpedidoCompleto
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoExpedidoCompleto) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoExpedidoCompleto
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoLanzado struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon12   `xml:"tns:topic"`
}

func (t *PedidoLanzado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoLanzado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoLanzado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoLanzado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoNoSeAsigno struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon13   `xml:"tns:topic"`
}

func (t *PedidoNoSeAsigno) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoNoSeAsigno
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoNoSeAsigno) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoNoSeAsigno
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoParcialmenteAsignado struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon14   `xml:"tns:topic"`
}

func (t *PedidoParcialmenteAsignado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoParcialmenteAsignado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoParcialmenteAsignado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoParcialmenteAsignado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoParcialmentePreparado struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon15   `xml:"tns:topic"`
}

func (t *PedidoParcialmentePreparado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoParcialmentePreparado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoParcialmentePreparado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoParcialmentePreparado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoPreasignado struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon16   `xml:"tns:topic"`
}

func (t *PedidoPreasignado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoPreasignado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoPreasignado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoPreasignado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoPreparadoCompleto struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon17   `xml:"tns:topic"`
	NumeroRemito               string    `xml:"tns:numeroRemito,omitempty"`
	NumeroDeFactura            string    `xml:"tns:numeroDeFactura,omitempty"`
}

func (t *PedidoPreparadoCompleto) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoPreparadoCompleto
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.NumeroRemito.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.NumeroDeFactura.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoPreparadoCompleto) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoPreparadoCompleto
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type PedidoTrazado struct {
	XMLNs                      string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time `xml:"tna:timestamp"`
	Remitente                  string    `xml:"tna:remitente"`
	Destinatario               string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time `xml:"tna:vencimiento,omitempty"`
	NumeroDePedido             string    `xml:"tns:numeroDePedido"`
	Cuando                     string    `xml:"tns:cuando"`
	CodigoDeContratoInterno    string    `xml:"tns:codigoDeContratoInterno,omitempty"`
	EstadoDelPedido            string    `xml:"tns:estadoDelPedido"`
	CicloDelPedido             string    `xml:"tns:cicloDelPedido,omitempty"`
	IdentificadorUnicoPedido   string    `xml:"tns:identificadorUnicoPedido,omitempty"`
	CuentaCorriente            string    `xml:"tns:cuentaCorriente"`
	CodigoClienteInterno       string    `xml:"tns:codigoClienteInterno,omitempty"`
	IdentificadorUnicoDePedido string    `xml:"tns:identificadorUnicoDePedido,omitempty"`
	Topic                      _anon6    `xml:"tns:topic"`
}

func (t *PedidoTrazado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PedidoTrazado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.NumeroDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Cuando.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoDeContratoInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.EstadoDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CicloDelPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoPedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CuentaCorriente.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.CodigoClienteInterno.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.IdentificadorUnicoDePedido.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	layout.Topic.XMLNs = "http://integracion.andreani.com/eventosDeAlmacenes"
	return e.EncodeElement(layout, start)
}
func (t *PedidoTrazado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PedidoTrazado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type Pregunta struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
}

func (t *Pregunta) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Pregunta
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *Pregunta) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Pregunta
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type Propiedad struct {
	XMLNs            string             `xml:"xmlns:tns,attr,omitempty"`
	PropNamespace    string             `xml:"tns:propNamespace,omitempty"`
	Id               string             `xml:"tns:id,omitempty"`
	TipoDeDato       string             `xml:"tns:tipoDeDato,omitempty"`
	Valor            string             `xml:"tns:valor,omitempty"`
	Descripcion      string             `xml:"tns:descripcion,omitempty"`
	DatosAdicionales ListaDePropiedades `xml:"tns:datosAdicionales,omitempty"`
	EsObligatorio    bool               `xml:"tns:esObligatorio,omitempty"`
}

func (t *Propiedad) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Propiedad
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *Propiedad) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Propiedad
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

// May be one of Nothing, Distribution, Resend, Drop, Custody
type QueCiclo string

// May be one of undefined, ALSA, CASA
type QuienFactura string

// May be one of undefined, contratoExcluido
type Razon string

// Must be at least 1 items long
type RazonSocial string

type ReactivacionDeBolsin struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon85       `xml:"tna:topic"`
	SucursalOrigen           DatosSucursal `xml:"tns:sucursalOrigen"`
	SucursalDestino          DatosSucursal `xml:"tns:sucursalDestino"`
}

func (t *ReactivacionDeBolsin) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ReactivacionDeBolsin
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalOrigen.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalDestino.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ReactivacionDeBolsin) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ReactivacionDeBolsin
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RecepcionDeRetiro struct {
	XMLNs                   string                    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp               time.Time                 `xml:"tna:timestamp"`
	Remitente               string                    `xml:"tna:remitente"`
	Destinatario            string                    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden           string                    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento             time.Time                 `xml:"tna:vencimiento,omitempty"`
	QuienFactura            QuienFactura              `xml:"tna:quienFactura"`
	CodigoDeContratoInterno string                    `xml:"tna:codigoDeContratoInterno"`
	Cuando                  string                    `xml:"tna:cuando"`
	HojaDeRutaDeRetiro      string                    `xml:"tna:hojaDeRutaDeRetiro"`
	Motivo                  string                    `xml:"tna:motivo"`
	Topic                   _anon123                  `xml:"tna:topic"`
	EntidadesRetiradas      ListaDeEntidadesRetiradas `xml:"tns:entidadesRetiradas,omitempty"`
}

func (t *RecepcionDeRetiro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RecepcionDeRetiro
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.EntidadesRetiradas.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RecepcionDeRetiro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RecepcionDeRetiro
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type RecepcionEnSucursalDestino struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon73       `xml:"tna:topic"`
	SucursalDeRecepcion      DatosSucursal `xml:"tns:sucursalDeRecepcion,omitempty"`
	Motivo                   string        `xml:"tna:motivo,omitempty"`
	Submotivo                string        `xml:"tna:submotivo,omitempty"`
}

func (t *RecepcionEnSucursalDestino) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RecepcionEnSucursalDestino
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalDeRecepcion.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RecepcionEnSucursalDestino) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RecepcionEnSucursalDestino
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RecibidoEnCourier struct {
	XMLNs                    string             `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time          `xml:"tna:timestamp"`
	Remitente                string             `xml:"tna:remitente"`
	Destinatario             string             `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string             `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time          `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura       `xml:"tna:quienFactura"`
	CodigoDeEnvio            string             `xml:"tna:codigoDeEnvio"`
	Nombre                   string             `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time          `xml:"tna:cuando"`
	CodigoDeContratoInterno  string             `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string             `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string             `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string             `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string             `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string             `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal      `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Courier                  string             `xml:"tna:courier"`
	Topic                    _anon88            `xml:"tna:topic"`
	DatosAdicionales         ListaDePropiedades `xml:"tns:datosAdicionales,omitempty"`
}

func (t *RecibidoEnCourier) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RecibidoEnCourier
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.DatosAdicionales.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RecibidoEnCourier) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RecibidoEnCourier
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RectificacionDeMotivo struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon47       `xml:"tna:topic"`
	Motivo                   string        `xml:"tna:motivo,omitempty"`
	Submotivo                string        `xml:"tna:submotivo,omitempty"`
}

func (t *RectificacionDeMotivo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RectificacionDeMotivo
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RectificacionDeMotivo) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RectificacionDeMotivo
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RectificacionMobile struct {
	XMLNs                    string                        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time                     `xml:"tna:timestamp"`
	Remitente                string                        `xml:"tna:remitente"`
	Destinatario             string                        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string                        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time                     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura                  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string                        `xml:"tna:codigoDeEnvio"`
	Nombre                   string                        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time                     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string                        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string                        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string                        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string                        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string                        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string                        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal                 `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	FueEntregado             bool                          `xml:"tna:fueEntregado,omitempty"`
	Motivo                   string                        `xml:"tna:motivo,omitempty"`
	Submotivo                string                        `xml:"tna:submotivo,omitempty"`
	Distribuidor             DatosDistribuidor             `xml:"tns:distribuidor,omitempty"`
	Donde                    LugarDeRetiroEntrega          `xml:"tns:donde,omitempty"`
	EvidenciasDeVisita       ListaDePropiedadesAdicionales `xml:"tns:evidenciasDeVisita,omitempty"`
	Localizacion             GeoReferencia                 `xml:"tns:localizacion,omitempty"`
	Linking                  ListaDePropiedades            `xml:"tns:linking,omitempty"`
	Observaciones            ListaDeObjetos                `xml:"tns:observaciones,omitempty"`
	Topic                    _anon150                      `xml:"tna:topic"`
}

func (t *RectificacionMobile) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RectificacionMobile
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Distribuidor.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Donde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EvidenciasDeVisita.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Localizacion.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Observaciones.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RectificacionMobile) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RectificacionMobile
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ReembolsoCobradoParcial struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon248      `xml:"tns:topic"`
}

func (t *ReembolsoCobradoParcial) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ReembolsoCobradoParcial
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ReembolsoCobradoParcial) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ReembolsoCobradoParcial
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type Reenvio struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon48       `xml:"tna:topic"`
	EsInterno                bool          `xml:"tna:esInterno"`
}

func (t *Reenvio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Reenvio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *Reenvio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Reenvio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RemisionDeEnvio struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	NuevaSucursalDestino     DatosSucursal `xml:"tns:nuevaSucursalDestino,omitempty"`
	Topic                    _anon93       `xml:"tna:topic"`
	EsControlado             bool          `xml:"tna:esControlado,omitempty"`
}

func (t *RemisionDeEnvio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RemisionDeEnvio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.NuevaSucursalDestino.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RemisionDeEnvio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RemisionDeEnvio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RemitenteDesconoceRetiro struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon341  `xml:"tns:topic"`
}

func (t *RemitenteDesconoceRetiro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RemitenteDesconoceRetiro
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *RemitenteDesconoceRetiro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RemitenteDesconoceRetiro
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type RemitenteInformaNuevoDomicilio struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon347  `xml:"tns:topic"`
}

func (t *RemitenteInformaNuevoDomicilio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RemitenteInformaNuevoDomicilio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *RemitenteInformaNuevoDomicilio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RemitenteInformaNuevoDomicilio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type RemitenteSolicitaNuevaVisita struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon348  `xml:"tns:topic"`
}

func (t *RemitenteSolicitaNuevaVisita) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RemitenteSolicitaNuevaVisita
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *RemitenteSolicitaNuevaVisita) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RemitenteSolicitaNuevaVisita
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type RemitenteSolicitaRetenerMercaderia struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon249      `xml:"tns:topic"`
}

func (t *RemitenteSolicitaRetenerMercaderia) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RemitenteSolicitaRetenerMercaderia
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RemitenteSolicitaRetenerMercaderia) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RemitenteSolicitaRetenerMercaderia
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RemitoDemorado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon250      `xml:"tns:topic"`
}

func (t *RemitoDemorado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RemitoDemorado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RemitoDemorado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RemitoDemorado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RemitoDigitalizado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon101      `xml:"tna:topic"`
	UrlDocumento             string        `xml:"tna:urlDocumento,omitempty"`
	MimeType                 string        `xml:"tna:mimeType,omitempty"`
}

func (t *RemitoDigitalizado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RemitoDigitalizado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RemitoDigitalizado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RemitoDigitalizado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RemitoDigitalizadoEnProveedor struct {
	XMLNs                     string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                 time.Time     `xml:"tna:timestamp"`
	Remitente                 string        `xml:"tna:remitente"`
	Destinatario              string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden             string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento               time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura              QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio             string        `xml:"tna:codigoDeEnvio"`
	Nombre                    string        `xml:"tna:nombre,omitempty"`
	Cuando                    time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno   string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio            string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio             string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                  string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion       string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario                string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento  DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	NombreDelProveedor        string        `xml:"tna:nombreDelProveedor"`
	CodigoDeEnvioDelProveedor string        `xml:"tna:codigoDeEnvioDelProveedor,omitempty"`
	Topic                     _anon158      `xml:"tna:topic"`
}

func (t *RemitoDigitalizadoEnProveedor) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RemitoDigitalizadoEnProveedor
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RemitoDigitalizadoEnProveedor) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RemitoDigitalizadoEnProveedor
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RemitoImpreso struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon251      `xml:"tns:topic"`
}

func (t *RemitoImpreso) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RemitoImpreso
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RemitoImpreso) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RemitoImpreso
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RemitoSuspendido struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon252      `xml:"tns:topic"`
}

func (t *RemitoSuspendido) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RemitoSuspendido
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RemitoSuspendido) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RemitoSuspendido
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RendicionConRemito struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon49       `xml:"tna:topic"`
}

func (t *RendicionConRemito) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RendicionConRemito
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RendicionConRemito) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RendicionConRemito
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RendicionDigital struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon50       `xml:"tna:topic"`
	EsAutomatica             string        `xml:"tna:esAutomatica"`
}

func (t *RendicionDigital) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RendicionDigital
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RendicionDigital) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RendicionDigital
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RendicionLogica struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon51       `xml:"tna:topic"`
	EsAutomatica             bool          `xml:"tna:esAutomatica"`
	EsEnBaseArchivo          bool          `xml:"tna:esEnBaseArchivo"`
}

func (t *RendicionLogica) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RendicionLogica
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RendicionLogica) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RendicionLogica
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RepactarFechaEntrega struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon350  `xml:"tns:topic"`
}

func (t *RepactarFechaEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RepactarFechaEntrega
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *RepactarFechaEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RepactarFechaEntrega
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type ReprogramarRetiro struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon363  `xml:"tns:topic"`
}

func (t *ReprogramarRetiro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ReprogramarRetiro
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *ReprogramarRetiro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ReprogramarRetiro
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type Rescate struct {
	XMLNs                      string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                  time.Time     `xml:"tna:timestamp"`
	Remitente                  string        `xml:"tna:remitente"`
	Destinatario               string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden              string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento                time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura               QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio              string        `xml:"tna:codigoDeEnvio"`
	Nombre                     string        `xml:"tna:nombre,omitempty"`
	Cuando                     time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno    string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio             string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio              string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                   string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion        string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario                 string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento   DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                      _anon75       `xml:"tna:topic"`
	NumeroDeInformeDeRendicion string        `xml:"tna:numeroDeInformeDeRendicion,omitempty"`
}

func (t *Rescate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Rescate
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *Rescate) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Rescate
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type Respuesta struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
}

func (t *Respuesta) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Respuesta
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *Respuesta) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Respuesta
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaCadenaDeFrioSinFrecuencia struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon280      `xml:"tns:topic"`
}

func (t *RespuestaCadenaDeFrioSinFrecuencia) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaCadenaDeFrioSinFrecuencia
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaCadenaDeFrioSinFrecuencia) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaCadenaDeFrioSinFrecuencia
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaClienteInformaCambioDomicilio struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon281      `xml:"tns:topic"`
}

func (t *RespuestaClienteInformaCambioDomicilio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaClienteInformaCambioDomicilio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaClienteInformaCambioDomicilio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaClienteInformaCambioDomicilio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaClienteInformaNoEsProductoSolicitado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon282      `xml:"tns:topic"`
}

func (t *RespuestaClienteInformaNoEsProductoSolicitado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaClienteInformaNoEsProductoSolicitado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaClienteInformaNoEsProductoSolicitado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaClienteInformaNoEsProductoSolicitado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaClienteInformaSinCheques struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon283      `xml:"tns:topic"`
}

func (t *RespuestaClienteInformaSinCheques) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaClienteInformaSinCheques
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaClienteInformaSinCheques) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaClienteInformaSinCheques
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaClienteSolicitaRepactarVisita struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon284      `xml:"tns:topic"`
}

func (t *RespuestaClienteSolicitaRepactarVisita) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaClienteSolicitaRepactarVisita
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaClienteSolicitaRepactarVisita) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaClienteSolicitaRepactarVisita
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaContenidoRotoEpaqueSano struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon285      `xml:"tns:topic"`
}

func (t *RespuestaContenidoRotoEpaqueSano) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaContenidoRotoEpaqueSano
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaContenidoRotoEpaqueSano) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaContenidoRotoEpaqueSano
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaDevolucionParcialCortoVto struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon286      `xml:"tns:topic"`
}

func (t *RespuestaDevolucionParcialCortoVto) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaDevolucionParcialCortoVto
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaDevolucionParcialCortoVto) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaDevolucionParcialCortoVto
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaDevolucionRecibidaPlazaInterior struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon287      `xml:"tns:topic"`
}

func (t *RespuestaDevolucionRecibidaPlazaInterior) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaDevolucionRecibidaPlazaInterior
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaDevolucionRecibidaPlazaInterior) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaDevolucionRecibidaPlazaInterior
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaEnvioConContingenciaSanitaria struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon317      `xml:"tns:topic"`
}

func (t *RespuestaEnvioConContingenciaSanitaria) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaEnvioConContingenciaSanitaria
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaEnvioConContingenciaSanitaria) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaEnvioConContingenciaSanitaria
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaEnvioConDocumentacionFaltante struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon288      `xml:"tns:topic"`
}

func (t *RespuestaEnvioConDocumentacionFaltante) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaEnvioConDocumentacionFaltante
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaEnvioConDocumentacionFaltante) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaEnvioConDocumentacionFaltante
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaEnvioConEntegaParcial struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon289      `xml:"tns:topic"`
}

func (t *RespuestaEnvioConEntegaParcial) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaEnvioConEntegaParcial
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaEnvioConEntegaParcial) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaEnvioConEntegaParcial
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaEnvioConGestionTelefonica struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon290      `xml:"tns:topic"`
}

func (t *RespuestaEnvioConGestionTelefonica) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaEnvioConGestionTelefonica
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaEnvioConGestionTelefonica) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaEnvioConGestionTelefonica
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaEnvioConSolicitudDeRetorno struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon291      `xml:"tns:topic"`
}

func (t *RespuestaEnvioConSolicitudDeRetorno) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaEnvioConSolicitudDeRetorno
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaEnvioConSolicitudDeRetorno) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaEnvioConSolicitudDeRetorno
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaEnvioEnCoordinacionEntregaCAC struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon292      `xml:"tns:topic"`
}

func (t *RespuestaEnvioEnCoordinacionEntregaCAC) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaEnvioEnCoordinacionEntregaCAC
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaEnvioEnCoordinacionEntregaCAC) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaEnvioEnCoordinacionEntregaCAC
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaEnvioSeRetiraDeSucursal struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon293      `xml:"tns:topic"`
}

func (t *RespuestaEnvioSeRetiraDeSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaEnvioSeRetiraDeSucursal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaEnvioSeRetiraDeSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaEnvioSeRetiraDeSucursal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaEnvioSinTurnoDeSucursal struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon294      `xml:"tns:topic"`
}

func (t *RespuestaEnvioSinTurnoDeSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaEnvioSinTurnoDeSucursal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaEnvioSinTurnoDeSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaEnvioSinTurnoDeSucursal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaFaltaDocumentacionIIBB struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon295      `xml:"tns:topic"`
}

func (t *RespuestaFaltaDocumentacionIIBB) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaFaltaDocumentacionIIBB
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaFaltaDocumentacionIIBB) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaFaltaDocumentacionIIBB
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaFaltaOrdenDeCompra struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon298      `xml:"tns:topic"`
}

func (t *RespuestaFaltaOrdenDeCompra) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaFaltaOrdenDeCompra
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaFaltaOrdenDeCompra) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaFaltaOrdenDeCompra
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaFaltaRemito struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon299      `xml:"tns:topic"`
}

func (t *RespuestaFaltaRemito) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaFaltaRemito
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaFaltaRemito) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaFaltaRemito
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaFaltanBultos struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon296      `xml:"tns:topic"`
}

func (t *RespuestaFaltanBultos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaFaltanBultos
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaFaltanBultos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaFaltanBultos
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaFaltanBultosYRemitos struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon297      `xml:"tns:topic"`
}

func (t *RespuestaFaltanBultosYRemitos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaFaltanBultosYRemitos
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaFaltanBultosYRemitos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaFaltanBultosYRemitos
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaFueraDeHorarioDeRecepcion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon300      `xml:"tns:topic"`
}

func (t *RespuestaFueraDeHorarioDeRecepcion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaFueraDeHorarioDeRecepcion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaFueraDeHorarioDeRecepcion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaFueraDeHorarioDeRecepcion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaIngresoDeConservadoraACamara struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon301      `xml:"tns:topic"`
}

func (t *RespuestaIngresoDeConservadoraACamara) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaIngresoDeConservadoraACamara
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaIngresoDeConservadoraACamara) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaIngresoDeConservadoraACamara
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaInversionEnBultoCerrado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon302      `xml:"tns:topic"`
}

func (t *RespuestaInversionEnBultoCerrado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaInversionEnBultoCerrado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaInversionEnBultoCerrado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaInversionEnBultoCerrado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaNoSonCondicionesPactadas struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon303      `xml:"tns:topic"`
}

func (t *RespuestaNoSonCondicionesPactadas) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaNoSonCondicionesPactadas
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaNoSonCondicionesPactadas) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaNoSonCondicionesPactadas
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaRoturaParcial struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon304      `xml:"tns:topic"`
}

func (t *RespuestaRoturaParcial) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaRoturaParcial
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaRoturaParcial) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaRoturaParcial
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaRoturaTotal struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon305      `xml:"tns:topic"`
}

func (t *RespuestaRoturaTotal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaRoturaTotal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaRoturaTotal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaRoturaTotal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaSePierdeTurnoDeEntrega struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon306      `xml:"tns:topic"`
}

func (t *RespuestaSePierdeTurnoDeEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaSePierdeTurnoDeEntrega
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaSePierdeTurnoDeEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaSePierdeTurnoDeEntrega
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaSinFrecuenciaDeViaje struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon307      `xml:"tns:topic"`
}

func (t *RespuestaSinFrecuenciaDeViaje) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaSinFrecuenciaDeViaje
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaSinFrecuenciaDeViaje) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaSinFrecuenciaDeViaje
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaSobraRemito struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon310      `xml:"tns:topic"`
}

func (t *RespuestaSobraRemito) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaSobraRemito
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaSobraRemito) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaSobraRemito
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaSobranBultos struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon308      `xml:"tns:topic"`
}

func (t *RespuestaSobranBultos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaSobranBultos
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaSobranBultos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaSobranBultos
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaSobranBultosYRemitos struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon309      `xml:"tns:topic"`
}

func (t *RespuestaSobranBultosYRemitos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaSobranBultosYRemitos
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaSobranBultosYRemitos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaSobranBultosYRemitos
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaSolicitudDeRetorno struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon311      `xml:"tns:topic"`
}

func (t *RespuestaSolicitudDeRetorno) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaSolicitudDeRetorno
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaSolicitudDeRetorno) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaSolicitudDeRetorno
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaUnidadesSobrantesBultosCerrados struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon312      `xml:"tns:topic"`
}

func (t *RespuestaUnidadesSobrantesBultosCerrados) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaUnidadesSobrantesBultosCerrados
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaUnidadesSobrantesBultosCerrados) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaUnidadesSobrantesBultosCerrados
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaVerificarDomicilio struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon313      `xml:"tns:topic"`
}

func (t *RespuestaVerificarDomicilio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaVerificarDomicilio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaVerificarDomicilio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaVerificarDomicilio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaVisita struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon314      `xml:"tns:topic"`
}

func (t *RespuestaVisita) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaVisita
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaVisita) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaVisita
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RespuestaZonaDeRiesgo struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	EsRespuestaDe            string        `xml:"tns:esRespuestaDe,omitempty"`
	Motivo                   string        `xml:"tns:motivo,omitempty"`
	Submotivo                string        `xml:"tns:submotivo,omitempty"`
	Topic                    _anon315      `xml:"tns:topic"`
}

func (t *RespuestaZonaDeRiesgo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RespuestaZonaDeRiesgo
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EsRespuestaDe.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Motivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Submotivo.XMLNs = "http://integracion.andreani.com/incidencias"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RespuestaZonaDeRiesgo) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RespuestaZonaDeRiesgo
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RetiroNoRealizado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon110      `xml:"tna:topic"`
}

func (t *RetiroNoRealizado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RetiroNoRealizado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RetiroNoRealizado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RetiroNoRealizado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RetiroProcesado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon111      `xml:"tna:topic"`
	NuevoNumeroDeEnvio       string        `xml:"tna:nuevoNumeroDeEnvio,omitempty"`
}

func (t *RetiroProcesado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RetiroProcesado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RetiroProcesado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RetiroProcesado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RetiroProcesoFinalizado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon117      `xml:"tna:topic"`
}

func (t *RetiroProcesoFinalizado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RetiroProcesoFinalizado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *RetiroProcesoFinalizado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RetiroProcesoFinalizado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RetiroRechazado struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon253      `xml:"tns:topic"`
}

func (t *RetiroRechazado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RetiroRechazado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RetiroRechazado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RetiroRechazado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RoturaDeUnidadDeTransporte struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon254      `xml:"tns:topic"`
}

func (t *RoturaDeUnidadDeTransporte) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RoturaDeUnidadDeTransporte
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RoturaDeUnidadDeTransporte) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RoturaDeUnidadDeTransporte
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RoturaParcial struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon255      `xml:"tns:topic"`
}

func (t *RoturaParcial) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RoturaParcial
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RoturaParcial) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RoturaParcial
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type RoturaTotal struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon256      `xml:"tns:topic"`
}

func (t *RoturaTotal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T RoturaTotal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *RoturaTotal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T RoturaTotal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SeCargaronDatosAdicionales struct {
	XMLNs         string       `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time    `xml:"tna:timestamp"`
	Remitente     string       `xml:"tna:remitente"`
	Destinatario  string       `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string       `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time    `xml:"tna:vencimiento,omitempty"`
	QuienFactura  QuienFactura `xml:"tna:quienFactura"`
	Topic         _anon31      `xml:"tna:topic"`
}

func (t *SeCargaronDatosAdicionales) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SeCargaronDatosAdicionales
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	return e.EncodeElement(layout, start)
}
func (t *SeCargaronDatosAdicionales) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SeCargaronDatosAdicionales
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type SeDectectoDemoraOperativa struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon257      `xml:"tns:topic"`
}

func (t *SeDectectoDemoraOperativa) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SeDectectoDemoraOperativa
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SeDectectoDemoraOperativa) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SeDectectoDemoraOperativa
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SeDectectoDemoraViaje struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon258      `xml:"tns:topic"`
}

func (t *SeDectectoDemoraViaje) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SeDectectoDemoraViaje
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SeDectectoDemoraViaje) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SeDectectoDemoraViaje
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SeEnviaNotificacionADestinatario struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon259      `xml:"tns:topic"`
}

func (t *SeEnviaNotificacionADestinatario) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SeEnviaNotificacionADestinatario
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SeEnviaNotificacionADestinatario) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SeEnviaNotificacionADestinatario
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SePierdeTurnoDeEntrega struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon260      `xml:"tns:topic"`
}

func (t *SePierdeTurnoDeEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SePierdeTurnoDeEntrega
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SePierdeTurnoDeEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SePierdeTurnoDeEntrega
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SeProduceCasoFuerzaMayor struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon261      `xml:"tns:topic"`
}

func (t *SeProduceCasoFuerzaMayor) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SeProduceCasoFuerzaMayor
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SeProduceCasoFuerzaMayor) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SeProduceCasoFuerzaMayor
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SeProduceNovedadEnRuta struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon262      `xml:"tns:topic"`
}

func (t *SeProduceNovedadEnRuta) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SeProduceNovedadEnRuta
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SeProduceNovedadEnRuta) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SeProduceNovedadEnRuta
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SeProduceNovedadEnSucursal struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon263      `xml:"tns:topic"`
}

func (t *SeProduceNovedadEnSucursal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SeProduceNovedadEnSucursal
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SeProduceNovedadEnSucursal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SeProduceNovedadEnSucursal
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SeRealizoCierreConservadora struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon264      `xml:"tns:topic"`
}

func (t *SeRealizoCierreConservadora) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SeRealizoCierreConservadora
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SeRealizoCierreConservadora) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SeRealizoCierreConservadora
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SeRechazaChequeErrorConfeccion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon265      `xml:"tns:topic"`
}

func (t *SeRechazaChequeErrorConfeccion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SeRechazaChequeErrorConfeccion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SeRechazaChequeErrorConfeccion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SeRechazaChequeErrorConfeccion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SeRechazaRemito struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon266      `xml:"tns:topic"`
}

func (t *SeRechazaRemito) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SeRechazaRemito
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SeRechazaRemito) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SeRechazaRemito
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SeReemplazaRefrigeranteConservadora struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon267      `xml:"tns:topic"`
}

func (t *SeReemplazaRefrigeranteConservadora) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SeReemplazaRefrigeranteConservadora
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SeReemplazaRefrigeranteConservadora) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SeReemplazaRefrigeranteConservadora
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SeRetiraEnvio struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon357  `xml:"tns:topic"`
}

func (t *SeRetiraEnvio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SeRetiraEnvio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *SeRetiraEnvio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SeRetiraEnvio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

// Must be at least 1 items long
type Segmento string

type ShotCerrado struct {
	XMLNs         string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time      `xml:"tna:timestamp"`
	Remitente     string         `xml:"tna:remitente"`
	Destinatario  string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time      `xml:"tna:vencimiento,omitempty"`
	Envio         DetalleDeEnvio `xml:"tns:envio"`
	Topic         _anon59        `xml:"tna:topic"`
}

func (t *ShotCerrado) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ShotCerrado
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ShotCerrado) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ShotCerrado
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type SinFrecuenciaDeViaje struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon268      `xml:"tns:topic"`
}

func (t *SinFrecuenciaDeViaje) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SinFrecuenciaDeViaje
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SinFrecuenciaDeViaje) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SinFrecuenciaDeViaje
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SinStockParaDespachar struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon269      `xml:"tns:topic"`
}

func (t *SinStockParaDespachar) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SinStockParaDespachar
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SinStockParaDespachar) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SinStockParaDespachar
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SinTurnoDeEntrega struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon321  `xml:"tns:topic"`
}

func (t *SinTurnoDeEntrega) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SinTurnoDeEntrega
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *SinTurnoDeEntrega) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SinTurnoDeEntrega
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type Siniestro struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	NumeroDeEnvioDelCliente  string        `xml:"tna:numeroDeEnvioDelCliente"`
	Topic                    _anon68       `xml:"tna:topic"`
	Motivo                   string        `xml:"tna:motivo,omitempty"`
	Submotivo                string        `xml:"tna:submotivo,omitempty"`
}

func (t *Siniestro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Siniestro
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *Siniestro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Siniestro
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SobraRemito struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon272      `xml:"tns:topic"`
}

func (t *SobraRemito) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SobraRemito
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SobraRemito) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SobraRemito
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SobranBultos struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon270      `xml:"tns:topic"`
}

func (t *SobranBultos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SobranBultos
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SobranBultos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SobranBultos
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SobranBultosYRemitos struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon271      `xml:"tns:topic"`
}

func (t *SobranBultosYRemitos) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SobranBultosYRemitos
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *SobranBultosYRemitos) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SobranBultosYRemitos
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type SolicitarNuevaVisita struct {
	XMLNs          string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp      time.Time `xml:"tna:timestamp"`
	Remitente      string    `xml:"tna:remitente"`
	Destinatario   string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden  string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento    time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha          string    `xml:"tns:fecha,omitempty"`
	RespondeA      string    `xml:"tns:respondeA,omitempty"`
	Comentario     string    `xml:"tns:comentario,omitempty"`
	IdNovedad      string    `xml:"tns:idNovedad,omitempty"`
	CierraPregunta bool      `xml:"tns:cierraPregunta,omitempty"`
	EsParaCliente  bool      `xml:"tns:esParaCliente,omitempty"`
	Topic          _anon355  `xml:"tns:topic"`
}

func (t *SolicitarNuevaVisita) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SolicitarNuevaVisita
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.RespondeA.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.CierraPregunta.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/respuestas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/respuestas"
	return e.EncodeElement(layout, start)
}
func (t *SolicitarNuevaVisita) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SolicitarNuevaVisita
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type SolicitudDeFacturacion struct {
	XMLNs         string              `xml:"xmlns:tna,attr,omitempty"`
	Timestamp     time.Time           `xml:"tna:timestamp"`
	Remitente     string              `xml:"tna:remitente"`
	Destinatario  string              `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden string              `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento   time.Time           `xml:"tna:vencimiento,omitempty"`
	Topic         _anon22             `xml:"tna:topic"`
	Pedido        PedidoDeFacturacion `xml:"tns:pedido"`
}

func (t *SolicitudDeFacturacion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SolicitudDeFacturacion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Pedido.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *SolicitudDeFacturacion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SolicitudDeFacturacion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type SolicitudDeRescate struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon52       `xml:"tna:topic"`
	EsInterno                bool          `xml:"tna:esInterno,omitempty"`
	SucursalDondeSeRescata   DatosSucursal `xml:"tns:sucursalDondeSeRescata,omitempty"`
}

func (t *SolicitudDeRescate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T SolicitudDeRescate
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.SucursalDondeSeRescata.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *SolicitudDeRescate) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T SolicitudDeRescate
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type Telefono struct {
	XMLNs  string `xml:"xmlns:tns,attr,omitempty"`
	Tipo   Tipo   `xml:"tns:tipo"`
	Numero string `xml:"tns:numero"`
}

func (t *Telefono) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Telefono
	var layout struct{ *T }
	layout.T = (*T)(t)
	return e.EncodeElement(layout, start)
}
func (t *Telefono) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Telefono
	var overlay struct{ *T }
	overlay.T = (*T)(t)
	return d.DecodeElement(&overlay, &start)
}

type TelefonoDeContactoErroneo struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon330  `xml:"tns:topic"`
}

func (t *TelefonoDeContactoErroneo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T TelefonoDeContactoErroneo
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *TelefonoDeContactoErroneo) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TelefonoDeContactoErroneo
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

// May be one of trabajo, celular, casa, otro
type Tipo string

// May be one of undefined, ordenDeVenta, ordenDeDevolucion
type TipoDeDocumento string

// May be one of undefined, 86, 80, 83, 96, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 85, 87, 89, 90, 94, 99
type TipoDeEntidadFiscal string

// May be one of undefined, distribucion, deliveryWindow
type TipoDeEntrega string

type TitularAusenteEnDomicilio struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon340  `xml:"tns:topic"`
}

func (t *TitularAusenteEnDomicilio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T TitularAusenteEnDomicilio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *TitularAusenteEnDomicilio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TitularAusenteEnDomicilio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

// May be one of Envios/Respuesta/GestionarEnvio
type Topic string

func (x *Topic) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/GestionarEnvio"), nil
}

type TrazaAltaDeEnvio struct {
	XMLNs                    string         `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time      `xml:"tna:timestamp"`
	Remitente                string         `xml:"tna:remitente"`
	Destinatario             string         `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string         `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time      `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura   `xml:"tna:quienFactura"`
	CodigoDeEnvio            string         `xml:"tna:codigoDeEnvio"`
	Nombre                   string         `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time      `xml:"tna:cuando"`
	CodigoDeContratoInterno  string         `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string         `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string         `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string         `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string         `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string         `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal  `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Envio                    DetalleDeEnvio `xml:"tns:envio"`
	Contrato                 Contrato       `xml:"tns:contrato"`
}

func (t *TrazaAltaDeEnvio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T TrazaAltaDeEnvio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Envio.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Contrato.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *TrazaAltaDeEnvio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TrazaAltaDeEnvio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type TrazabilidadFarmaConDiscrepancia struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon273      `xml:"tns:topic"`
}

func (t *TrazabilidadFarmaConDiscrepancia) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T TrazabilidadFarmaConDiscrepancia
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *TrazabilidadFarmaConDiscrepancia) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TrazabilidadFarmaConDiscrepancia
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type TrazabilidadFarmaEnGestion struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon274      `xml:"tns:topic"`
}

func (t *TrazabilidadFarmaEnGestion) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T TrazabilidadFarmaEnGestion
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *TrazabilidadFarmaEnGestion) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T TrazabilidadFarmaEnGestion
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type UnidadDeTransporteDemorada struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon275      `xml:"tns:topic"`
}

func (t *UnidadDeTransporteDemorada) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T UnidadDeTransporteDemorada
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *UnidadDeTransporteDemorada) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T UnidadDeTransporteDemorada
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type UnidadesFaltantesBultosCerrados struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon276      `xml:"tns:topic"`
}

func (t *UnidadesFaltantesBultosCerrados) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T UnidadesFaltantesBultosCerrados
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *UnidadesFaltantesBultosCerrados) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T UnidadesFaltantesBultosCerrados
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type UnidadesSobrantesBultosCerrados struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon277      `xml:"tns:topic"`
}

func (t *UnidadesSobrantesBultosCerrados) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T UnidadesSobrantesBultosCerrados
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *UnidadesSobrantesBultosCerrados) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T UnidadesSobrantesBultosCerrados
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ValoresRendidosAlRemitente struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon153      `xml:"tna:topic"`
}

func (t *ValoresRendidosAlRemitente) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ValoresRendidosAlRemitente
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *ValoresRendidosAlRemitente) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ValoresRendidosAlRemitente
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type VerificadoDeImagen struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon53       `xml:"tna:topic"`
	EsResultadoCorrecto      bool          `xml:"tna:esResultadoCorrecto"`
}

func (t *VerificadoDeImagen) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T VerificadoDeImagen
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *VerificadoDeImagen) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T VerificadoDeImagen
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type VerificarDomicilio struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon278      `xml:"tns:topic"`
}

func (t *VerificarDomicilio) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T VerificarDomicilio
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *VerificarDomicilio) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T VerificarDomicilio
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type VerificarDomicilioDestinatario struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              Topic     `xml:"tns:topic"`
}

func (t *VerificarDomicilioDestinatario) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T VerificarDomicilioDestinatario
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *VerificarDomicilioDestinatario) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T VerificarDomicilioDestinatario
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type VerificarDomicilioRetiro struct {
	XMLNs              string    `xml:"xmlns:tna,attr,omitempty"`
	Timestamp          time.Time `xml:"tna:timestamp"`
	Remitente          string    `xml:"tna:remitente"`
	Destinatario       string    `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden      string    `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento        time.Time `xml:"tna:vencimiento,omitempty"`
	Fecha              string    `xml:"tns:fecha,omitempty"`
	Comentario         string    `xml:"tns:comentario,omitempty"`
	IdNovedad          string    `xml:"tns:idNovedad,omitempty"`
	PosiblesRespuestas string    `xml:"tns:posiblesRespuestas,omitempty"`
	EsParaCliente      bool      `xml:"tns:esParaCliente,omitempty"`
	Topic              _anon342  `xml:"tns:topic"`
}

func (t *VerificarDomicilioRetiro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T VerificarDomicilioRetiro
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Fecha.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Comentario.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.IdNovedad.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.PosiblesRespuestas.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.EsParaCliente.XMLNs = "http://integracion.andreani.com/preguntas"
	layout.Topic.XMLNs = "http://integracion.andreani.com/preguntas"
	return e.EncodeElement(layout, start)
}
func (t *VerificarDomicilioRetiro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T VerificarDomicilioRetiro
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	return d.DecodeElement(&overlay, &start)
}

type Visita struct {
	XMLNs                    string               `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time            `xml:"tna:timestamp"`
	Remitente                string               `xml:"tna:remitente"`
	Destinatario             string               `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string               `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time            `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura         `xml:"tna:quienFactura"`
	CodigoDeEnvio            string               `xml:"tna:codigoDeEnvio"`
	Nombre                   string               `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time            `xml:"tna:cuando"`
	CodigoDeContratoInterno  string               `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string               `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string               `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string               `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string               `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string               `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal        `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon54              `xml:"tna:topic"`
	Motivo                   string               `xml:"tna:motivo,omitempty"`
	Submotivo                string               `xml:"tna:submotivo,omitempty"`
	Distribuidor             DatosDistribuidor    `xml:"tns:distribuidor,omitempty"`
	Donde                    LugarDeRetiroEntrega `xml:"tns:donde,omitempty"`
	DatosAdicionales         ListaDePropiedades   `xml:"tns:datosAdicionales,omitempty"`
}

func (t *Visita) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Visita
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Distribuidor.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Donde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.DatosAdicionales.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *Visita) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Visita
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type VisitaMobile struct {
	XMLNs                    string                        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time                     `xml:"tna:timestamp"`
	Remitente                string                        `xml:"tna:remitente"`
	Destinatario             string                        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string                        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time                     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura                  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string                        `xml:"tna:codigoDeEnvio"`
	Nombre                   string                        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time                     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string                        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string                        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string                        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string                        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string                        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string                        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal                 `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	FueEntregado             bool                          `xml:"tna:fueEntregado,omitempty"`
	Motivo                   string                        `xml:"tna:motivo,omitempty"`
	Submotivo                string                        `xml:"tna:submotivo,omitempty"`
	Distribuidor             DatosDistribuidor             `xml:"tns:distribuidor,omitempty"`
	Donde                    LugarDeRetiroEntrega          `xml:"tns:donde,omitempty"`
	EvidenciasDeVisita       ListaDePropiedadesAdicionales `xml:"tns:evidenciasDeVisita,omitempty"`
	Localizacion             GeoReferencia                 `xml:"tns:localizacion,omitempty"`
	Linking                  ListaDePropiedades            `xml:"tns:linking,omitempty"`
	Observaciones            ListaDeObjetos                `xml:"tns:observaciones,omitempty"`
	Topic                    _anon55                       `xml:"tna:topic"`
}

func (t *VisitaMobile) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T VisitaMobile
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Distribuidor.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Donde.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.EvidenciasDeVisita.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Localizacion.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Linking.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Observaciones.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	return e.EncodeElement(layout, start)
}
func (t *VisitaMobile) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T VisitaMobile
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

type ZonaDeRiesgo struct {
	XMLNs                    string        `xml:"xmlns:tna,attr,omitempty"`
	Timestamp                time.Time     `xml:"tna:timestamp"`
	Remitente                string        `xml:"tna:remitente"`
	Destinatario             string        `xml:"tna:destinatario,omitempty"`
	NumeroDeOrden            string        `xml:"tna:numeroDeOrden,omitempty"`
	Vencimiento              time.Time     `xml:"tna:vencimiento,omitempty"`
	QuienFactura             QuienFactura  `xml:"tna:quienFactura"`
	CodigoDeEnvio            string        `xml:"tna:codigoDeEnvio"`
	Nombre                   string        `xml:"tna:nombre,omitempty"`
	Cuando                   time.Time     `xml:"tna:cuando"`
	CodigoDeContratoInterno  string        `xml:"tna:codigoDeContratoInterno"`
	EstadoDelEnvio           string        `xml:"tna:estadoDelEnvio,omitempty"`
	CicloDelEnvio            string        `xml:"tna:cicloDelEnvio,omitempty"`
	Operador                 string        `xml:"tna:operador,omitempty"`
	EstadoDeLaRendicion      string        `xml:"tna:estadoDeLaRendicion,omitempty"`
	Comentario               string        `xml:"tna:comentario,omitempty"`
	SucursalAsociadaAlEvento DatosSucursal `xml:"tns:sucursalAsociadaAlEvento,omitempty"`
	Topic                    _anon279      `xml:"tns:topic"`
}

func (t *ZonaDeRiesgo) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ZonaDeRiesgo
	var layout struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	layout.T = (*T)(t)
	layout.Timestamp = (*xsdDate)(&layout.T.Timestamp)
	layout.Vencimiento = (*xsdDate)(&layout.T.Vencimiento)
	layout.Cuando = (*xsdDate)(&layout.T.Cuando)
	layout.SucursalAsociadaAlEvento.XMLNs = "http://integracion.andreani.com/datosDeReferencia/"
	layout.Topic.XMLNs = "http://integracion.andreani.com/incidencias"
	return e.EncodeElement(layout, start)
}
func (t *ZonaDeRiesgo) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ZonaDeRiesgo
	var overlay struct {
		*T
		Timestamp   *xsdDate `xml:"tna:timestamp"`
		Vencimiento *xsdDate `xml:"tna:vencimiento,omitempty"`
		Cuando      *xsdDate `xml:"tna:cuando"`
	}
	overlay.T = (*T)(t)
	overlay.Timestamp = (*xsdDate)(&overlay.T.Timestamp)
	overlay.Vencimiento = (*xsdDate)(&overlay.T.Vencimiento)
	overlay.Cuando = (*xsdDate)(&overlay.T.Cuando)
	return d.DecodeElement(&overlay, &start)
}

// Must be at least 1 items long
type _anon1 string

// May be one of PedidosDeAlmacen/Traza/PedidoCancelado
type _anon10 string

func (x *_anon10) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoCancelado"), nil
}

// May be one of Envios/Traza/EnvioDigitalizado
type _anon100 string

func (x *_anon100) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioDigitalizado"), nil
}

// May be one of Envios/Traza/RemitoDigitalizado
type _anon101 string

func (x *_anon101) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RemitoDigitalizado"), nil
}

// May be one of Envios/Traza/EnvioConDocumentacionErronea
type _anon102 string

func (x *_anon102) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConDocumentacionErronea"), nil
}

// May be one of Envios/Traza/EnvioActualizado
type _anon103 string

func (x *_anon103) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioActualizado"), nil
}

// May be one of Envios/Traza/CierreDeEntidad
type _anon104 string

func (x *_anon104) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/CierreDeEntidad"), nil
}

// May be one of Envios/Traza/EliminarMarcaDeRescate
type _anon105 string

func (x *_anon105) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EliminarMarcaDeRescate"), nil
}

// May be one of Envios/Traza/EnvioNovedadEnRecepcion
type _anon106 string

func (x *_anon106) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioNovedadEnRecepcion"), nil
}

// May be one of Envios/Traza/EnvioNovedadEnTransito
type _anon107 string

func (x *_anon107) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioNovedadEnTransito"), nil
}

// May be one of Envios/Traza/EnvioNovedadEnSucursalDestino
type _anon108 string

func (x *_anon108) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioNovedadEnSucursalDestino"), nil
}

// May be one of Envios/Traza/EnvioNovedadNoEntregado
type _anon109 string

func (x *_anon109) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioNovedadNoEntregado"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoConPiezaLanzada
type _anon11 string

func (x *_anon11) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoConPiezaLanzada"), nil
}

// May be one of Envios/Traza/RetiroNoRealizado
type _anon110 string

func (x *_anon110) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RetiroNoRealizado"), nil
}

// May be one of Envios/Traza/RetiroProcesado
type _anon111 string

func (x *_anon111) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RetiroProcesado"), nil
}

// May be one of Envios/Traza/EnvioNovedadEnReparto
type _anon112 string

func (x *_anon112) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioNovedadEnReparto"), nil
}

// May be one of Envios/Traza/EnvioNovedadEnRetiro
type _anon113 string

func (x *_anon113) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioNovedadEnRetiro"), nil
}

// May be one of Envios/Traza/EnvioFacturado
type _anon114 string

func (x *_anon114) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioFacturado"), nil
}

// May be one of Envios/EnvioSeModificanDatos
type _anon115 string

func (x *_anon115) MarshalText() ([]byte, error) {
	return []byte("Envios/EnvioSeModificanDatos"), nil
}

// May be one of Envios/Traza/EnvioSeRedirecciona
type _anon116 string

func (x *_anon116) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioSeRedirecciona"), nil
}

// May be one of Envios/Traza/RetiroProcesoFinalizado
type _anon117 string

func (x *_anon117) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RetiroProcesoFinalizado"), nil
}

// May be one of Envios/Traza/EnvioNovedadEnRendicion
type _anon118 string

func (x *_anon118) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioNovedadEnRendicion"), nil
}

// May be one of Envios/Traza/EnvioRemitoRecibidoEnSucursal
type _anon119 string

func (x *_anon119) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioRemitoRecibidoEnSucursal"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoLanzado
type _anon12 string

func (x *_anon12) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoLanzado"), nil
}

// May be one of Envios/Traza/EnvioDevuelto
type _anon120 string

func (x *_anon120) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioDevuelto"), nil
}

// May be one of Envios/Traza/EnvioNovedadPostEntrega
type _anon121 string

func (x *_anon121) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioNovedadPostEntrega"), nil
}

// May be one of Envios/Traza/GestionCobranzaAnulada
type _anon122 string

func (x *_anon122) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/GestionCobranzaAnulada"), nil
}

// May be one of Contratos/RecepcionDeRetiro
type _anon123 string

func (x *_anon123) MarshalText() ([]byte, error) {
	return []byte("Contratos/RecepcionDeRetiro"), nil
}

// May be one of Contratos/GeneracionDeRetiro
type _anon124 string

func (x *_anon124) MarshalText() ([]byte, error) {
	return []byte("Contratos/GeneracionDeRetiro"), nil
}

// May be one of Sorter/BultoPesadoYMedido
type _anon125 string

func (x *_anon125) MarshalText() ([]byte, error) {
	return []byte("Sorter/BultoPesadoYMedido"), nil
}

// May be one of Envios/Traza/FechaDeEntregaPactada
type _anon126 string

func (x *_anon126) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/FechaDeEntregaPactada"), nil
}

// May be one of Eventos/Traza/NovedadEnEnvioEventoTemporario
type _anon127 string

func (x *_anon127) MarshalText() ([]byte, error) {
	return []byte("Eventos/Traza/NovedadEnEnvioEventoTemporario"), nil
}

// May be one of Envios/Traza/AltaPorDevolucion
type _anon128 string

func (x *_anon128) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/AltaPorDevolucion"), nil
}

// May be one of Envios/Traza/ExpedicionEnReparto
type _anon129 string

func (x *_anon129) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ExpedicionEnReparto"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoNoSeAsigno
type _anon13 string

func (x *_anon13) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoNoSeAsigno"), nil
}

// May be one of Envios/Traza/ExpedicionEntregada
type _anon130 string

func (x *_anon130) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ExpedicionEntregada"), nil
}

// May be one of Envios/Traza/AltaPorRecanalizacion
type _anon131 string

func (x *_anon131) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/AltaPorRecanalizacion"), nil
}

// May be one of Envios/Traza/OrdenDeEnvioCreada
type _anon132 string

func (x *_anon132) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/OrdenDeEnvioCreada"), nil
}

// May be one of DatosMaestros/Sucursales/CambioEnCoberturaDeDistribucion
type _anon133 string

func (x *_anon133) MarshalText() ([]byte, error) {
	return []byte("DatosMaestros/Sucursales/CambioEnCoberturaDeDistribucion"), nil
}

// May be one of Envios/Traza/EliminarMarcaDeDestruccion
type _anon134 string

func (x *_anon134) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EliminarMarcaDeDestruccion"), nil
}

// May be one of Envios/Info/ConstanciaElectronicaGenerada
type _anon135 string

func (x *_anon135) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/ConstanciaElectronicaGenerada"), nil
}

// May be one of Envios/Info/ConstanciaEnPdfGenerada
type _anon136 string

func (x *_anon136) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/ConstanciaEnPdfGenerada"), nil
}

// May be one of Envios/Info/InformeDeRendicionDigitalizadoDisponible
type _anon137 string

func (x *_anon137) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/InformeDeRendicionDigitalizadoDisponible"), nil
}

// May be one of Envios/Info/DocumentoAndreaniDigitalizadoDisponible
type _anon138 string

func (x *_anon138) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/DocumentoAndreaniDigitalizadoDisponible"), nil
}

// May be one of Envios/Info/ConstanciaDeEntregaDigitalizadaDisponible
type _anon139 string

func (x *_anon139) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/ConstanciaDeEntregaDigitalizadaDisponible"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoParcialmenteAsignado
type _anon14 string

func (x *_anon14) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoParcialmenteAsignado"), nil
}

// May be one of Envios/Traza/OrdenDeEnvioRechazada
type _anon140 string

func (x *_anon140) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/OrdenDeEnvioRechazada"), nil
}

// May be one of Remoto/Mobile/Notificacion
type _anon141 string

func (x *_anon141) MarshalText() ([]byte, error) {
	return []byte("Remoto/Mobile/Notificacion"), nil
}

// May be one of OrdenesDeRetiro/Traza/OrdenDeRetiroActualizada
type _anon142 string

func (x *_anon142) MarshalText() ([]byte, error) {
	return []byte("OrdenesDeRetiro/Traza/OrdenDeRetiroActualizada"), nil
}

// May be one of OrdenesDeRetiro/Traza/OrdenDeRetiroCreada
type _anon143 string

func (x *_anon143) MarshalText() ([]byte, error) {
	return []byte("OrdenesDeRetiro/Traza/OrdenDeRetiroCreada"), nil
}

// May be one of Envios/Info/HojaDeRutaDigitalizada
type _anon144 string

func (x *_anon144) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/HojaDeRutaDigitalizada"), nil
}

// May be one of Paquetes/AltaDeComponente
type _anon145 string

func (x *_anon145) MarshalText() ([]byte, error) {
	return []byte("Paquetes/AltaDeComponente"), nil
}

// May be one of Paquetes/AltaDePaquete
type _anon146 string

func (x *_anon146) MarshalText() ([]byte, error) {
	return []byte("Paquetes/AltaDePaquete"), nil
}

// May be one of Paquetes/PaqueteCompletado
type _anon147 string

func (x *_anon147) MarshalText() ([]byte, error) {
	return []byte("Paquetes/PaqueteCompletado"), nil
}

// May be one of Paquetes/ComponenteRecibido
type _anon148 string

func (x *_anon148) MarshalText() ([]byte, error) {
	return []byte("Paquetes/ComponenteRecibido"), nil
}

// May be one of Envios/Info/LineaEnHojaDeRutaDigitalizada
type _anon149 string

func (x *_anon149) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/LineaEnHojaDeRutaDigitalizada"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoParcialmentePreparado
type _anon15 string

func (x *_anon15) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoParcialmentePreparado"), nil
}

// May be one of Remoto/Mobile/RectificacionMobile
type _anon150 string

func (x *_anon150) MarshalText() ([]byte, error) {
	return []byte("Remoto/Mobile/RectificacionMobile"), nil
}

// May be one of Envios/Info/HojaDeRutaDeDistribucionCreada
type _anon151 string

func (x *_anon151) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/HojaDeRutaDeDistribucionCreada"), nil
}

// May be one of DatosMaestros/ContratoActualizado/EvidenciasDeVisitaActualizadas
type _anon152 string

func (x *_anon152) MarshalText() ([]byte, error) {
	return []byte("DatosMaestros/ContratoActualizado/EvidenciasDeVisitaActualizadas"), nil
}

// May be one of Envios/Traza/ValoresRendidosAlRemitente
type _anon153 string

func (x *_anon153) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ValoresRendidosAlRemitente"), nil
}

// May be one of Envios/Info/ConstanciaDeHojaDeRutaGenerada
type _anon154 string

func (x *_anon154) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/ConstanciaDeHojaDeRutaGenerada"), nil
}

// May be one of Envios/OrdenDeEnvio/PedidoDeCancelacionDeOrdenDeEnvio
type _anon155 string

func (x *_anon155) MarshalText() ([]byte, error) {
	return []byte("Envios/OrdenDeEnvio/PedidoDeCancelacionDeOrdenDeEnvio"), nil
}

// May be one of Envios/OrdenDeEnvio/OrdenDeEnvioCancelada
type _anon156 string

func (x *_anon156) MarshalText() ([]byte, error) {
	return []byte("Envios/OrdenDeEnvio/OrdenDeEnvioCancelada"), nil
}

// May be one of Envios/OrdenDeEnvio/CancelacionDeOrdenDeEnvioRechazada
type _anon157 string

func (x *_anon157) MarshalText() ([]byte, error) {
	return []byte("Envios/OrdenDeEnvio/CancelacionDeOrdenDeEnvioRechazada"), nil
}

// May be one of Envios/Traza/RemitoDigitalizadoEnProveedor
type _anon158 string

func (x *_anon158) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RemitoDigitalizadoEnProveedor"), nil
}

// May be one of Envios/Operaciones/PedidoDeCambioDeDestino
type _anon159 string

func (x *_anon159) MarshalText() ([]byte, error) {
	return []byte("Envios/Operaciones/PedidoDeCambioDeDestino"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoPreasignado
type _anon16 string

func (x *_anon16) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoPreasignado"), nil
}

// May be one of Envios/Operaciones/CambioDeDetinoRealizado
type _anon160 string

func (x *_anon160) MarshalText() ([]byte, error) {
	return []byte("Envios/Operaciones/CambioDeDetinoRealizado"), nil
}

// May be one of Envios/Operaciones/CambioDeDestinoRechazado
type _anon161 string

func (x *_anon161) MarshalText() ([]byte, error) {
	return []byte("Envios/Operaciones/CambioDeDestinoRechazado"), nil
}

// May be one of Envios/Operaciones/PedidoDeSolicitudDeRescate
type _anon162 string

func (x *_anon162) MarshalText() ([]byte, error) {
	return []byte("Envios/Operaciones/PedidoDeSolicitudDeRescate"), nil
}

// May be one of Envios/Operaciones/PedidoDeSolicitudDeRescateRechazado
type _anon163 string

func (x *_anon163) MarshalText() ([]byte, error) {
	return []byte("Envios/Operaciones/PedidoDeSolicitudDeRescateRechazado"), nil
}

// May be one of Envios/Info/CargaConsolidada
type _anon164 string

func (x *_anon164) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/CargaConsolidada"), nil
}

// May be one of Envios/Info/CargaDesconsolidada
type _anon165 string

func (x *_anon165) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/CargaDesconsolidada"), nil
}

// May be one of GSIN/HojaDeRutaCreada
type _anon166 string

func (x *_anon166) MarshalText() ([]byte, error) {
	return []byte("GSIN/HojaDeRutaCreada"), nil
}

// May be one of GSIN/FinDeDistribucion
type _anon167 string

func (x *_anon167) MarshalText() ([]byte, error) {
	return []byte("GSIN/FinDeDistribucion"), nil
}

// May be one of Envios/Info/ImportacionRealizada
type _anon168 string

func (x *_anon168) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/ImportacionRealizada"), nil
}

// May be one of Internal/MensajeConPayload
type _anon169 string

func (x *_anon169) MarshalText() ([]byte, error) {
	return []byte("Internal/MensajeConPayload"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoPreparadoCompleto
type _anon17 string

func (x *_anon17) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoPreparadoCompleto"), nil
}

// May be one of Envios/Traza/OrdenDeEnvioSolicitada
type _anon170 string

func (x *_anon170) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/OrdenDeEnvioSolicitada"), nil
}

// May be one of Envios/Traza/CacInformaSituacionEnvio
type _anon171 string

func (x *_anon171) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/CacInformaSituacionEnvio"), nil
}

// May be one of Envios/Traza/CadenaDeFrioContieneDataLogger
type _anon172 string

func (x *_anon172) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/CadenaDeFrioContieneDataLogger"), nil
}

// May be one of Envios/Traza/CadenaDeFrioSinFrecuencia
type _anon173 string

func (x *_anon173) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/CadenaDeFrioSinFrecuencia"), nil
}

// May be one of Envios/Traza/CambioDeConservadora
type _anon174 string

func (x *_anon174) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/CambioDeConservadora"), nil
}

// May be one of Envios/Traza/CaminoIntransitable
type _anon175 string

func (x *_anon175) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/CaminoIntransitable"), nil
}

// May be one of Envios/Traza/CapacidadOperativaExcedida
type _anon176 string

func (x *_anon176) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/CapacidadOperativaExcedida"), nil
}

// May be one of Envios/Traza/ClienteDifiereFechaEntrega
type _anon177 string

func (x *_anon177) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ClienteDifiereFechaEntrega"), nil
}

// May be one of Envios/Traza/ClienteInformaCambioDomicilio
type _anon178 string

func (x *_anon178) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ClienteInformaCambioDomicilio"), nil
}

// May be one of Envios/Traza/ClienteInformaNoEsProductoSolicitado
type _anon179 string

func (x *_anon179) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ClienteInformaNoEsProductoSolicitado"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoExpedidoCompleto
type _anon18 string

func (x *_anon18) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoExpedidoCompleto"), nil
}

// May be one of Envios/Traza/ClienteInformaSinCheques
type _anon180 string

func (x *_anon180) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ClienteInformaSinCheques"), nil
}

// May be one of Envios/Traza/ClienteRetieneDocumentacionYMercaderia
type _anon181 string

func (x *_anon181) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ClienteRetieneDocumentacionYMercaderia"), nil
}

// May be one of Envios/Traza/ClienteSolicitaRepactarVisita
type _anon182 string

func (x *_anon182) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ClienteSolicitaRepactarVisita"), nil
}

// May be one of Envios/Traza/ConformacionDiferida
type _anon183 string

func (x *_anon183) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ConformacionDiferida"), nil
}

// May be one of Envios/Traza/ConformacionEntregado
type _anon184 string

func (x *_anon184) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ConformacionEntregado"), nil
}

// May be one of Envios/Traza/ConformacionObservada
type _anon185 string

func (x *_anon185) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ConformacionObservada"), nil
}

// May be one of Envios/Traza/ContenidoRotoEnEmpaqueSano
type _anon186 string

func (x *_anon186) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ContenidoRotoEnEmpaqueSano"), nil
}

// May be one of Envios/Traza/ContingenciaEnSistemas
type _anon187 string

func (x *_anon187) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ContingenciaEnSistemas"), nil
}

// May be one of Envios/Traza/DevolucionEntregadaSinDocumentacion
type _anon188 string

func (x *_anon188) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/DevolucionEntregadaSinDocumentacion"), nil
}

// May be one of Envios/Traza/DevolucionEnvioRecibidaPlazaInterior
type _anon189 string

func (x *_anon189) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/DevolucionEnvioRecibidaPlazaInterior"), nil
}

// May be one of PedidosDeAlmacen/DestinatarioCreado
type _anon19 string

func (x *_anon19) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/DestinatarioCreado"), nil
}

// May be one of Envios/Traza/DevolucionParcialCortoVto
type _anon190 string

func (x *_anon190) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/DevolucionParcialCortoVto"), nil
}

// May be one of Envios/Traza/EntregaPactadaEnReparto
type _anon191 string

func (x *_anon191) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EntregaPactadaEnReparto"), nil
}

// May be one of Envios/Traza/EnvioActivacionPendienteEnCAC
type _anon192 string

func (x *_anon192) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioActivacionPendienteEnCAC"), nil
}

// May be one of Envios/Traza/EnvioAnuladoEnOrigen
type _anon193 string

func (x *_anon193) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioAnuladoEnOrigen"), nil
}

// May be one of Envios/Traza/EnvioCompletoLiberado
type _anon194 string

func (x *_anon194) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioCompletoLiberado"), nil
}

// May be one of Envios/Traza/EnvioConDocumentacionFaltante
type _anon195 string

func (x *_anon195) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConDocumentacionFaltante"), nil
}

// May be one of Envios/Traza/DevolucionEnvioPlazoVencido
type _anon196 string

func (x *_anon196) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/DevolucionEnvioPlazoVencido"), nil
}

// May be one of Envios/Traza/EnvioConEntegaParcial
type _anon197 string

func (x *_anon197) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConEntegaParcial"), nil
}

// May be one of Envios/Traza/EnvioConEntegaUrgente
type _anon198 string

func (x *_anon198) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConEntegaUrgente"), nil
}

// May be one of Envios/Traza/EnvioConEntregaObservada
type _anon199 string

func (x *_anon199) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConEntregaObservada"), nil
}

// May be one of undefined, DNI, CUIT, CUIL
type _anon2 string

// May be one of PedidosDeAlmacen/DestinatarioModificado
type _anon20 string

func (x *_anon20) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/DestinatarioModificado"), nil
}

// May be one of Envios/Traza/EnvioConErrorConformacion
type _anon200 string

func (x *_anon200) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConErrorConformacion"), nil
}

// May be one of Envios/Traza/EnvioConGestionActivacionCAC
type _anon201 string

func (x *_anon201) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConGestionActivacionCAC"), nil
}

// May be one of Envios/Traza/EnvioConGestionCACCliente
type _anon202 string

func (x *_anon202) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConGestionCACCliente"), nil
}

// May be one of Envios/Traza/EnvioConGestionCACOperacion
type _anon203 string

func (x *_anon203) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConGestionCACOperacion"), nil
}

// May be one of Envios/Traza/EnvioConGestionTelefonica
type _anon204 string

func (x *_anon204) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConGestionTelefonica"), nil
}

// May be one of Envios/Traza/EnvioConMercaderiaDecomisada
type _anon205 string

func (x *_anon205) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConMercaderiaDecomisada"), nil
}

// May be one of Envios/Traza/EnvioConMercaderiaSecuetradaAduana
type _anon206 string

func (x *_anon206) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConMercaderiaSecuetradaAduana"), nil
}

// May be one of Envios/Traza/EnvioConReconformacionDeDocumentacion
type _anon207 string

func (x *_anon207) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConReconformacionDeDocumentacion"), nil
}

// May be one of Envios/Traza/EnvioConSolicitudDeRetorno
type _anon208 string

func (x *_anon208) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConSolicitudDeRetorno"), nil
}

// May be one of Envios/Traza/EnvioConTurnoConvenido
type _anon209 string

func (x *_anon209) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConTurnoConvenido"), nil
}

// May be one of PedidosDeAlmacen/DestinatarioEliminado
type _anon21 string

func (x *_anon21) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/DestinatarioEliminado"), nil
}

// May be one of Envios/Traza/EnvioDeMuestraMedica
type _anon210 string

func (x *_anon210) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioDeMuestraMedica"), nil
}

// May be one of Envios/Traza/EnvioEnAreaDevoluciones
type _anon211 string

func (x *_anon211) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioEnAreaDevoluciones"), nil
}

// May be one of Envios/Traza/EnvioEnCoordinacionEntregaCAC
type _anon212 string

func (x *_anon212) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioEnCoordinacionEntregaCAC"), nil
}

// May be one of Envios/Traza/EnvioEnCoordinacionTelefonicaCAC
type _anon213 string

func (x *_anon213) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioEnCoordinacionTelefonicaCAC"), nil
}

// May be one of Envios/Traza/EnvioEnProcesoExpedicion
type _anon214 string

func (x *_anon214) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioEnProcesoExpedicion"), nil
}

// May be one of Envios/Traza/EnvioEnServicioDeCoordinacionDeEntrega
type _anon215 string

func (x *_anon215) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioEnServicioDeCoordinacionDeEntrega"), nil
}

// May be one of Envios/Traza/EnvioEntregadoPendienteConfirmarCAC
type _anon216 string

func (x *_anon216) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioEntregadoPendienteConfirmarCAC"), nil
}

// May be one of Envios/Traza/EnvioEntregadoSePosdatadaGGCC
type _anon217 string

func (x *_anon217) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioEntregadoSePosdatadaGGCC"), nil
}

// May be one of Envios/Traza/EnvioFacturadoSap
type _anon218 string

func (x *_anon218) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioFacturadoSap"), nil
}

// May be one of Envios/Traza/EnvioFueraGrilla
type _anon219 string

func (x *_anon219) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioFueraGrilla"), nil
}

// May be one of ERP/SolicitudDeFacturacion
type _anon22 string

func (x *_anon22) MarshalText() ([]byte, error) {
	return []byte("ERP/SolicitudDeFacturacion"), nil
}

// May be one of Envios/Traza/EnvioIngresaReacondicionamiento
type _anon220 string

func (x *_anon220) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioIngresaReacondicionamiento"), nil
}

// May be one of Envios/Traza/EnvioLiberado
type _anon221 string

func (x *_anon221) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioLiberado"), nil
}

// May be one of Envios/Traza/EnvioPosdatado
type _anon222 string

func (x *_anon222) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioPosdatado"), nil
}

// May be one of Envios/Traza/EnvioProcesadoEnSorter
type _anon223 string

func (x *_anon223) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioProcesadoEnSorter"), nil
}

// May be one of Envios/Traza/EnvioRecomendado
type _anon224 string

func (x *_anon224) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioRecomendado"), nil
}

// May be one of Envios/Traza/EnvioRemitenteSolicitaEstacionar
type _anon225 string

func (x *_anon225) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioRemitenteSolicitaEstacionar"), nil
}

// May be one of Envios/Traza/EnvioReprogramadoPorFeriado
type _anon226 string

func (x *_anon226) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioReprogramadoPorFeriado"), nil
}

// May be one of Envios/Traza/EnvioSaleReacondicionamiento
type _anon227 string

func (x *_anon227) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioSaleReacondicionamiento"), nil
}

// May be one of Envios/Traza/EnvioSeRetiraDeSucursal
type _anon228 string

func (x *_anon228) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioSeRetiraDeSucursal"), nil
}

// May be one of Envios/Traza/EnvioSinTurnoDeSucursal
type _anon229 string

func (x *_anon229) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioSinTurnoDeSucursal"), nil
}

// May be one of DatosMaestros/ActualizacionDeCliente
type _anon23 string

func (x *_anon23) MarshalText() ([]byte, error) {
	return []byte("DatosMaestros/ActualizacionDeCliente"), nil
}

// May be one of Envios/Traza/ExcedeValorPoliza
type _anon230 string

func (x *_anon230) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ExcedeValorPoliza"), nil
}

// May be one of Envios/Traza/FaltaDocumentacionIIBB
type _anon231 string

func (x *_anon231) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/FaltaDocumentacionIIBB"), nil
}

// May be one of Envios/Traza/FaltanBultos
type _anon232 string

func (x *_anon232) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/FaltanBultos"), nil
}

// May be one of Envios/Traza/FaltanBultosYRemitos
type _anon233 string

func (x *_anon233) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/FaltanBultosYRemitos"), nil
}

// May be one of Envios/Traza/FaltaOrdenDeCompra
type _anon234 string

func (x *_anon234) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/FaltaOrdenDeCompra"), nil
}

// May be one of Envios/Traza/FaltaRemito
type _anon235 string

func (x *_anon235) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/FaltaRemito"), nil
}

// May be one of Envios/Traza/FeriadoLocal
type _anon236 string

func (x *_anon236) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/FeriadoLocal"), nil
}

// May be one of Envios/Traza/FueraDeHorarioDeRecepcion
type _anon237 string

func (x *_anon237) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/FueraDeHorarioDeRecepcion"), nil
}

// May be one of Envios/Traza/FueraDeHorarioDeTransmision
type _anon238 string

func (x *_anon238) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/FueraDeHorarioDeTransmision"), nil
}

// May be one of Envios/Traza/GestionCobranzaAnulada
type _anon239 string

func (x *_anon239) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/GestionCobranzaAnulada"), nil
}

// May be one of ERP/LiquidacionFacturada
type _anon24 string

func (x *_anon24) MarshalText() ([]byte, error) {
	return []byte("ERP/LiquidacionFacturada"), nil
}

// May be one of Envios/Traza/GestionCobranzaImporteModificado
type _anon240 string

func (x *_anon240) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/GestionCobranzaImporteModificado"), nil
}

// May be one of Envios/Traza/GestionCobranzaReembolsoCobrado
type _anon241 string

func (x *_anon241) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/GestionCobranzaReembolsoCobrado"), nil
}

// May be one of Envios/Traza/GestionCobranzaReembolsoNoCobrado
type _anon242 string

func (x *_anon242) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/GestionCobranzaReembolsoNoCobrado"), nil
}

// May be one of Envios/Traza/IngresoDeConservadoraACamara
type _anon243 string

func (x *_anon243) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/IngresoDeConservadoraACamara"), nil
}

// May be one of Envios/Traza/InversionEnBultoCerrado
type _anon244 string

func (x *_anon244) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/InversionEnBultoCerrado"), nil
}

// May be one of Envios/Traza/MercaderiaAControlar
type _anon245 string

func (x *_anon245) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/MercaderiaAControlar"), nil
}

// May be one of Envios/Traza/MercaderiaOEmpaqueEnMalEstado
type _anon246 string

func (x *_anon246) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/MercaderiaOEmpaqueEnMalEstado"), nil
}

// May be one of Envios/Traza/NoSonCondicionesPactadas
type _anon247 string

func (x *_anon247) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/NoSonCondicionesPactadas"), nil
}

// May be one of Envios/Traza/ReembolsoCobradoParcial
type _anon248 string

func (x *_anon248) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ReembolsoCobradoParcial"), nil
}

// May be one of Envios/Traza/RemitenteSolicitaRetenerMercaderia
type _anon249 string

func (x *_anon249) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RemitenteSolicitaRetenerMercaderia"), nil
}

// May be one of ERP/LiquidacionNoFacturada
type _anon25 string

func (x *_anon25) MarshalText() ([]byte, error) {
	return []byte("ERP/LiquidacionNoFacturada"), nil
}

// May be one of Envios/Traza/RemitoDemorado
type _anon250 string

func (x *_anon250) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RemitoDemorado"), nil
}

// May be one of Envios/Traza/RemitoImpreso
type _anon251 string

func (x *_anon251) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RemitoImpreso"), nil
}

// May be one of Envios/Traza/RemitoSuspendido
type _anon252 string

func (x *_anon252) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RemitoSuspendido"), nil
}

// May be one of Envios/Traza/RetiroRechazado
type _anon253 string

func (x *_anon253) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RetiroRechazado"), nil
}

// May be one of Envios/Traza/RoturaDeUnidadDeTransporte
type _anon254 string

func (x *_anon254) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RoturaDeUnidadDeTransporte"), nil
}

// May be one of Envios/Traza/RoturaParcial
type _anon255 string

func (x *_anon255) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RoturaParcial"), nil
}

// May be one of Envios/Traza/RoturaTotal
type _anon256 string

func (x *_anon256) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RoturaTotal"), nil
}

// May be one of Envios/Traza/SeDectectoDemoraOperativa
type _anon257 string

func (x *_anon257) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SeDectectoDemoraOperativa"), nil
}

// May be one of Envios/Traza/SeDectectoDemoraViaje
type _anon258 string

func (x *_anon258) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SeDectectoDemoraViaje"), nil
}

// May be one of Envios/Traza/SeEnviaNotificacionADestinatario
type _anon259 string

func (x *_anon259) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SeEnviaNotificacionADestinatario"), nil
}

// May be one of DatosMaestros/AltaDeSucursal
type _anon26 string

func (x *_anon26) MarshalText() ([]byte, error) {
	return []byte("DatosMaestros/AltaDeSucursal"), nil
}

// May be one of Envios/Traza/SePierdeTurnoDeEntrega
type _anon260 string

func (x *_anon260) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SePierdeTurnoDeEntrega"), nil
}

// May be one of Envios/Traza/SeProduceCasoFuerzaMayor
type _anon261 string

func (x *_anon261) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SeProduceCasoFuerzaMayor"), nil
}

// May be one of Envios/Traza/SeProduceNovedadEnRuta
type _anon262 string

func (x *_anon262) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SeProduceNovedadEnRuta"), nil
}

// May be one of Envios/Traza/SeProduceNovedadEnSucursal
type _anon263 string

func (x *_anon263) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SeProduceNovedadEnSucursal"), nil
}

// May be one of Envios/Traza/SeRealizoCierreConservadora
type _anon264 string

func (x *_anon264) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SeRealizoCierreConservadora"), nil
}

// May be one of Envios/Traza/SeRechazaChequeErrorConfeccion
type _anon265 string

func (x *_anon265) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SeRechazaChequeErrorConfeccion"), nil
}

// May be one of Envios/Traza/SeRechazaRemito
type _anon266 string

func (x *_anon266) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SeRechazaRemito"), nil
}

// May be one of Envios/Traza/SeReemplazaRefrigeranteConservadora
type _anon267 string

func (x *_anon267) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SeReemplazaRefrigeranteConservadora"), nil
}

// May be one of Envios/Traza/SinFrecuenciaDeViaje
type _anon268 string

func (x *_anon268) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SinFrecuenciaDeViaje"), nil
}

// May be one of Envios/Traza/SinStockParaDespachar
type _anon269 string

func (x *_anon269) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SinStockParaDespachar"), nil
}

// May be one of DatosMaestros/BajaDeSucursal
type _anon27 string

func (x *_anon27) MarshalText() ([]byte, error) {
	return []byte("DatosMaestros/BajaDeSucursal"), nil
}

// May be one of Envios/Traza/SobranBultos
type _anon270 string

func (x *_anon270) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SobranBultos"), nil
}

// May be one of Envios/Traza/SobranBultosYRemitos
type _anon271 string

func (x *_anon271) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SobranBultosYRemitos"), nil
}

// May be one of Envios/Traza/SobraRemito
type _anon272 string

func (x *_anon272) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SobraRemito"), nil
}

// May be one of Envios/Traza/TrazabilidadFarmaConDiscrepancia
type _anon273 string

func (x *_anon273) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/TrazabilidadFarmaConDiscrepancia"), nil
}

// May be one of Envios/Traza/TrazabilidadFarmaEnGestion
type _anon274 string

func (x *_anon274) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/TrazabilidadFarmaEnGestion"), nil
}

// May be one of Envios/Traza/UnidadDeTransporteDemorada
type _anon275 string

func (x *_anon275) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/UnidadDeTransporteDemorada"), nil
}

// May be one of Envios/Traza/UnidadesFaltantesBultosCerrados
type _anon276 string

func (x *_anon276) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/UnidadesFaltantesBultosCerrados"), nil
}

// May be one of Envios/Traza/UnidadesSobrantesBultosCerrados
type _anon277 string

func (x *_anon277) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/UnidadesSobrantesBultosCerrados"), nil
}

// May be one of Envios/Traza/VerificarDomicilio
type _anon278 string

func (x *_anon278) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/VerificarDomicilio"), nil
}

// May be one of Envios/Traza/ZonaDeRiesgo
type _anon279 string

func (x *_anon279) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ZonaDeRiesgo"), nil
}

// May be one of Envios/Info/ActualizacionDeEstadoEnvio
type _anon28 string

func (x *_anon28) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/ActualizacionDeEstadoEnvio"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaCadenaDeFrioSinFrecuencia
type _anon280 string

func (x *_anon280) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaCadenaDeFrioSinFrecuencia"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaClienteInformaCambioDomicilio
type _anon281 string

func (x *_anon281) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaClienteInformaCambioDomicilio"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaClienteInformaNoEsProductoSolicitado
type _anon282 string

func (x *_anon282) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaClienteInformaNoEsProductoSolicitado"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaClienteInformaSinCheques
type _anon283 string

func (x *_anon283) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaClienteInformaSinCheques"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaClienteSolicitaRepactarVisita
type _anon284 string

func (x *_anon284) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaClienteSolicitaRepactarVisita"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaContenidoRotoEpaqueSano
type _anon285 string

func (x *_anon285) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaContenidoRotoEpaqueSano"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaDevolucionParcialCortoVto
type _anon286 string

func (x *_anon286) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaDevolucionParcialCortoVto"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaDevolucionRecibidaPlazaInterior
type _anon287 string

func (x *_anon287) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaDevolucionRecibidaPlazaInterior"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaEnvioConDocumentacionFaltante
type _anon288 string

func (x *_anon288) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaEnvioConDocumentacionFaltante"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaEnvioConEntegaParcial
type _anon289 string

func (x *_anon289) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaEnvioConEntegaParcial"), nil
}

// May be one of Envios/Traza/CambioDeDestino
type _anon29 string

func (x *_anon29) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/CambioDeDestino"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaEnvioConGestionTelefonica
type _anon290 string

func (x *_anon290) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaEnvioConGestionTelefonica"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaEnvioConSolicitudDeRetorno
type _anon291 string

func (x *_anon291) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaEnvioConSolicitudDeRetorno"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaEnvioEnCoordinacionEntregaCAC
type _anon292 string

func (x *_anon292) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaEnvioEnCoordinacionEntregaCAC"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaEnvioSeRetiraDeSucursal
type _anon293 string

func (x *_anon293) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaEnvioSeRetiraDeSucursal"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaEnvioSinTurnoDeSucursal
type _anon294 string

func (x *_anon294) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaEnvioSinTurnoDeSucursal"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaFaltaDocumentacionIIBB
type _anon295 string

func (x *_anon295) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaFaltaDocumentacionIIBB"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaFaltanBultos
type _anon296 string

func (x *_anon296) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaFaltanBultos"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaFaltanBultosYRemitos
type _anon297 string

func (x *_anon297) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaFaltanBultosYRemitos"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaFaltaOrdenDeCompra
type _anon298 string

func (x *_anon298) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaFaltaOrdenDeCompra"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaFaltaRemito
type _anon299 string

func (x *_anon299) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaFaltaRemito"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoControlado
type _anon3 string

func (x *_anon3) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoControlado"), nil
}

// May be one of Envios/Info/NotificacionElectronica
type _anon30 string

func (x *_anon30) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/NotificacionElectronica"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaFueraDeHorarioDeRecepcion
type _anon300 string

func (x *_anon300) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaFueraDeHorarioDeRecepcion"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaIngresoDeConservadoraACamara
type _anon301 string

func (x *_anon301) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaIngresoDeConservadoraACamara"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaInversionEnBultoCerrado
type _anon302 string

func (x *_anon302) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaInversionEnBultoCerrado"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaNoSonCondicionesPactadas
type _anon303 string

func (x *_anon303) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaNoSonCondicionesPactadas"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaRoturaParcial
type _anon304 string

func (x *_anon304) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaRoturaParcial"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaRoturaTotal
type _anon305 string

func (x *_anon305) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaRoturaTotal"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaSePierdeTurnoDeEntrega
type _anon306 string

func (x *_anon306) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaSePierdeTurnoDeEntrega"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaSinFrecuenciaDeViaje
type _anon307 string

func (x *_anon307) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaSinFrecuenciaDeViaje"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaSobranBultos
type _anon308 string

func (x *_anon308) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaSobranBultos"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaSobranBultosYRemitos
type _anon309 string

func (x *_anon309) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaSobranBultosYRemitos"), nil
}

// May be one of Envios/Info/SeCargoPOD
type _anon31 string

func (x *_anon31) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/SeCargoPOD"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaSobraRemito
type _anon310 string

func (x *_anon310) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaSobraRemito"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaSolicitudDeRetorno
type _anon311 string

func (x *_anon311) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaSolicitudDeRetorno"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaUnidadesSobrantesBultosCerrados
type _anon312 string

func (x *_anon312) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaUnidadesSobrantesBultosCerrados"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaVerificarDomicilio
type _anon313 string

func (x *_anon313) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaVerificarDomicilio"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaVisita
type _anon314 string

func (x *_anon314) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaVisita"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaZonaDeRiesgo
type _anon315 string

func (x *_anon315) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaZonaDeRiesgo"), nil
}

// May be one of Envios/Traza/EnvioConContingenciaSanitaria
type _anon316 string

func (x *_anon316) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConContingenciaSanitaria"), nil
}

// May be one of Envios/Traza/Respuesta/RespuestaEnvioConContingenciaSanitaria
type _anon317 string

func (x *_anon317) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Respuesta/RespuestaEnvioConContingenciaSanitaria"), nil
}

// May be one of Envios/Pregunta/FueraDeTurnoDeEntrega
type _anon318 string

func (x *_anon318) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/FueraDeTurnoDeEntrega"), nil
}

// May be one of Envios/Pregunta/GestionDeCoordinacion
type _anon319 string

func (x *_anon319) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/GestionDeCoordinacion"), nil
}

// May be one of Envios/Traza/ComienzoCustodiaEnSucursal
type _anon32 string

func (x *_anon32) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ComienzoCustodiaEnSucursal"), nil
}

// May be one of Envios/Pregunta/DestinoEnZonaDeRiesgo
type _anon320 string

func (x *_anon320) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinoEnZonaDeRiesgo"), nil
}

// May be one of Envios/Pregunta/SinTurnoDeEntrega
type _anon321 string

func (x *_anon321) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/SinTurnoDeEntrega"), nil
}

// May be one of Envios/Pregunta/DestinatarioInformaEnvioDuplicado
type _anon322 string

func (x *_anon322) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioInformaEnvioDuplicado"), nil
}

// May be one of Envios/Pregunta/DestinatarioDeViaje
type _anon323 string

func (x *_anon323) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioDeViaje"), nil
}

// May be one of Envios/Pregunta/DestinatarioSolicitaCambiarDomicilio
type _anon324 string

func (x *_anon324) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioSolicitaCambiarDomicilio"), nil
}

// May be one of Envios/Pregunta/DestinatarioDesconocido
type _anon325 string

func (x *_anon325) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioDesconocido"), nil
}

// May be one of Envios/Pregunta/DestinatarioRechazaEntrega
type _anon326 string

func (x *_anon326) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioRechazaEntrega"), nil
}

// May be one of Envios/Pregunta/DestinatarioSolicitaRetirarEnSucursal
type _anon327 string

func (x *_anon327) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioSolicitaRetirarEnSucursal"), nil
}

// May be one of Envios/Pregunta/DestinatarioSeMudo
type _anon328 string

func (x *_anon328) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioSeMudo"), nil
}

// May be one of Envios/Pregunta/DestinatarioSolicitaRepactarEntrega
type _anon329 string

func (x *_anon329) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioSolicitaRepactarEntrega"), nil
}

// May be one of Envios/Traza/Destruccion
type _anon33 string

func (x *_anon33) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Destruccion"), nil
}

// May be one of Envios/Pregunta/TelefonoDeContactoErroneo
type _anon330 string

func (x *_anon330) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/TelefonoDeContactoErroneo"), nil
}

// May be one of Envios/Pregunta/FaltaOrdenDeCompra
type _anon331 string

func (x *_anon331) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/FaltaOrdenDeCompra"), nil
}

// May be one of Envios/Pregunta/DestinatarioSinChequesPreparados
type _anon332 string

func (x *_anon332) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioSinChequesPreparados"), nil
}

// May be one of Envios/Pregunta/DestinatarioEnfermoFallecido
type _anon333 string

func (x *_anon333) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioEnfermoFallecido"), nil
}

// May be one of Envios/Pregunta/DestinatarioNoCumpleCondicionesPactadas
type _anon334 string

func (x *_anon334) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioNoCumpleCondicionesPactadas"), nil
}

// May be one of Envios/Pregunta/DestinatarioNoCumpleRequisitos
type _anon335 string

func (x *_anon335) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioNoCumpleRequisitos"), nil
}

// May be one of Envios/Pregunta/DestinatarioInformaNoEsCantidadSolicitada
type _anon336 string

func (x *_anon336) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioInformaNoEsCantidadSolicitada"), nil
}

// May be one of Envios/Pregunta/DestinatarioInformaNoEsProductoSolicitado
type _anon337 string

func (x *_anon337) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioInformaNoEsProductoSolicitado"), nil
}

// May be one of Envios/Pregunta/DestinatarioInformaDesconocerEntrega
type _anon338 string

func (x *_anon338) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioInformaDesconocerEntrega"), nil
}

// May be one of Envios/Pregunta/DestinatarioNoDisponeDePagoFlete
type _anon339 string

func (x *_anon339) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/DestinatarioNoDisponeDePagoFlete"), nil
}

// May be one of Envios/Traza/Digitalizacion
type _anon34 string

func (x *_anon34) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Digitalizacion"), nil
}

// May be one of Envios/Pregunta/TitularAusenteEnDomicilio
type _anon340 string

func (x *_anon340) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/TitularAusenteEnDomicilio"), nil
}

// May be one of Envios/Pregunta/RemitenteDesconoceRetiro
type _anon341 string

func (x *_anon341) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/RemitenteDesconoceRetiro"), nil
}

// May be one of Envios/Pregunta/VerificarDomicilioRetiro
type _anon342 string

func (x *_anon342) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/VerificarDomicilioRetiro"), nil
}

// May be one of Envios/Pregunta/MercaderiaSinPreparar
type _anon343 string

func (x *_anon343) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/MercaderiaSinPreparar"), nil
}

// May be one of Envios/Pregunta/NoPoseeRemito
type _anon344 string

func (x *_anon344) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/NoPoseeRemito"), nil
}

// May be one of Envios/Pregunta/ContingenciaSanitaria
type _anon345 string

func (x *_anon345) MarshalText() ([]byte, error) {
	return []byte("Envios/Pregunta/ContingenciaSanitaria"), nil
}

// May be one of Envios/Respuesta/LlamarADestinatarioParaConfirmar
type _anon346 string

func (x *_anon346) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/LlamarADestinatarioParaConfirmar"), nil
}

// May be one of Envios/Respuesta/RemitenteInformaNuevoDomicilio
type _anon347 string

func (x *_anon347) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/RemitenteInformaNuevoDomicilio"), nil
}

// May be one of Envios/Respuesta/RemitenteSolicitaNuevaVisita
type _anon348 string

func (x *_anon348) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/RemitenteSolicitaNuevaVisita"), nil
}

// May be one of Envios/Respuesta/DevolverEnvioAOrigen
type _anon349 string

func (x *_anon349) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/DevolverEnvioAOrigen"), nil
}

// May be one of Envios/Traza/EnvioEntregado
type _anon35 string

func (x *_anon35) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioEntregado"), nil
}

// May be one of Envios/Respuesta/RepactarFechaEntrega
type _anon350 string

func (x *_anon350) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/RepactarFechaEntrega"), nil
}

// May be one of Envios/Respuesta/CoordinarTurnoDeEntrega
type _anon351 string

func (x *_anon351) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/CoordinarTurnoDeEntrega"), nil
}

// May be one of Envios/Respuesta/EntregarSinTurno
type _anon352 string

func (x *_anon352) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/EntregarSinTurno"), nil
}

// May be one of Envios/Respuesta/PasarACtaCteYEntregar
type _anon353 string

func (x *_anon353) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/PasarACtaCteYEntregar"), nil
}

// May be one of Envios/Respuesta/AutorizarCustoria
type _anon354 string

func (x *_anon354) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/AutorizarCustoria"), nil
}

// May be one of Envios/Respuesta/SolicitarNuevaVisita
type _anon355 string

func (x *_anon355) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/SolicitarNuevaVisita"), nil
}

// May be one of Envios/Respuesta/AutorizarEstacionar
type _anon356 string

func (x *_anon356) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/AutorizarEstacionar"), nil
}

// May be one of Envios/Respuesta/SeRetiraEnvio
type _anon357 string

func (x *_anon357) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/SeRetiraEnvio"), nil
}

// May be one of Envios/Respuesta/EnviarOrdenDeCompra
type _anon358 string

func (x *_anon358) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/EnviarOrdenDeCompra"), nil
}

// May be one of Envios/Respuesta/AutorizarModificacionGestionCobranza
type _anon359 string

func (x *_anon359) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/AutorizarModificacionGestionCobranza"), nil
}

// May be one of Envios/Traza/EntregaEnSucursalSolicitada
type _anon36 string

func (x *_anon36) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EntregaEnSucursalSolicitada"), nil
}

// May be one of Envios/Respuesta/EntregarYCobrarDiferido
type _anon360 string

func (x *_anon360) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/EntregarYCobrarDiferido"), nil
}

// May be one of Envios/Respuesta/AnularPorteDebidoYEntregar
type _anon361 string

func (x *_anon361) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/AnularPorteDebidoYEntregar"), nil
}

// May be one of Envios/Respuesta/EspecificarRespuesta
type _anon362 string

func (x *_anon362) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/EspecificarRespuesta"), nil
}

// May be one of Envios/Respuesta/ReprogramarRetiro
type _anon363 string

func (x *_anon363) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/ReprogramarRetiro"), nil
}

// May be one of Envios/Respuesta/AnularRetiro
type _anon364 string

func (x *_anon364) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/AnularRetiro"), nil
}

// May be one of Envios/Respuesta/GestionarRetiro
type _anon365 string

func (x *_anon365) MarshalText() ([]byte, error) {
	return []byte("Envios/Respuesta/GestionarRetiro"), nil
}

// May be one of Envios/Traza/EnvioNoEntregado
type _anon37 string

func (x *_anon37) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioNoEntregado"), nil
}

// May be one of Envios/Traza/ExcedenteLogico
type _anon38 string

func (x *_anon38) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ExcedenteLogico"), nil
}

// May be one of Envios/Traza/ExpedicionHojaDeRutaCabecera
type _anon39 string

func (x *_anon39) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ExpedicionHojaDeRutaCabecera"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoCreado
type _anon4 string

func (x *_anon4) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoCreado"), nil
}

// May be one of Envios/Traza/ExpedicionHojaDeRutaDeViaje
type _anon40 string

func (x *_anon40) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ExpedicionHojaDeRutaDeViaje"), nil
}

// May be one of Envios/Traza/FinCustodiaEnSucursal
type _anon41 string

func (x *_anon41) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/FinCustodiaEnSucursal"), nil
}

// May be one of Envios/Traza/GestionCobranza
type _anon42 string

func (x *_anon42) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/GestionCobranza"), nil
}

// May be one of Envios/Traza/GestionTelefonica
type _anon43 string

func (x *_anon43) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/GestionTelefonica"), nil
}

// May be one of Envios/Traza/ImportacionDeDatosAdicionales
type _anon44 string

func (x *_anon44) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ImportacionDeDatosAdicionales"), nil
}

// May be one of Envios/Traza/Impresion
type _anon45 string

func (x *_anon45) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Impresion"), nil
}

// May be one of Envios/Traza/PasajeDeExcedenteAIngresada
type _anon46 string

func (x *_anon46) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/PasajeDeExcedenteAIngresada"), nil
}

// May be one of Envios/Traza/RectificacionDeMotivo
type _anon47 string

func (x *_anon47) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RectificacionDeMotivo"), nil
}

// May be one of Envios/Traza/Reenvio
type _anon48 string

func (x *_anon48) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Reenvio"), nil
}

// May be one of Envios/Traza/RendicionConRemito
type _anon49 string

func (x *_anon49) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RendicionConRemito"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoComienzoDeTraza
type _anon5 string

func (x *_anon5) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoComienzoDeTraza"), nil
}

// May be one of Envios/Traza/RendicionDigital
type _anon50 string

func (x *_anon50) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RendicionDigital"), nil
}

// May be one of Envios/Traza/RendicionLogica
type _anon51 string

func (x *_anon51) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RendicionLogica"), nil
}

// May be one of Envios/Traza/SolicitudDeRescate
type _anon52 string

func (x *_anon52) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/SolicitudDeRescate"), nil
}

// May be one of Envios/Traza/VerificadoDeImagen
type _anon53 string

func (x *_anon53) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/VerificadoDeImagen"), nil
}

// May be one of Envios/Traza/Visita
type _anon54 string

func (x *_anon54) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Visita"), nil
}

// May be one of Remoto/Mobile/VisitaMobile
type _anon55 string

func (x *_anon55) MarshalText() ([]byte, error) {
	return []byte("Remoto/Mobile/VisitaMobile"), nil
}

// May be one of DatosMaestros/ContratoActualizado
type _anon56 string

func (x *_anon56) MarshalText() ([]byte, error) {
	return []byte("DatosMaestros/ContratoActualizado"), nil
}

// May be one of Tiendas/LiquidacionDeAbono
type _anon57 string

func (x *_anon57) MarshalText() ([]byte, error) {
	return []byte("Tiendas/LiquidacionDeAbono"), nil
}

// May be one of DatosMaestros/CambioEnEquipoComercial
type _anon58 string

func (x *_anon58) MarshalText() ([]byte, error) {
	return []byte("DatosMaestros/CambioEnEquipoComercial"), nil
}

// May be one of Envios/Info/ShotCerrado
type _anon59 string

func (x *_anon59) MarshalText() ([]byte, error) {
	return []byte("Envios/Info/ShotCerrado"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoTrazado
type _anon6 string

func (x *_anon6) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoTrazado"), nil
}

// May be one of Envios/Traza/AltaManual
type _anon60 string

func (x *_anon60) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/AltaManual"), nil
}

// May be one of Envios/Traza/AltaAutomatica
type _anon61 string

func (x *_anon61) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/AltaAutomatica"), nil
}

// May be one of Envios/Traza/AltaRemota
type _anon62 string

func (x *_anon62) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/AltaRemota"), nil
}

// May be one of Envios/Traza/AltaConAnomalia
type _anon63 string

func (x *_anon63) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/AltaConAnomalia"), nil
}

// May be one of Envios/Traza/AltaDeExcedente
type _anon64 string

func (x *_anon64) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/AltaDeExcedente"), nil
}

// May be one of Envios/Traza/Admision
type _anon65 string

func (x *_anon65) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Admision"), nil
}

// May be one of DatosMaestros/NovedadEnDomicilio
type _anon66 string

func (x *_anon66) MarshalText() ([]byte, error) {
	return []byte("DatosMaestros/NovedadEnDomicilio"), nil
}

// May be one of Envios/Traza/Distribucion
type _anon67 string

func (x *_anon67) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Distribucion"), nil
}

// May be one of Envios/Traza/Siniestro
type _anon68 string

func (x *_anon68) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Siniestro"), nil
}

// May be one of Envios/Traza/ExcesoDePeso
type _anon69 string

func (x *_anon69) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ExcesoDePeso"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoComienzoAcondicionamiento
type _anon7 string

func (x *_anon7) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoComienzoAcondicionamiento"), nil
}

// May be one of Envios/Traza/ExcesoDeFrecuencia
type _anon70 string

func (x *_anon70) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ExcesoDeFrecuencia"), nil
}

// May be one of Envios/Traza/ExcesoDeCantidad
type _anon71 string

func (x *_anon71) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ExcesoDeCantidad"), nil
}

// May be one of Envios/Traza/AltaInterna
type _anon72 string

func (x *_anon72) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/AltaInterna"), nil
}

// May be one of Envios/Traza/RecepcionEnSucursalDestino
type _anon73 string

func (x *_anon73) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RecepcionEnSucursalDestino"), nil
}

// May be one of Envios/Traza/EnvioAnulado
type _anon74 string

func (x *_anon74) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioAnulado"), nil
}

// May be one of Envios/Traza/Rescate
type _anon75 string

func (x *_anon75) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/Rescate"), nil
}

// May be one of Envios/Traza/InicioClicloDeRendicion
type _anon76 string

func (x *_anon76) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/InicioClicloDeRendicion"), nil
}

// May be one of Envios/Traza/EnvioRendido
type _anon77 string

func (x *_anon77) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioRendido"), nil
}

// May be one of Envios/Traza/PedidoDeDestruccion
type _anon78 string

func (x *_anon78) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/PedidoDeDestruccion"), nil
}

// May be one of Envios/Traza/EnvioDespachado
type _anon79 string

func (x *_anon79) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioDespachado"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoAcondicionado
type _anon8 string

func (x *_anon8) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoAcondicionado"), nil
}

// May be one of Envios/Traza/EnvioConsolidado
type _anon80 string

func (x *_anon80) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioConsolidado"), nil
}

// May be one of Envios/Traza/AsignacionACaja
type _anon81 string

func (x *_anon81) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/AsignacionACaja"), nil
}

// May be one of Envios/AltaDeRecibo
type _anon82 string

func (x *_anon82) MarshalText() ([]byte, error) {
	return []byte("Envios/AltaDeRecibo"), nil
}

// May be one of Envios/Traza/EnvioEnInformeDeRendicion
type _anon83 string

func (x *_anon83) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioEnInformeDeRendicion"), nil
}

// May be one of Envios/Traza/InicioEtapaDeGestionTelefonica
type _anon84 string

func (x *_anon84) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/InicioEtapaDeGestionTelefonica"), nil
}

// May be one of Envios/Traza/ReactivacionDeBolsin
type _anon85 string

func (x *_anon85) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ReactivacionDeBolsin"), nil
}

// May be one of Envios/Traza/NovedadConEnvioEnCourier
type _anon86 string

func (x *_anon86) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/NovedadConEnvioEnCourier"), nil
}

// May be one of Envios/Traza/CanalizadoACourier
type _anon87 string

func (x *_anon87) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/CanalizadoACourier"), nil
}

// May be one of Envios/Traza/RecibidoEnCourier
type _anon88 string

func (x *_anon88) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RecibidoEnCourier"), nil
}

// May be one of Envios/Traza/ImpresionDeRemitoDeImposicion
type _anon89 string

func (x *_anon89) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/ImpresionDeRemitoDeImposicion"), nil
}

// May be one of PedidosDeAlmacen/Traza/PedidoAsignado
type _anon9 string

func (x *_anon9) MarshalText() ([]byte, error) {
	return []byte("PedidosDeAlmacen/Traza/PedidoAsignado"), nil
}

// May be one of Envios/Traza/IntroduccionDeMotivo
type _anon90 string

func (x *_anon90) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/IntroduccionDeMotivo"), nil
}

// May be one of Envios/Traza/EnvioRecanalizado
type _anon91 string

func (x *_anon91) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioRecanalizado"), nil
}

// May be one of Envios/Traza/EnvioDesactivadoAutomaticamente
type _anon92 string

func (x *_anon92) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioDesactivadoAutomaticamente"), nil
}

// May be one of Envios/Traza/RemisionDeEnvio
type _anon93 string

func (x *_anon93) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/RemisionDeEnvio"), nil
}

// May be one of Envios/Traza/IncorporarMarcaDeCustodia
type _anon94 string

func (x *_anon94) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/IncorporarMarcaDeCustodia"), nil
}

// May be one of Trafico/DatosDeDistribuidorActualizados
type _anon95 string

func (x *_anon95) MarshalText() ([]byte, error) {
	return []byte("Trafico/DatosDeDistribuidorActualizados"), nil
}

// May be one of Trafico/BajaDeDistribuidor
type _anon96 string

func (x *_anon96) MarshalText() ([]byte, error) {
	return []byte("Trafico/BajaDeDistribuidor"), nil
}

// May be one of Trafico/AltaDeDistribuidor
type _anon97 string

func (x *_anon97) MarshalText() ([]byte, error) {
	return []byte("Trafico/AltaDeDistribuidor"), nil
}

// May be one of Envios/Traza/EnvioPendienteDeValidacion
type _anon98 string

func (x *_anon98) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioPendienteDeValidacion"), nil
}

// May be one of Envios/Traza/EnvioPendienteDeDigitalizacion
type _anon99 string

func (x *_anon99) MarshalText() ([]byte, error) {
	return []byte("Envios/Traza/EnvioPendienteDeDigitalizacion"), nil
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return []byte((time.Time)(t).Format("2006-01-02T15:04:05.999999999")), nil
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}

type xsdTime time.Time

func (t *xsdTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalText() ([]byte, error) {
	return []byte((time.Time)(t).Format("15:04:05.999999999")), nil
}
func (t xsdTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
